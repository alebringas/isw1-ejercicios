

----STARTUP---- (15 November 2019 19:42:02) as /home/alejandra/facultad/isw1/cuis/TusLibros/CuisUniversity-3938.image!


----End fileIn of /home/alejandra/facultad/isw1/cuis/TusLibros/TusLibros.st----!

!testRun: #MarketInterfaceTest #test01NewlyCreatedCartIsEmpty stamp: 'A.B. 11/15/2019 19:42:40'!
PASSED!

!testRun: #MarketInterfaceTest #test02CreatingCartsReturnDifferentIDs stamp: 'A.B. 11/15/2019 19:42:40'!
PASSED!

!testRun: #MarketInterfaceTest #test03OneBookAddedToCartIsListed stamp: 'A.B. 11/15/2019 19:42:40'!
PASSED!

!testRun: #MarketInterfaceTest #test04MoreThanOneBookAddedAreListedCorrectly stamp: 'A.B. 11/15/2019 19:42:40'!
PASSED!

!testRun: #MarketInterfaceTest #test05DifferentCartsCanBeListedCorrectly stamp: 'A.B. 11/15/2019 19:42:40'!
PASSED!

!testRun: #MarketInterfaceTest #test06ListingNonExistantCartIDRaisesError stamp: 'A.B. 11/15/2019 19:42:40'!
PASSED!

!testRun: #MarketInterfaceTest #test07AddingToInvalidCartIDRaisesError stamp: 'A.B. 11/15/2019 19:42:40'!
PASSED!

!testRun: #MarketInterfaceTest #test08CreatingCartWithIncorrectPasswordRaisesError stamp: 'A.B. 11/15/2019 19:42:40'!
PASSED!

!testRun: #MarketInterfaceTest #test09CreatingCartWithInvalidUserRaisesError stamp: 'A.B. 11/15/2019 19:42:40'!
PASSED!

!testRun: #MarketInterfaceTest #test10CheckoutCartWithInvalidIdRaisesError stamp: 'A.B. 11/15/2019 19:42:40'!
PASSED!

!testRun: #MarketInterfaceTest #test11DifferentValidCheckoutsGiveDIfferentTransactionIds stamp: 'A.B. 11/15/2019 19:42:40'!
PASSED!

!testRun: #MarketInterfaceTest #test12AddingBooksToClosedCartRaisesError stamp: 'A.B. 11/15/2019 19:42:40'!
PASSED!

!testRun: #MarketInterfaceTest #test13CheckingOutTwiceTheSameCartRaisesError stamp: 'A.B. 11/15/2019 19:42:40'!
PASSED!

!testRun: #MarketInterfaceTest #test14CheckingOutCommunicatesCorrectlyWithMP stamp: 'A.B. 11/15/2019 19:42:40'!
PASSED!

!testRun: #MarketInterfaceTest #test15ListingPurchasesOfInvalidUserRaisesError stamp: 'A.B. 11/15/2019 19:42:40'!
PASSED!

!testRun: #MarketInterfaceTest #test16ListingPurchasesWithInvalidPasswordRaisesError stamp: 'A.B. 11/15/2019 19:42:40'!
PASSED!

!testRun: #MarketInterfaceTest #test17ListPurchasesOfNewUserIsEmpty stamp: 'A.B. 11/15/2019 19:42:40'!
PASSED!

!testRun: #MarketInterfaceTest #test18ListingOfAUserListsTheCorrectTotal stamp: 'A.B. 11/15/2019 19:42:40'!
PASSED!

!testRun: #MarketInterfaceTest #test19DifferentUsersHasDifferentPurchasesList stamp: 'A.B. 11/15/2019 19:42:40'!
PASSED!

!testRun: #MarketInterfaceTest #test20ListingOfAUserListsTheCorrectBooksAndAmounts stamp: 'A.B. 11/15/2019 19:42:40'!
PASSED!

!testRun: #CreditCardTest #test01InvalidAmountOfDigitsRaisesError stamp: 'A.B. 11/15/2019 19:42:44'!
PASSED!

!testRun: #CreditCardTest #test02CanCreateValidCardAndRemebersInformation stamp: 'A.B. 11/15/2019 19:42:44'!
PASSED!

!testRun: #CreditCardTest #test03ExpiredCardIsExpired stamp: 'A.B. 11/15/2019 19:42:44'!
ERROR!

!testRun: #CreditCardTest #test04NonExpiredCardIsNotExpired stamp: 'A.B. 11/15/2019 19:42:44'!
ERROR!

!testRun: #CreditCardTest #test05CardWithEmptyNameIsNotValid stamp: 'A.B. 11/15/2019 19:42:44'!
PASSED!

!classRemoval: #StoreTestObjectsFactory stamp: 'A.B. 11/15/2019 19:42:56'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #SalesBook stamp: 'A.B. 11/15/2019 19:42:57'!
Object subclass: #SalesBook
	instanceVariableNames: 'sales total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Sale stamp: 'A.B. 11/15/2019 19:42:58'!
Object subclass: #Sale
	instanceVariableNames: 'total items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #MarketInterface stamp: 'A.B. 11/15/2019 19:42:59'!
Object subclass: #MarketInterface
	instanceVariableNames: 'currentID cartsByID userPasswords priceList currentTransactionID checkedOutCarts merchantProcessor timeGuru salesBooks cartIdOwners'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCard stamp: 'A.B. 11/15/2019 19:43:00'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'A.B. 11/15/2019 19:43:01'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'A.B. 11/15/2019 19:43:03'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #MarketInterfaceTest stamp: 'A.B. 11/15/2019 19:43:04'!
TestCase subclass: #MarketInterfaceTest
	instanceVariableNames: 'itemFactory mpAction anotherList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCardTest stamp: 'A.B. 11/15/2019 19:43:05'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'A.B. 11/15/2019 19:43:07'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'A.B. 11/15/2019 19:43:08'!
TestCase subclass: #CartTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of /home/alejandra/facultad/isw1/ing1-sandbox/25-TusLibros/interacion3/jonno/TusLibros.st----!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'A.B. 11/15/2019 19:44:23'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'A.B. 11/15/2019 19:44:23'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'A.B. 11/15/2019 19:44:23'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'A.B. 11/15/2019 19:44:23'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'A.B. 11/15/2019 19:44:23'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'A.B. 11/15/2019 19:44:23'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'A.B. 11/15/2019 19:44:23'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'A.B. 11/15/2019 19:44:23'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'A.B. 11/15/2019 19:44:25'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'A.B. 11/15/2019 19:44:25'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'A.B. 11/15/2019 19:44:25'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'A.B. 11/15/2019 19:44:25'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'A.B. 11/15/2019 19:44:25'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'A.B. 11/15/2019 19:44:25'!
PASSED!

!testRun: #MarketInterfaceTest #test01NewlyCreatedCartIsEmpty stamp: 'A.B. 11/15/2019 19:44:29'!
PASSED!

!testRun: #MarketInterfaceTest #test02CreatingCartsReturnDifferentIDs stamp: 'A.B. 11/15/2019 19:44:29'!
PASSED!

!testRun: #MarketInterfaceTest #test03OneBookAddedToCartIsListed stamp: 'A.B. 11/15/2019 19:44:29'!
PASSED!

!testRun: #MarketInterfaceTest #test04MoreThanOneBookAddedAreListedCorrectly stamp: 'A.B. 11/15/2019 19:44:29'!
PASSED!

!testRun: #MarketInterfaceTest #test05DifferentCartsCanBeListedCorrectly stamp: 'A.B. 11/15/2019 19:44:29'!
PASSED!

!testRun: #MarketInterfaceTest #test06ListingNonExistantCartIDRaisesError stamp: 'A.B. 11/15/2019 19:44:29'!
PASSED!

!testRun: #MarketInterfaceTest #test07AddingToInvalidCartIDRaisesError stamp: 'A.B. 11/15/2019 19:44:29'!
PASSED!

!testRun: #MarketInterfaceTest #test08CreatingCartWithIncorrectPasswordRaisesError stamp: 'A.B. 11/15/2019 19:44:29'!
PASSED!

!testRun: #MarketInterfaceTest #test09CreatingCartWithInvalidUserRaisesError stamp: 'A.B. 11/15/2019 19:44:29'!
PASSED!

!testRun: #MarketInterfaceTest #test10CheckoutCartWithInvalidIdRaisesError stamp: 'A.B. 11/15/2019 19:44:29'!
PASSED!

!testRun: #MarketInterfaceTest #test11DifferentValidCheckoutsGiveDIfferentTransactionIds stamp: 'A.B. 11/15/2019 19:44:29'!
PASSED!

!testRun: #MarketInterfaceTest #test12AddingBooksToClosedCartRaisesError stamp: 'A.B. 11/15/2019 19:44:29'!
PASSED!

!testRun: #MarketInterfaceTest #test13CheckingOutTwiceTheSameCartRaisesError stamp: 'A.B. 11/15/2019 19:44:29'!
PASSED!

!testRun: #MarketInterfaceTest #test14CheckingOutCommunicatesCorrectlyWithMP stamp: 'A.B. 11/15/2019 19:44:29'!
PASSED!

!testRun: #MarketInterfaceTest #test15ListingPurchasesOfInvalidUserRaisesError stamp: 'A.B. 11/15/2019 19:44:29'!
PASSED!

!testRun: #MarketInterfaceTest #test16ListingPurchasesWithInvalidPasswordRaisesError stamp: 'A.B. 11/15/2019 19:44:29'!
PASSED!

!testRun: #MarketInterfaceTest #test17ListPurchasesOfNewUserIsEmpty stamp: 'A.B. 11/15/2019 19:44:29'!
PASSED!

!testRun: #MarketInterfaceTest #test18ListingOfAUserListsTheCorrectTotal stamp: 'A.B. 11/15/2019 19:44:29'!
PASSED!

!testRun: #MarketInterfaceTest #test19DifferentUsersHasDifferentPurchasesList stamp: 'A.B. 11/15/2019 19:44:29'!
PASSED!

!testRun: #MarketInterfaceTest #test20ListingOfAUserListsTheCorrectBooksAndAmounts stamp: 'A.B. 11/15/2019 19:44:29'!
PASSED!

!testRun: #MarketInterfaceTest #test01NewlyCreatedCartIsEmpty stamp: 'A.B. 11/15/2019 19:44:33'!
PASSED!

!testRun: #MarketInterfaceTest #test02CreatingCartsReturnDifferentIDs stamp: 'A.B. 11/15/2019 19:44:33'!
PASSED!

!testRun: #MarketInterfaceTest #test03OneBookAddedToCartIsListed stamp: 'A.B. 11/15/2019 19:44:33'!
PASSED!

!testRun: #MarketInterfaceTest #test04MoreThanOneBookAddedAreListedCorrectly stamp: 'A.B. 11/15/2019 19:44:33'!
PASSED!

!testRun: #MarketInterfaceTest #test05DifferentCartsCanBeListedCorrectly stamp: 'A.B. 11/15/2019 19:44:33'!
PASSED!

!testRun: #MarketInterfaceTest #test06ListingNonExistantCartIDRaisesError stamp: 'A.B. 11/15/2019 19:44:33'!
PASSED!

!testRun: #MarketInterfaceTest #test07AddingToInvalidCartIDRaisesError stamp: 'A.B. 11/15/2019 19:44:33'!
PASSED!

!testRun: #MarketInterfaceTest #test08CreatingCartWithIncorrectPasswordRaisesError stamp: 'A.B. 11/15/2019 19:44:33'!
PASSED!

!testRun: #MarketInterfaceTest #test09CreatingCartWithInvalidUserRaisesError stamp: 'A.B. 11/15/2019 19:44:33'!
PASSED!

!testRun: #MarketInterfaceTest #test10CheckoutCartWithInvalidIdRaisesError stamp: 'A.B. 11/15/2019 19:44:33'!
PASSED!

!testRun: #MarketInterfaceTest #test11DifferentValidCheckoutsGiveDIfferentTransactionIds stamp: 'A.B. 11/15/2019 19:44:33'!
PASSED!

!testRun: #MarketInterfaceTest #test12AddingBooksToClosedCartRaisesError stamp: 'A.B. 11/15/2019 19:44:33'!
PASSED!

!testRun: #MarketInterfaceTest #test13CheckingOutTwiceTheSameCartRaisesError stamp: 'A.B. 11/15/2019 19:44:33'!
PASSED!

!testRun: #MarketInterfaceTest #test14CheckingOutCommunicatesCorrectlyWithMP stamp: 'A.B. 11/15/2019 19:44:33'!
PASSED!

!testRun: #MarketInterfaceTest #test15ListingPurchasesOfInvalidUserRaisesError stamp: 'A.B. 11/15/2019 19:44:33'!
PASSED!

!testRun: #MarketInterfaceTest #test16ListingPurchasesWithInvalidPasswordRaisesError stamp: 'A.B. 11/15/2019 19:44:33'!
PASSED!

!testRun: #MarketInterfaceTest #test17ListPurchasesOfNewUserIsEmpty stamp: 'A.B. 11/15/2019 19:44:33'!
PASSED!

!testRun: #MarketInterfaceTest #test18ListingOfAUserListsTheCorrectTotal stamp: 'A.B. 11/15/2019 19:44:33'!
PASSED!

!testRun: #MarketInterfaceTest #test19DifferentUsersHasDifferentPurchasesList stamp: 'A.B. 11/15/2019 19:44:33'!
PASSED!

!testRun: #MarketInterfaceTest #test20ListingOfAUserListsTheCorrectBooksAndAmounts stamp: 'A.B. 11/15/2019 19:44:33'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'A.B. 11/15/2019 19:44:33'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'A.B. 11/15/2019 19:44:33'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'A.B. 11/15/2019 19:44:33'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'A.B. 11/15/2019 19:44:33'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'A.B. 11/15/2019 19:44:33'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'A.B. 11/15/2019 19:44:33'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'A.B. 11/15/2019 19:44:33'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'A.B. 11/15/2019 19:44:33'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'A.B. 11/15/2019 19:44:33'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'A.B. 11/15/2019 19:44:33'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'A.B. 11/15/2019 19:44:33'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'A.B. 11/15/2019 19:44:33'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'A.B. 11/15/2019 19:44:33'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'A.B. 11/15/2019 19:44:33'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'A.B. 11/15/2019 19:44:37'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'A.B. 11/15/2019 19:44:37'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'A.B. 11/15/2019 19:44:37'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'A.B. 11/15/2019 19:44:37'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'A.B. 11/15/2019 19:44:37'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'A.B. 11/15/2019 19:44:37'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'A.B. 11/15/2019 19:44:37'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'A.B. 11/15/2019 19:44:37'!
PASSED!

!testRun: #MarketInterfaceTest #test20ListingOfAUserListsTheCorrectBooksAndAmounts stamp: 'A.B. 11/15/2019 20:04:40'!
PASSED!
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 20:08:26'!
test21

	| market list book cartID |

	market := MarketInterface withUserPasswords: self defaultUserPasswords withPriceList: self defaultPriceList withMP: self withTimeGuru: self.
	                            	
	cartID := market createCartForUser: 'defaultUser' password:'passwordsupersegura'.
	book := itemFactory itemSellByTheStore .
	
	market addToCart: cartID book: book amount: 3.	
	market checkOutCart: cartID withCreditCard: itemFactory notExpiredCreditCard.
	
	list := market listPurchasesOf: 'defaultUser' withPassword: 'passwordsupersegura'.
	
	self assert: 3 equals: (list count: book).
! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 20:11:27' prior: 50784392!
test21

"adding to expired cart raises error"

	| market book cartID |

	market := MarketInterface withUserPasswords: self defaultUserPasswords withPriceList: self defaultPriceList withMP: self withTimeGuru: self.
	                            	
	cartID := market createCartForUser: 'defaultUser' password:'passwordsupersegura'.
	book := itemFactory itemSellByTheStore .
	
	self should: [market addToCart: cartID book: book amount: 3.]  
		 raise: Error -MessageNotUnderstood  
		 withMessageText: market class errorExpiredCart.! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 20:11:56' prior: 50784415!
test21

"adding to expired cart raises error"

	| market book cartID |

	market := MarketInterface withUserPasswords: self defaultUserPasswords withPriceList: self defaultPriceList withMP: self withTimeGuru: self.
	
	
	                            	
	cartID := market createCartForUser: 'defaultUser' password:'passwordsupersegura'.
	book := itemFactory itemSellByTheStore.
	
	
	self should: [market addToCart: cartID book: book amount: 3.]  
		 raise: Error -MessageNotUnderstood  
		 withMessageText: market class errorExpiredCart.! !

DateAndTime year: 2019 month: 11 day: 20 hour: 18 minute: 0.!

|d1 d2|

d1:=DateAndTime year: 2019 month: 11 day: 20 hour: 18 minute: 0. 
d2:=DateAndTime year: 2019 month: 11 day: 20 hour: 18 minute: 30. 

!

d1<d2.!

d1 < d2 .!

 d1 class !

|d1 d2|

d1:=DateAndTime year: 2019 month: 11 day: 20 hour: 18 minute: 0. 
d2:=DateAndTime year: 2019 month: 11 day: 20 hour: 18 minute: 30. 
 !

d1 class 
!

d2 := DateAndTime year: 2019 month: 11 day: 20 hour: 18 minute: 30.  !

d1 := DateAndTime year: 2019 month: 11 day: 20 hour: 18 minute: 0. !

d1 := DateAndTime year: 2019 month: 11 day: 20 hour: 18 minute: 0. !

d2 := DateAndTime year: 2019 month: 11 day: 20 hour: 18 minute: 30.  !

d1 class.!

d1 < d2.!

d2-d1. !

d2-d1 class. !

(d2-d1) class. !

(d2-d1) >30. !

(d2-d1) > tope. !

|tope d1 d2|

d1 := DateAndTime year: 2019 month: 11 day: 20 hour: 18 minute: 0. 
d2 := DateAndTime year: 2019 month: 11 day: 20 hour: 18 minute: 30.  
tope := Duration minutes: 30.
(d2-d1) > tope. !

|tope d1 d2|

d1 := DateAndTime year: 2019 month: 11 day: 20 hour: 18 minute: 0. 
d2 := DateAndTime year: 2019 month: 11 day: 20 hour: 18 minute: 30.  
tope := Duration minutes: 30.
(d2-d1) >= tope.   !

|tope d1 d2 d3|

d1 := DateAndTime year: 2019 month: 11 day: 20 hour: 18 minute: 0. 
d2 := DateAndTime year: 2019 month: 11 day: 20 hour: 18 minute: 30.  
d3 := DateAndTime year: 2020 month: 11 day: 20 hour: 18 minute: 30.  


tope := Duration minutes: 30.
(d3-d1) >= tope.   !

|tope d1 d2 d3|

d1 := DateAndTime year: 2019 month: 11 day: 20 hour: 18 minute: 0. 
d2 := DateAndTime year: 2019 month: 11 day: 20 hour: 18 minute: 30.  
d3 := DateAndTime year: 2020 month: 11 day: 20 hour: 18 minute: 30.  


tope := Duration minutes: 30.
(d1-d3) >= tope.   !

(d1-d3)!

(d1-d3) >= tope. !

|tope d1 d2 d3|

d1 := DateAndTime year: 2019 month: 11 day: 20 hour: 18 minute: 0. 
d2 := DateAndTime year: 2019 month: 11 day: 20 hour: 18 minute: 30.  
d3 := DateAndTime year: 2020 month: 11 day: 20 hour: 18 minute: 30.  


tope := Duration minutes: 30.
(d1-d3)!

|tope d1 d2 d3|

d1 := DateAndTime year: 2019 month: 11 day: 20 hour: 18 minute: 0. 
d2 := DateAndTime year: 2019 month: 11 day: 20 hour: 18 minute: 30.  
d3 := DateAndTime year: 2020 month: 11 day: 20 hour: 18 minute: 30.  


tope := Duration minutes: 30.
(d1-d3) >= tope.   !

|tope d1 d2 d3|

d1 := DateAndTime year: 2019 month: 11 day: 20 hour: 18 minute: 0. 
d2 := DateAndTime year: 2019 month: 11 day: 20 hour: 18 minute: 30.  
d3 := DateAndTime year: 2020 month: 11 day: 20 hour: 18 minute: 30.  


tope := Duration minutes: 30.
(d1-d3)!

!classDefinition: #MarketInterfaceTest category: #TusLibros stamp: 'A.B. 11/15/2019 20:23:07'!
TestCase subclass: #MarketInterfaceTest
	instanceVariableNames: 'itemFactory mpAction anotherList time'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 20:23:04' prior: 50784435!
test21

"adding to expired cart raises error"

	| market book cartID |

	market := MarketInterface withUserPasswords: self defaultUserPasswords withPriceList: self defaultPriceList withMP: self withTimeGuru: self.
	
	time := DateAndTime year: 2019 month: 11 day: 20 hour: 18 minute: 0. 

	                            	
	cartID := market createCartForUser: 'defaultUser' password:'passwordsupersegura'.
	book := itemFactory itemSellByTheStore.
	
	
	self should: [market addToCart: cartID book: book amount: 3.]  
		 raise: Error -MessageNotUnderstood  
		 withMessageText: market class errorExpiredCart.! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 20:23:36' prior: 50784545!
test21

"adding to expired cart raises error"

	| market book cartID |

	market := MarketInterface withUserPasswords: self defaultUserPasswords withPriceList: self defaultPriceList withMP: self withTimeGuru: self.
	
	time := DateAndTime year: 2019 month: 11 day: 20 hour: 18 minute: 0. 
	                            	
	cartID := market createCartForUser: 'defaultUser' password:'passwordsupersegura'.
	book := itemFactory itemSellByTheStore.

	time := DateAndTime year: 2019 month: 11 day: 20 hour: 18 minute: 30. 
	
	self should: [market addToCart: cartID book: book amount: 3.]  
		 raise: Error -MessageNotUnderstood  
		 withMessageText: market class errorExpiredCart.! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 20:23:48'!
time

	^ time.! !

!testRun: #MarketInterfaceTest #test21 stamp: 'A.B. 11/15/2019 20:23:53'!
ERROR!

!testRun: #MarketInterfaceTest #test21 stamp: 'A.B. 11/15/2019 20:23:53'!
ERROR!
!MarketInterface class methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 20:24:48'!
errorExpiredCart

	^ 'The cart has not been used in thirty minutes. Please create a new one.'! !
!MarketInterface class methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 20:25:18' prior: 50784601!
errorExpiredCart

	^ 'The cart has not been used in thirty minutes. Please create a new one.'! !

!testRun: #MarketInterfaceTest #test01NewlyCreatedCartIsEmpty stamp: 'A.B. 11/15/2019 20:25:21'!
PASSED!

!testRun: #MarketInterfaceTest #test02CreatingCartsReturnDifferentIDs stamp: 'A.B. 11/15/2019 20:25:21'!
PASSED!

!testRun: #MarketInterfaceTest #test03OneBookAddedToCartIsListed stamp: 'A.B. 11/15/2019 20:25:21'!
PASSED!

!testRun: #MarketInterfaceTest #test04MoreThanOneBookAddedAreListedCorrectly stamp: 'A.B. 11/15/2019 20:25:21'!
PASSED!

!testRun: #MarketInterfaceTest #test05DifferentCartsCanBeListedCorrectly stamp: 'A.B. 11/15/2019 20:25:21'!
PASSED!

!testRun: #MarketInterfaceTest #test06ListingNonExistantCartIDRaisesError stamp: 'A.B. 11/15/2019 20:25:21'!
PASSED!

!testRun: #MarketInterfaceTest #test07AddingToInvalidCartIDRaisesError stamp: 'A.B. 11/15/2019 20:25:21'!
PASSED!

!testRun: #MarketInterfaceTest #test08CreatingCartWithIncorrectPasswordRaisesError stamp: 'A.B. 11/15/2019 20:25:21'!
PASSED!

!testRun: #MarketInterfaceTest #test09CreatingCartWithInvalidUserRaisesError stamp: 'A.B. 11/15/2019 20:25:21'!
PASSED!

!testRun: #MarketInterfaceTest #test10CheckoutCartWithInvalidIdRaisesError stamp: 'A.B. 11/15/2019 20:25:21'!
PASSED!

!testRun: #MarketInterfaceTest #test11DifferentValidCheckoutsGiveDIfferentTransactionIds stamp: 'A.B. 11/15/2019 20:25:21'!
PASSED!

!testRun: #MarketInterfaceTest #test12AddingBooksToClosedCartRaisesError stamp: 'A.B. 11/15/2019 20:25:21'!
PASSED!

!testRun: #MarketInterfaceTest #test13CheckingOutTwiceTheSameCartRaisesError stamp: 'A.B. 11/15/2019 20:25:21'!
PASSED!

!testRun: #MarketInterfaceTest #test14CheckingOutCommunicatesCorrectlyWithMP stamp: 'A.B. 11/15/2019 20:25:21'!
PASSED!

!testRun: #MarketInterfaceTest #test15ListingPurchasesOfInvalidUserRaisesError stamp: 'A.B. 11/15/2019 20:25:21'!
PASSED!

!testRun: #MarketInterfaceTest #test16ListingPurchasesWithInvalidPasswordRaisesError stamp: 'A.B. 11/15/2019 20:25:21'!
PASSED!

!testRun: #MarketInterfaceTest #test17ListPurchasesOfNewUserIsEmpty stamp: 'A.B. 11/15/2019 20:25:21'!
PASSED!

!testRun: #MarketInterfaceTest #test18ListingOfAUserListsTheCorrectTotal stamp: 'A.B. 11/15/2019 20:25:21'!
PASSED!

!testRun: #MarketInterfaceTest #test19DifferentUsersHasDifferentPurchasesList stamp: 'A.B. 11/15/2019 20:25:21'!
PASSED!

!testRun: #MarketInterfaceTest #test20ListingOfAUserListsTheCorrectBooksAndAmounts stamp: 'A.B. 11/15/2019 20:25:21'!
PASSED!

!testRun: #MarketInterfaceTest #test21 stamp: 'A.B. 11/15/2019 20:25:21'!
FAILURE!

!testRun: #MarketInterfaceTest #test21 stamp: 'A.B. 11/15/2019 20:25:21'!
FAILURE!
!MarketInterface methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 20:26:17' prior: 50783827!
addToCart: aCartID book: aBook amount: anAmount

	| cart nowTime |
	
	nowTime := timeGuru time.
	 
	cart := cartsByID at: aCartID ifAbsent: [self error: self class errorNonExistantCart ] .
	
	(checkedOutCarts includes: aCartID) ifTrue: [ self error: self class errorCheckedOutCart ].
	
	cart add: anAmount of: aBook. ! !

!classDefinition: #MarketInterface category: #TusLibros stamp: 'A.B. 11/15/2019 20:27:49'!
Object subclass: #MarketInterface
	instanceVariableNames: 'currentID cartsByID userPasswords priceList currentTransactionID checkedOutCarts merchantProcessor timeGuru salesBooks cartIdOwners cartCreationTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MarketInterface methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 20:27:44' prior: 50784695!
addToCart: aCartID book: aBook amount: anAmount

	| cart nowTime creationTime |
	
	cart := cartsByID at: aCartID ifAbsent: [self error: self class errorNonExistantCart ] .
	
	nowTime := timeGuru time.
	creationTime := cartCreationTime at: cart.
		
	(checkedOutCarts includes: aCartID) ifTrue: [ self error: self class errorCheckedOutCart ].
	
	cart add: anAmount of: aBook. ! !
!MarketInterface methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 20:28:42' prior: 50783878!
initializeWithPasswords: someUserPasswords withPriceList: aPriceList withMP: aMP withTimeGuru: aTimeGuru   

	currentID := 0.
	cartsByID := Dictionary new.
	currentTransactionID := 0.
	checkedOutCarts := OrderedCollection new.
	userPasswords := someUserPasswords.
	priceList := aPriceList.
	cartIdOwners := Dictionary new.
	merchantProcessor := aMP.
	timeGuru := aTimeGuru.
	salesBooks := Dictionary new.
	userPasswords keys do: [ :aUser |
		salesBooks at: aUser put: SalesBook new.	
	].
	cartCreationTime := Dictionary new.

	! !
!MarketInterface methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 20:29:29' prior: 50783861!
createCartForUser: aUser password: aPassword 
	
	| cart savedPassword |
	
	savedPassword := userPasswords at: aUser ifAbsent: [ ^ self error: self class errorInvalidUser ].   
	(savedPassword = aPassword) ifFalse: [ ^ self error: self class errorInvalidPassword ].
	
	cart := Cart acceptingItemsOf: priceList.
	
	currentID := currentID + 1.
	
	cartsByID at: currentID put: cart.
	cartIdOwners at: currentID put: aUser. 
	cartCreationTime at: currentID put: timeGuru time.
	
	^ currentID.! !
!MarketInterface methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 20:29:41' prior: 50784720!
addToCart: aCartID book: aBook amount: anAmount

	| cart nowTime creationTime |
	
	cart := cartsByID at: aCartID ifAbsent: [self error: self class errorNonExistantCart ] .
	
	nowTime := timeGuru time.
	creationTime := cartCreationTime at: aCartID .
		
	(checkedOutCarts includes: aCartID) ifTrue: [ self error: self class errorCheckedOutCart ].
	
	cart add: anAmount of: aBook. ! !
!MarketInterface methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 20:30:55' prior: 50784774!
addToCart: aCartID book: aBook amount: anAmount

	| cart nowTime creationTime |
	
	cart := cartsByID at: aCartID ifAbsent: [self error: self class errorNonExistantCart ] .
	
	nowTime := timeGuru time.
	creationTime := cartCreationTime at: aCartID .
	
	((nowTime - creationTime ) >= Duration minutes: 30)  ifTrue: [self error: self class errorExpiredCart ].
		
	(checkedOutCarts includes: aCartID) ifTrue: [ self error: self class errorCheckedOutCart ].
	
	cart add: anAmount of: aBook. ! !

!testRun: #MarketInterfaceTest #test01NewlyCreatedCartIsEmpty stamp: 'A.B. 11/15/2019 20:30:58'!
PASSED!

!testRun: #MarketInterfaceTest #test02CreatingCartsReturnDifferentIDs stamp: 'A.B. 11/15/2019 20:30:58'!
PASSED!

!testRun: #MarketInterfaceTest #test03OneBookAddedToCartIsListed stamp: 'A.B. 11/15/2019 20:30:58'!
ERROR!

!testRun: #MarketInterfaceTest #test04MoreThanOneBookAddedAreListedCorrectly stamp: 'A.B. 11/15/2019 20:30:58'!
ERROR!

!testRun: #MarketInterfaceTest #test05DifferentCartsCanBeListedCorrectly stamp: 'A.B. 11/15/2019 20:30:58'!
ERROR!

!testRun: #MarketInterfaceTest #test06ListingNonExistantCartIDRaisesError stamp: 'A.B. 11/15/2019 20:30:58'!
PASSED!

!testRun: #MarketInterfaceTest #test07AddingToInvalidCartIDRaisesError stamp: 'A.B. 11/15/2019 20:30:58'!
PASSED!

!testRun: #MarketInterfaceTest #test08CreatingCartWithIncorrectPasswordRaisesError stamp: 'A.B. 11/15/2019 20:30:58'!
PASSED!

!testRun: #MarketInterfaceTest #test09CreatingCartWithInvalidUserRaisesError stamp: 'A.B. 11/15/2019 20:30:58'!
PASSED!

!testRun: #MarketInterfaceTest #test10CheckoutCartWithInvalidIdRaisesError stamp: 'A.B. 11/15/2019 20:30:58'!
PASSED!

!testRun: #MarketInterfaceTest #test11DifferentValidCheckoutsGiveDIfferentTransactionIds stamp: 'A.B. 11/15/2019 20:30:58'!
ERROR!

!testRun: #MarketInterfaceTest #test12AddingBooksToClosedCartRaisesError stamp: 'A.B. 11/15/2019 20:30:58'!
ERROR!

!testRun: #MarketInterfaceTest #test13CheckingOutTwiceTheSameCartRaisesError stamp: 'A.B. 11/15/2019 20:30:58'!
ERROR!

!testRun: #MarketInterfaceTest #test14CheckingOutCommunicatesCorrectlyWithMP stamp: 'A.B. 11/15/2019 20:30:58'!
ERROR!

!testRun: #MarketInterfaceTest #test15ListingPurchasesOfInvalidUserRaisesError stamp: 'A.B. 11/15/2019 20:30:58'!
PASSED!

!testRun: #MarketInterfaceTest #test16ListingPurchasesWithInvalidPasswordRaisesError stamp: 'A.B. 11/15/2019 20:30:58'!
PASSED!

!testRun: #MarketInterfaceTest #test17ListPurchasesOfNewUserIsEmpty stamp: 'A.B. 11/15/2019 20:30:58'!
PASSED!

!testRun: #MarketInterfaceTest #test18ListingOfAUserListsTheCorrectTotal stamp: 'A.B. 11/15/2019 20:30:58'!
ERROR!

!testRun: #MarketInterfaceTest #test19DifferentUsersHasDifferentPurchasesList stamp: 'A.B. 11/15/2019 20:30:58'!
ERROR!

!testRun: #MarketInterfaceTest #test20ListingOfAUserListsTheCorrectBooksAndAmounts stamp: 'A.B. 11/15/2019 20:30:58'!
ERROR!

!testRun: #MarketInterfaceTest #test21 stamp: 'A.B. 11/15/2019 20:30:58'!
ERROR!

!testRun: #MarketInterfaceTest #test03OneBookAddedToCartIsListed stamp: 'A.B. 11/15/2019 20:32:16'!
ERROR!

!testRun: #MarketInterfaceTest #test03OneBookAddedToCartIsListed stamp: 'A.B. 11/15/2019 20:32:28'!
ERROR!
!MarketInterface methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 20:34:27' prior: 50784755!
createCartForUser: aUser password: aPassword 
	
	| cart savedPassword |
	self halt.
	savedPassword := userPasswords at: aUser ifAbsent: [ ^ self error: self class errorInvalidUser ].   
	(savedPassword = aPassword) ifFalse: [ ^ self error: self class errorInvalidPassword ].
	
	cart := Cart acceptingItemsOf: priceList.
	
	currentID := currentID + 1.
	
	cartsByID at: currentID put: cart.
	cartIdOwners at: currentID put: aUser. 
	cartCreationTime at: currentID put: timeGuru time.
	
	^ currentID.! !

!testRun: #MarketInterfaceTest #test06ListingNonExistantCartIDRaisesError stamp: 'A.B. 11/15/2019 20:34:30'!
PASSED!

!testRun: #MarketInterfaceTest #test07AddingToInvalidCartIDRaisesError stamp: 'A.B. 11/15/2019 20:34:30'!
PASSED!

!testRun: #MarketInterfaceTest #test10CheckoutCartWithInvalidIdRaisesError stamp: 'A.B. 11/15/2019 20:34:30'!
PASSED!

!testRun: #MarketInterfaceTest #test15ListingPurchasesOfInvalidUserRaisesError stamp: 'A.B. 11/15/2019 20:34:30'!
PASSED!

!testRun: #MarketInterfaceTest #test16ListingPurchasesWithInvalidPasswordRaisesError stamp: 'A.B. 11/15/2019 20:34:30'!
PASSED!

!testRun: #MarketInterfaceTest #test17ListPurchasesOfNewUserIsEmpty stamp: 'A.B. 11/15/2019 20:34:30'!
PASSED!
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 20:39:25' prior: 50783147!
setUp

	mpAction := [ :anAmount :aCreditCard | ].
	itemFactory := StoreTestObjectsFactory new.
	time := DateAndTime year: 2019 month: 11 day: 20 hour: 15 minute: 30. ! !

!testRun: #MarketInterfaceTest #test06ListingNonExistantCartIDRaisesError stamp: 'A.B. 11/15/2019 20:39:32'!
PASSED!

!testRun: #MarketInterfaceTest #test07AddingToInvalidCartIDRaisesError stamp: 'A.B. 11/15/2019 20:39:32'!
PASSED!

!testRun: #MarketInterfaceTest #test10CheckoutCartWithInvalidIdRaisesError stamp: 'A.B. 11/15/2019 20:39:32'!
PASSED!

!testRun: #MarketInterfaceTest #test15ListingPurchasesOfInvalidUserRaisesError stamp: 'A.B. 11/15/2019 20:39:32'!
PASSED!

!testRun: #MarketInterfaceTest #test16ListingPurchasesWithInvalidPasswordRaisesError stamp: 'A.B. 11/15/2019 20:39:32'!
PASSED!

!testRun: #MarketInterfaceTest #test17ListPurchasesOfNewUserIsEmpty stamp: 'A.B. 11/15/2019 20:39:32'!
PASSED!

!testRun: #MarketInterfaceTest #test01NewlyCreatedCartIsEmpty stamp: 'A.B. 11/15/2019 20:40:30'!
PASSED!
!MarketInterface methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 20:40:42' prior: 50784893!
createCartForUser: aUser password: aPassword 
	
	| cart savedPassword |

	savedPassword := userPasswords at: aUser ifAbsent: [ ^ self error: self class errorInvalidUser ].   
	(savedPassword = aPassword) ifFalse: [ ^ self error: self class errorInvalidPassword ].
	
	cart := Cart acceptingItemsOf: priceList.
	
	currentID := currentID + 1.
	
	cartsByID at: currentID put: cart.
	cartIdOwners at: currentID put: aUser. 
	cartCreationTime at: currentID put: timeGuru time.
	
	^ currentID.! !

!testRun: #MarketInterfaceTest #test01NewlyCreatedCartIsEmpty stamp: 'A.B. 11/15/2019 20:40:44'!
PASSED!

!testRun: #MarketInterfaceTest #test02CreatingCartsReturnDifferentIDs stamp: 'A.B. 11/15/2019 20:40:44'!
PASSED!

!testRun: #MarketInterfaceTest #test03OneBookAddedToCartIsListed stamp: 'A.B. 11/15/2019 20:40:44'!
ERROR!

!testRun: #MarketInterfaceTest #test04MoreThanOneBookAddedAreListedCorrectly stamp: 'A.B. 11/15/2019 20:40:44'!
ERROR!

!testRun: #MarketInterfaceTest #test05DifferentCartsCanBeListedCorrectly stamp: 'A.B. 11/15/2019 20:40:44'!
ERROR!

!testRun: #MarketInterfaceTest #test06ListingNonExistantCartIDRaisesError stamp: 'A.B. 11/15/2019 20:40:44'!
PASSED!

!testRun: #MarketInterfaceTest #test07AddingToInvalidCartIDRaisesError stamp: 'A.B. 11/15/2019 20:40:44'!
PASSED!

!testRun: #MarketInterfaceTest #test08CreatingCartWithIncorrectPasswordRaisesError stamp: 'A.B. 11/15/2019 20:40:44'!
PASSED!

!testRun: #MarketInterfaceTest #test09CreatingCartWithInvalidUserRaisesError stamp: 'A.B. 11/15/2019 20:40:44'!
PASSED!

!testRun: #MarketInterfaceTest #test10CheckoutCartWithInvalidIdRaisesError stamp: 'A.B. 11/15/2019 20:40:44'!
PASSED!

!testRun: #MarketInterfaceTest #test11DifferentValidCheckoutsGiveDIfferentTransactionIds stamp: 'A.B. 11/15/2019 20:40:44'!
ERROR!

!testRun: #MarketInterfaceTest #test12AddingBooksToClosedCartRaisesError stamp: 'A.B. 11/15/2019 20:40:44'!
ERROR!

!testRun: #MarketInterfaceTest #test13CheckingOutTwiceTheSameCartRaisesError stamp: 'A.B. 11/15/2019 20:40:44'!
ERROR!

!testRun: #MarketInterfaceTest #test14CheckingOutCommunicatesCorrectlyWithMP stamp: 'A.B. 11/15/2019 20:40:44'!
ERROR!

!testRun: #MarketInterfaceTest #test15ListingPurchasesOfInvalidUserRaisesError stamp: 'A.B. 11/15/2019 20:40:44'!
PASSED!

!testRun: #MarketInterfaceTest #test16ListingPurchasesWithInvalidPasswordRaisesError stamp: 'A.B. 11/15/2019 20:40:44'!
PASSED!

!testRun: #MarketInterfaceTest #test17ListPurchasesOfNewUserIsEmpty stamp: 'A.B. 11/15/2019 20:40:44'!
PASSED!

!testRun: #MarketInterfaceTest #test18ListingOfAUserListsTheCorrectTotal stamp: 'A.B. 11/15/2019 20:40:44'!
ERROR!

!testRun: #MarketInterfaceTest #test19DifferentUsersHasDifferentPurchasesList stamp: 'A.B. 11/15/2019 20:40:44'!
ERROR!

!testRun: #MarketInterfaceTest #test20ListingOfAUserListsTheCorrectBooksAndAmounts stamp: 'A.B. 11/15/2019 20:40:44'!
ERROR!

!testRun: #MarketInterfaceTest #test21 stamp: 'A.B. 11/15/2019 20:40:44'!
ERROR!

!testRun: #MarketInterfaceTest #test03OneBookAddedToCartIsListed stamp: 'A.B. 11/15/2019 20:40:54'!
ERROR!
!MarketInterface methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 20:42:53' prior: 50784790!
addToCart: aCartID book: aBook amount: anAmount

	| cart nowTime creationTime |
	
	cart := cartsByID at: aCartID ifAbsent: [self error: self class errorNonExistantCart ] .
	
	nowTime := timeGuru time.
	creationTime := cartCreationTime at: aCartID .
	
	((nowTime - creationTime ) >= (Duration minutes: 30))  ifTrue: [self error: self class errorExpiredCart ].
		
	(checkedOutCarts includes: aCartID) ifTrue: [ self error: self class errorCheckedOutCart ].
	
	cart add: anAmount of: aBook. ! !

!testRun: #MarketInterfaceTest #test01NewlyCreatedCartIsEmpty stamp: 'A.B. 11/15/2019 20:42:54'!
PASSED!

!testRun: #MarketInterfaceTest #test02CreatingCartsReturnDifferentIDs stamp: 'A.B. 11/15/2019 20:42:54'!
PASSED!

!testRun: #MarketInterfaceTest #test03OneBookAddedToCartIsListed stamp: 'A.B. 11/15/2019 20:42:54'!
PASSED!

!testRun: #MarketInterfaceTest #test04MoreThanOneBookAddedAreListedCorrectly stamp: 'A.B. 11/15/2019 20:42:54'!
PASSED!

!testRun: #MarketInterfaceTest #test05DifferentCartsCanBeListedCorrectly stamp: 'A.B. 11/15/2019 20:42:54'!
PASSED!

!testRun: #MarketInterfaceTest #test06ListingNonExistantCartIDRaisesError stamp: 'A.B. 11/15/2019 20:42:54'!
PASSED!

!testRun: #MarketInterfaceTest #test07AddingToInvalidCartIDRaisesError stamp: 'A.B. 11/15/2019 20:42:54'!
PASSED!

!testRun: #MarketInterfaceTest #test08CreatingCartWithIncorrectPasswordRaisesError stamp: 'A.B. 11/15/2019 20:42:54'!
PASSED!

!testRun: #MarketInterfaceTest #test09CreatingCartWithInvalidUserRaisesError stamp: 'A.B. 11/15/2019 20:42:54'!
PASSED!

!testRun: #MarketInterfaceTest #test10CheckoutCartWithInvalidIdRaisesError stamp: 'A.B. 11/15/2019 20:42:54'!
PASSED!

!testRun: #MarketInterfaceTest #test11DifferentValidCheckoutsGiveDIfferentTransactionIds stamp: 'A.B. 11/15/2019 20:42:54'!
PASSED!

!testRun: #MarketInterfaceTest #test12AddingBooksToClosedCartRaisesError stamp: 'A.B. 11/15/2019 20:42:54'!
PASSED!

!testRun: #MarketInterfaceTest #test13CheckingOutTwiceTheSameCartRaisesError stamp: 'A.B. 11/15/2019 20:42:54'!
PASSED!

!testRun: #MarketInterfaceTest #test14CheckingOutCommunicatesCorrectlyWithMP stamp: 'A.B. 11/15/2019 20:42:54'!
PASSED!

!testRun: #MarketInterfaceTest #test15ListingPurchasesOfInvalidUserRaisesError stamp: 'A.B. 11/15/2019 20:42:54'!
PASSED!

!testRun: #MarketInterfaceTest #test16ListingPurchasesWithInvalidPasswordRaisesError stamp: 'A.B. 11/15/2019 20:42:54'!
PASSED!

!testRun: #MarketInterfaceTest #test17ListPurchasesOfNewUserIsEmpty stamp: 'A.B. 11/15/2019 20:42:54'!
PASSED!

!testRun: #MarketInterfaceTest #test18ListingOfAUserListsTheCorrectTotal stamp: 'A.B. 11/15/2019 20:42:54'!
PASSED!

!testRun: #MarketInterfaceTest #test19DifferentUsersHasDifferentPurchasesList stamp: 'A.B. 11/15/2019 20:42:54'!
PASSED!

!testRun: #MarketInterfaceTest #test20ListingOfAUserListsTheCorrectBooksAndAmounts stamp: 'A.B. 11/15/2019 20:42:54'!
PASSED!

!testRun: #MarketInterfaceTest #test21 stamp: 'A.B. 11/15/2019 20:42:54'!
PASSED!

!testRun: #MarketInterfaceTest #test01NewlyCreatedCartIsEmpty stamp: 'A.B. 11/15/2019 20:43:55'!
PASSED!

!testRun: #MarketInterfaceTest #test02CreatingCartsReturnDifferentIDs stamp: 'A.B. 11/15/2019 20:43:55'!
PASSED!

!testRun: #MarketInterfaceTest #test03OneBookAddedToCartIsListed stamp: 'A.B. 11/15/2019 20:43:55'!
PASSED!

!testRun: #MarketInterfaceTest #test04MoreThanOneBookAddedAreListedCorrectly stamp: 'A.B. 11/15/2019 20:43:55'!
PASSED!

!testRun: #MarketInterfaceTest #test05DifferentCartsCanBeListedCorrectly stamp: 'A.B. 11/15/2019 20:43:55'!
PASSED!

!testRun: #MarketInterfaceTest #test06ListingNonExistantCartIDRaisesError stamp: 'A.B. 11/15/2019 20:43:55'!
PASSED!

!testRun: #MarketInterfaceTest #test07AddingToInvalidCartIDRaisesError stamp: 'A.B. 11/15/2019 20:43:55'!
PASSED!

!testRun: #MarketInterfaceTest #test08CreatingCartWithIncorrectPasswordRaisesError stamp: 'A.B. 11/15/2019 20:43:55'!
PASSED!

!testRun: #MarketInterfaceTest #test09CreatingCartWithInvalidUserRaisesError stamp: 'A.B. 11/15/2019 20:43:55'!
PASSED!

!testRun: #MarketInterfaceTest #test10CheckoutCartWithInvalidIdRaisesError stamp: 'A.B. 11/15/2019 20:43:55'!
PASSED!

!testRun: #MarketInterfaceTest #test11DifferentValidCheckoutsGiveDIfferentTransactionIds stamp: 'A.B. 11/15/2019 20:43:55'!
PASSED!

!testRun: #MarketInterfaceTest #test12AddingBooksToClosedCartRaisesError stamp: 'A.B. 11/15/2019 20:43:55'!
PASSED!

!testRun: #MarketInterfaceTest #test13CheckingOutTwiceTheSameCartRaisesError stamp: 'A.B. 11/15/2019 20:43:55'!
PASSED!

!testRun: #MarketInterfaceTest #test14CheckingOutCommunicatesCorrectlyWithMP stamp: 'A.B. 11/15/2019 20:43:55'!
PASSED!

!testRun: #MarketInterfaceTest #test15ListingPurchasesOfInvalidUserRaisesError stamp: 'A.B. 11/15/2019 20:43:55'!
PASSED!

!testRun: #MarketInterfaceTest #test16ListingPurchasesWithInvalidPasswordRaisesError stamp: 'A.B. 11/15/2019 20:43:55'!
PASSED!

!testRun: #MarketInterfaceTest #test17ListPurchasesOfNewUserIsEmpty stamp: 'A.B. 11/15/2019 20:43:55'!
PASSED!

!testRun: #MarketInterfaceTest #test18ListingOfAUserListsTheCorrectTotal stamp: 'A.B. 11/15/2019 20:43:55'!
PASSED!

!testRun: #MarketInterfaceTest #test19DifferentUsersHasDifferentPurchasesList stamp: 'A.B. 11/15/2019 20:43:55'!
PASSED!

!testRun: #MarketInterfaceTest #test20ListingOfAUserListsTheCorrectBooksAndAmounts stamp: 'A.B. 11/15/2019 20:43:55'!
PASSED!

!testRun: #MarketInterfaceTest #test21 stamp: 'A.B. 11/15/2019 20:43:55'!
PASSED!

!testRun: #MarketInterfaceTest #test03OneBookAddedToCartIsListed stamp: 'A.B. 11/15/2019 20:44:00'!
PASSED!

!testRun: #MarketInterfaceTest #test01NewlyCreatedCartIsEmpty stamp: 'A.B. 11/15/2019 20:44:03'!
PASSED!

!testRun: #MarketInterfaceTest #test02CreatingCartsReturnDifferentIDs stamp: 'A.B. 11/15/2019 20:44:03'!
PASSED!

!testRun: #MarketInterfaceTest #test03OneBookAddedToCartIsListed stamp: 'A.B. 11/15/2019 20:44:03'!
PASSED!

!testRun: #MarketInterfaceTest #test04MoreThanOneBookAddedAreListedCorrectly stamp: 'A.B. 11/15/2019 20:44:03'!
PASSED!

!testRun: #MarketInterfaceTest #test05DifferentCartsCanBeListedCorrectly stamp: 'A.B. 11/15/2019 20:44:03'!
PASSED!

!testRun: #MarketInterfaceTest #test06ListingNonExistantCartIDRaisesError stamp: 'A.B. 11/15/2019 20:44:03'!
PASSED!

!testRun: #MarketInterfaceTest #test07AddingToInvalidCartIDRaisesError stamp: 'A.B. 11/15/2019 20:44:03'!
PASSED!

!testRun: #MarketInterfaceTest #test08CreatingCartWithIncorrectPasswordRaisesError stamp: 'A.B. 11/15/2019 20:44:03'!
PASSED!

!testRun: #MarketInterfaceTest #test09CreatingCartWithInvalidUserRaisesError stamp: 'A.B. 11/15/2019 20:44:03'!
PASSED!

!testRun: #MarketInterfaceTest #test10CheckoutCartWithInvalidIdRaisesError stamp: 'A.B. 11/15/2019 20:44:03'!
PASSED!

!testRun: #MarketInterfaceTest #test11DifferentValidCheckoutsGiveDIfferentTransactionIds stamp: 'A.B. 11/15/2019 20:44:03'!
PASSED!

!testRun: #MarketInterfaceTest #test12AddingBooksToClosedCartRaisesError stamp: 'A.B. 11/15/2019 20:44:03'!
PASSED!

!testRun: #MarketInterfaceTest #test13CheckingOutTwiceTheSameCartRaisesError stamp: 'A.B. 11/15/2019 20:44:03'!
PASSED!

!testRun: #MarketInterfaceTest #test14CheckingOutCommunicatesCorrectlyWithMP stamp: 'A.B. 11/15/2019 20:44:03'!
PASSED!

!testRun: #MarketInterfaceTest #test15ListingPurchasesOfInvalidUserRaisesError stamp: 'A.B. 11/15/2019 20:44:03'!
PASSED!

!testRun: #MarketInterfaceTest #test16ListingPurchasesWithInvalidPasswordRaisesError stamp: 'A.B. 11/15/2019 20:44:03'!
PASSED!

!testRun: #MarketInterfaceTest #test17ListPurchasesOfNewUserIsEmpty stamp: 'A.B. 11/15/2019 20:44:03'!
PASSED!

!testRun: #MarketInterfaceTest #test18ListingOfAUserListsTheCorrectTotal stamp: 'A.B. 11/15/2019 20:44:03'!
PASSED!

!testRun: #MarketInterfaceTest #test19DifferentUsersHasDifferentPurchasesList stamp: 'A.B. 11/15/2019 20:44:03'!
PASSED!

!testRun: #MarketInterfaceTest #test20ListingOfAUserListsTheCorrectBooksAndAmounts stamp: 'A.B. 11/15/2019 20:44:03'!
PASSED!

!testRun: #MarketInterfaceTest #test21 stamp: 'A.B. 11/15/2019 20:44:03'!
PASSED!
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 20:44:24'!
test21AddingBookToExpiredCartRaisesError

"adding to expired cart raises error"

	| market book cartID |

	market := MarketInterface withUserPasswords: self defaultUserPasswords withPriceList: self defaultPriceList withMP: self withTimeGuru: self.
	
	time := DateAndTime year: 2019 month: 11 day: 20 hour: 18 minute: 0. 
	                            	
	cartID := market createCartForUser: 'defaultUser' password:'passwordsupersegura'.
	book := itemFactory itemSellByTheStore.

	time := DateAndTime year: 2019 month: 11 day: 20 hour: 18 minute: 30. 
	
	self should: [market addToCart: cartID book: book amount: 3.]  
		 raise: Error -MessageNotUnderstood  
		 withMessageText: market class errorExpiredCart.! !

!methodRemoval: MarketInterfaceTest #test21 stamp: 'A.B. 11/15/2019 20:44:24'!
test21

"adding to expired cart raises error"

	| market book cartID |

	market := MarketInterface withUserPasswords: self defaultUserPasswords withPriceList: self defaultPriceList withMP: self withTimeGuru: self.
	
	time := DateAndTime year: 2019 month: 11 day: 20 hour: 18 minute: 0. 
	                            	
	cartID := market createCartForUser: 'defaultUser' password:'passwordsupersegura'.
	book := itemFactory itemSellByTheStore.

	time := DateAndTime year: 2019 month: 11 day: 20 hour: 18 minute: 30. 
	
	self should: [market addToCart: cartID book: book amount: 3.]  
		 raise: Error -MessageNotUnderstood  
		 withMessageText: market class errorExpiredCart.!
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 20:45:09'!
test22ListingExpiredCartRaisesError

	| market cartID |

	market := MarketInterface withUserPasswords: self defaultUserPasswords withPriceList: self defaultPriceList withMP: self withTimeGuru: self.
	
	time := DateAndTime year: 2019 month: 11 day: 20 hour: 18 minute: 0. 
	                            	
	cartID := market createCartForUser: 'defaultUser' password:'passwordsupersegura'.
	
	time := DateAndTime year: 2019 month: 11 day: 20 hour: 18 minute: 30. 
	
	self should: [market listCart: cartID .]  
		 raise: Error -MessageNotUnderstood  
		 withMessageText: market class errorExpiredCart.! !

!testRun: #MarketInterfaceTest #test22ListingExpiredCartRaisesError stamp: 'A.B. 11/15/2019 20:45:12'!
FAILURE!
!MarketInterface methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 20:45:49' prior: 50783897!
listCart: aCartID 

	| creationTime nowTime |
	nowTime := timeGuru time.
	creationTime := cartCreationTime at: aCartID .
	
	((nowTime - creationTime ) >= (Duration minutes: 30))  ifTrue: [self error: self class errorExpiredCart ].


	^ (cartsByID at: aCartID ifAbsent: [self error: self class errorNonExistantCart ] ) listItems.! !

!testRun: #MarketInterfaceTest #test01NewlyCreatedCartIsEmpty stamp: 'A.B. 11/15/2019 20:45:56'!
PASSED!

!testRun: #MarketInterfaceTest #test02CreatingCartsReturnDifferentIDs stamp: 'A.B. 11/15/2019 20:45:56'!
PASSED!

!testRun: #MarketInterfaceTest #test03OneBookAddedToCartIsListed stamp: 'A.B. 11/15/2019 20:45:56'!
PASSED!

!testRun: #MarketInterfaceTest #test04MoreThanOneBookAddedAreListedCorrectly stamp: 'A.B. 11/15/2019 20:45:56'!
PASSED!

!testRun: #MarketInterfaceTest #test05DifferentCartsCanBeListedCorrectly stamp: 'A.B. 11/15/2019 20:45:56'!
PASSED!

!testRun: #MarketInterfaceTest #test06ListingNonExistantCartIDRaisesError stamp: 'A.B. 11/15/2019 20:45:56'!
FAILURE!

!testRun: #MarketInterfaceTest #test07AddingToInvalidCartIDRaisesError stamp: 'A.B. 11/15/2019 20:45:56'!
PASSED!

!testRun: #MarketInterfaceTest #test08CreatingCartWithIncorrectPasswordRaisesError stamp: 'A.B. 11/15/2019 20:45:56'!
PASSED!

!testRun: #MarketInterfaceTest #test09CreatingCartWithInvalidUserRaisesError stamp: 'A.B. 11/15/2019 20:45:56'!
PASSED!

!testRun: #MarketInterfaceTest #test10CheckoutCartWithInvalidIdRaisesError stamp: 'A.B. 11/15/2019 20:45:56'!
PASSED!

!testRun: #MarketInterfaceTest #test11DifferentValidCheckoutsGiveDIfferentTransactionIds stamp: 'A.B. 11/15/2019 20:45:56'!
PASSED!

!testRun: #MarketInterfaceTest #test12AddingBooksToClosedCartRaisesError stamp: 'A.B. 11/15/2019 20:45:56'!
PASSED!

!testRun: #MarketInterfaceTest #test13CheckingOutTwiceTheSameCartRaisesError stamp: 'A.B. 11/15/2019 20:45:56'!
PASSED!

!testRun: #MarketInterfaceTest #test14CheckingOutCommunicatesCorrectlyWithMP stamp: 'A.B. 11/15/2019 20:45:56'!
PASSED!

!testRun: #MarketInterfaceTest #test15ListingPurchasesOfInvalidUserRaisesError stamp: 'A.B. 11/15/2019 20:45:56'!
PASSED!

!testRun: #MarketInterfaceTest #test16ListingPurchasesWithInvalidPasswordRaisesError stamp: 'A.B. 11/15/2019 20:45:56'!
PASSED!

!testRun: #MarketInterfaceTest #test17ListPurchasesOfNewUserIsEmpty stamp: 'A.B. 11/15/2019 20:45:56'!
PASSED!

!testRun: #MarketInterfaceTest #test18ListingOfAUserListsTheCorrectTotal stamp: 'A.B. 11/15/2019 20:45:56'!
PASSED!

!testRun: #MarketInterfaceTest #test19DifferentUsersHasDifferentPurchasesList stamp: 'A.B. 11/15/2019 20:45:56'!
PASSED!

!testRun: #MarketInterfaceTest #test20ListingOfAUserListsTheCorrectBooksAndAmounts stamp: 'A.B. 11/15/2019 20:45:56'!
PASSED!

!testRun: #MarketInterfaceTest #test21AddingBookToExpiredCartRaisesError stamp: 'A.B. 11/15/2019 20:45:56'!
PASSED!

!testRun: #MarketInterfaceTest #test22ListingExpiredCartRaisesError stamp: 'A.B. 11/15/2019 20:45:56'!
PASSED!

!testRun: #MarketInterfaceTest #test06ListingNonExistantCartIDRaisesError stamp: 'A.B. 11/15/2019 20:45:56'!
FAILURE!
!MarketInterface methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 20:47:52' prior: 50785398!
listCart: aCartID 

	| creationTime nowTime cart |
	
	cart := cartsByID at: aCartID ifAbsent: [self error: self class errorNonExistantCart ].
	
	nowTime := timeGuru time.
	creationTime := cartCreationTime at: aCartID .
	
	((nowTime - creationTime ) >= (Duration minutes: 30))  ifTrue: [self error: self class errorExpiredCart ].


	^ cart listItems .! !

!testRun: #MarketInterfaceTest #test01NewlyCreatedCartIsEmpty stamp: 'A.B. 11/15/2019 20:47:54'!
PASSED!

!testRun: #MarketInterfaceTest #test02CreatingCartsReturnDifferentIDs stamp: 'A.B. 11/15/2019 20:47:54'!
PASSED!

!testRun: #MarketInterfaceTest #test03OneBookAddedToCartIsListed stamp: 'A.B. 11/15/2019 20:47:54'!
PASSED!

!testRun: #MarketInterfaceTest #test04MoreThanOneBookAddedAreListedCorrectly stamp: 'A.B. 11/15/2019 20:47:54'!
PASSED!

!testRun: #MarketInterfaceTest #test05DifferentCartsCanBeListedCorrectly stamp: 'A.B. 11/15/2019 20:47:54'!
PASSED!

!testRun: #MarketInterfaceTest #test06ListingNonExistantCartIDRaisesError stamp: 'A.B. 11/15/2019 20:47:54'!
PASSED!

!testRun: #MarketInterfaceTest #test07AddingToInvalidCartIDRaisesError stamp: 'A.B. 11/15/2019 20:47:54'!
PASSED!

!testRun: #MarketInterfaceTest #test08CreatingCartWithIncorrectPasswordRaisesError stamp: 'A.B. 11/15/2019 20:47:54'!
PASSED!

!testRun: #MarketInterfaceTest #test09CreatingCartWithInvalidUserRaisesError stamp: 'A.B. 11/15/2019 20:47:54'!
PASSED!

!testRun: #MarketInterfaceTest #test10CheckoutCartWithInvalidIdRaisesError stamp: 'A.B. 11/15/2019 20:47:54'!
PASSED!

!testRun: #MarketInterfaceTest #test11DifferentValidCheckoutsGiveDIfferentTransactionIds stamp: 'A.B. 11/15/2019 20:47:54'!
PASSED!

!testRun: #MarketInterfaceTest #test12AddingBooksToClosedCartRaisesError stamp: 'A.B. 11/15/2019 20:47:54'!
PASSED!

!testRun: #MarketInterfaceTest #test13CheckingOutTwiceTheSameCartRaisesError stamp: 'A.B. 11/15/2019 20:47:54'!
PASSED!

!testRun: #MarketInterfaceTest #test14CheckingOutCommunicatesCorrectlyWithMP stamp: 'A.B. 11/15/2019 20:47:54'!
PASSED!

!testRun: #MarketInterfaceTest #test15ListingPurchasesOfInvalidUserRaisesError stamp: 'A.B. 11/15/2019 20:47:54'!
PASSED!

!testRun: #MarketInterfaceTest #test16ListingPurchasesWithInvalidPasswordRaisesError stamp: 'A.B. 11/15/2019 20:47:54'!
PASSED!

!testRun: #MarketInterfaceTest #test17ListPurchasesOfNewUserIsEmpty stamp: 'A.B. 11/15/2019 20:47:54'!
PASSED!

!testRun: #MarketInterfaceTest #test18ListingOfAUserListsTheCorrectTotal stamp: 'A.B. 11/15/2019 20:47:54'!
PASSED!

!testRun: #MarketInterfaceTest #test19DifferentUsersHasDifferentPurchasesList stamp: 'A.B. 11/15/2019 20:47:54'!
PASSED!

!testRun: #MarketInterfaceTest #test20ListingOfAUserListsTheCorrectBooksAndAmounts stamp: 'A.B. 11/15/2019 20:47:54'!
PASSED!

!testRun: #MarketInterfaceTest #test21AddingBookToExpiredCartRaisesError stamp: 'A.B. 11/15/2019 20:47:54'!
PASSED!

!testRun: #MarketInterfaceTest #test22ListingExpiredCartRaisesError stamp: 'A.B. 11/15/2019 20:47:54'!
PASSED!
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 20:48:57' prior: 50785323!
test21AddingBookToExpiredCartRaisesError

	| market book cartID |

	market := MarketInterface withUserPasswords: self defaultUserPasswords withPriceList: self defaultPriceList withMP: self withTimeGuru: self.
	
	time := DateAndTime year: 2019 month: 11 day: 20 hour: 18 minute: 0. 
	                            	
	cartID := market createCartForUser: 'defaultUser' password:'passwordsupersegura'.
	book := itemFactory itemSellByTheStore.

	time := DateAndTime year: 2019 month: 11 day: 20 hour: 18 minute: 30. 
	
	self should: [market addToCart: cartID book: book amount: 3.]  
		 raise: Error -MessageNotUnderstood  
		 withMessageText: market class errorExpiredCart.! !

|tope d1 d2 d3|

d1 := DateAndTime year: 2019 month: 11 day: 20 hour: 18 minute: 0. 
d2 := DateAndTime year: 2019 month: 11 day: 20 hour: 18 minute: 30.  
d3 := DateAndTime year: 2020 month: 11 day: 20 hour: 18 minute: 30.  


tope := Duration minutes: 30.
(d1-d3) >= tope. 

d1+tope .!

d2 := DateAndTime year: 2019 month: 11 day: 20 hour: 18 minute: 30.  
!
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 21:04:12'!
test23

	| market cartID |

	market := MarketInterface withUserPasswords: self defaultUserPasswords withPriceList: self defaultPriceList withMP: self withTimeGuru: self.
	
	time := DateAndTime year: 2019 month: 11 day: 20 hour: 18 minute: 0. 
	                            	
	cartID := market createCartForUser: 'defaultUser' password:'passwordsupersegura'.
	market addToCart: cartID book: itemFactory itemSellByTheStore amount: 1.
	
	time := DateAndTime year: 2019 month: 11 day: 20 hour: 18 minute: 30. 
	
	self should: [market checkOutCart: cartID withCreditCard: itemFactory notExpiredCreditCard.]  
		 raise: Error -MessageNotUnderstood  
		 withMessageText: market class errorExpiredCart.! !

!testRun: #MarketInterfaceTest #test23 stamp: 'A.B. 11/15/2019 21:04:15'!
FAILURE!
!MarketInterface methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 21:04:53' prior: 50783839!
checkOutCart: aCartID withCreditCard: aCreditCard

	| aCart cashier cartOwner creationTime nowTime |
	
	aCart := cartsByID at: aCartID ifAbsent: [ self error: self class errorNonExistantCart. ].
	
	(checkedOutCarts includes: aCartID) ifTrue: [ self error: self class errorCheckedOutCart ].
	
	nowTime := timeGuru time.
	creationTime := cartCreationTime at: aCartID .
	
	((nowTime - creationTime ) >= (Duration minutes: 30))  ifTrue: [self error: self class errorExpiredCart ].
	
	
	cartOwner := cartIdOwners at: aCartID.
	
	cashier := Cashier 
		toCheckout: aCart 
		charging: aCreditCard
		throught: merchantProcessor
		on: timeGuru today
		registeringOn: (salesBooks at: cartOwner).
	
	cashier checkOut.
	
	checkedOutCarts add: aCartID.
	
	currentTransactionID := currentTransactionID + 1.
	^ currentTransactionID.

	
	

! !

!testRun: #MarketInterfaceTest #test01NewlyCreatedCartIsEmpty stamp: 'A.B. 11/15/2019 21:04:59'!
PASSED!

!testRun: #MarketInterfaceTest #test02CreatingCartsReturnDifferentIDs stamp: 'A.B. 11/15/2019 21:04:59'!
PASSED!

!testRun: #MarketInterfaceTest #test03OneBookAddedToCartIsListed stamp: 'A.B. 11/15/2019 21:04:59'!
PASSED!

!testRun: #MarketInterfaceTest #test04MoreThanOneBookAddedAreListedCorrectly stamp: 'A.B. 11/15/2019 21:04:59'!
PASSED!

!testRun: #MarketInterfaceTest #test05DifferentCartsCanBeListedCorrectly stamp: 'A.B. 11/15/2019 21:04:59'!
PASSED!

!testRun: #MarketInterfaceTest #test06ListingNonExistantCartIDRaisesError stamp: 'A.B. 11/15/2019 21:04:59'!
PASSED!

!testRun: #MarketInterfaceTest #test07AddingToInvalidCartIDRaisesError stamp: 'A.B. 11/15/2019 21:04:59'!
PASSED!

!testRun: #MarketInterfaceTest #test08CreatingCartWithIncorrectPasswordRaisesError stamp: 'A.B. 11/15/2019 21:04:59'!
PASSED!

!testRun: #MarketInterfaceTest #test09CreatingCartWithInvalidUserRaisesError stamp: 'A.B. 11/15/2019 21:04:59'!
PASSED!

!testRun: #MarketInterfaceTest #test10CheckoutCartWithInvalidIdRaisesError stamp: 'A.B. 11/15/2019 21:04:59'!
PASSED!

!testRun: #MarketInterfaceTest #test11DifferentValidCheckoutsGiveDIfferentTransactionIds stamp: 'A.B. 11/15/2019 21:04:59'!
PASSED!

!testRun: #MarketInterfaceTest #test12AddingBooksToClosedCartRaisesError stamp: 'A.B. 11/15/2019 21:04:59'!
PASSED!

!testRun: #MarketInterfaceTest #test13CheckingOutTwiceTheSameCartRaisesError stamp: 'A.B. 11/15/2019 21:04:59'!
PASSED!

!testRun: #MarketInterfaceTest #test14CheckingOutCommunicatesCorrectlyWithMP stamp: 'A.B. 11/15/2019 21:04:59'!
PASSED!

!testRun: #MarketInterfaceTest #test15ListingPurchasesOfInvalidUserRaisesError stamp: 'A.B. 11/15/2019 21:04:59'!
PASSED!

!testRun: #MarketInterfaceTest #test16ListingPurchasesWithInvalidPasswordRaisesError stamp: 'A.B. 11/15/2019 21:04:59'!
PASSED!

!testRun: #MarketInterfaceTest #test17ListPurchasesOfNewUserIsEmpty stamp: 'A.B. 11/15/2019 21:04:59'!
PASSED!

!testRun: #MarketInterfaceTest #test18ListingOfAUserListsTheCorrectTotal stamp: 'A.B. 11/15/2019 21:04:59'!
PASSED!

!testRun: #MarketInterfaceTest #test19DifferentUsersHasDifferentPurchasesList stamp: 'A.B. 11/15/2019 21:04:59'!
PASSED!

!testRun: #MarketInterfaceTest #test20ListingOfAUserListsTheCorrectBooksAndAmounts stamp: 'A.B. 11/15/2019 21:04:59'!
PASSED!

!testRun: #MarketInterfaceTest #test21AddingBookToExpiredCartRaisesError stamp: 'A.B. 11/15/2019 21:04:59'!
PASSED!

!testRun: #MarketInterfaceTest #test22ListingExpiredCartRaisesError stamp: 'A.B. 11/15/2019 21:04:59'!
PASSED!

!testRun: #MarketInterfaceTest #test23 stamp: 'A.B. 11/15/2019 21:04:59'!
PASSED!

----SNAPSHOT----(15 November 2019 21:13:31) CuisUniversity-3938.image priorSource: 14393268!
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 21:51:23'!
defaultMarket

	^ MarketInterface withUserPasswords: self defaultUserPasswords 
							withPriceList: self defaultPriceList 
							withMP: self 
							withTimeGuru: self.
	! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 21:52:05' prior: 50783153!
test01NewlyCreatedCartIsEmpty

	| cartID market |

	market := self defaultMarket.
		
	cartID := market createCartForUser: 'defaultUser' password:'passwordsupersegura'.
	
	self assert: ((market listCart: cartID) isEmpty). ! !

!testRun: #MarketInterfaceTest #test01NewlyCreatedCartIsEmpty stamp: 'A.B. 11/15/2019 21:52:08'!
PASSED!

!testRun: #MarketInterfaceTest #test01NewlyCreatedCartIsEmpty stamp: 'A.B. 11/15/2019 21:52:08'!
PASSED!

!testRun: #MarketInterfaceTest #test02CreatingCartsReturnDifferentIDs stamp: 'A.B. 11/15/2019 21:52:08'!
PASSED!

!testRun: #MarketInterfaceTest #test03OneBookAddedToCartIsListed stamp: 'A.B. 11/15/2019 21:52:08'!
PASSED!

!testRun: #MarketInterfaceTest #test04MoreThanOneBookAddedAreListedCorrectly stamp: 'A.B. 11/15/2019 21:52:08'!
PASSED!

!testRun: #MarketInterfaceTest #test05DifferentCartsCanBeListedCorrectly stamp: 'A.B. 11/15/2019 21:52:08'!
PASSED!

!testRun: #MarketInterfaceTest #test06ListingNonExistantCartIDRaisesError stamp: 'A.B. 11/15/2019 21:52:08'!
PASSED!

!testRun: #MarketInterfaceTest #test07AddingToInvalidCartIDRaisesError stamp: 'A.B. 11/15/2019 21:52:08'!
PASSED!

!testRun: #MarketInterfaceTest #test08CreatingCartWithIncorrectPasswordRaisesError stamp: 'A.B. 11/15/2019 21:52:08'!
PASSED!

!testRun: #MarketInterfaceTest #test09CreatingCartWithInvalidUserRaisesError stamp: 'A.B. 11/15/2019 21:52:08'!
PASSED!

!testRun: #MarketInterfaceTest #test10CheckoutCartWithInvalidIdRaisesError stamp: 'A.B. 11/15/2019 21:52:08'!
PASSED!

!testRun: #MarketInterfaceTest #test11DifferentValidCheckoutsGiveDIfferentTransactionIds stamp: 'A.B. 11/15/2019 21:52:08'!
PASSED!

!testRun: #MarketInterfaceTest #test12AddingBooksToClosedCartRaisesError stamp: 'A.B. 11/15/2019 21:52:08'!
PASSED!

!testRun: #MarketInterfaceTest #test13CheckingOutTwiceTheSameCartRaisesError stamp: 'A.B. 11/15/2019 21:52:08'!
PASSED!

!testRun: #MarketInterfaceTest #test14CheckingOutCommunicatesCorrectlyWithMP stamp: 'A.B. 11/15/2019 21:52:08'!
PASSED!

!testRun: #MarketInterfaceTest #test15ListingPurchasesOfInvalidUserRaisesError stamp: 'A.B. 11/15/2019 21:52:08'!
PASSED!

!testRun: #MarketInterfaceTest #test16ListingPurchasesWithInvalidPasswordRaisesError stamp: 'A.B. 11/15/2019 21:52:08'!
PASSED!

!testRun: #MarketInterfaceTest #test17ListPurchasesOfNewUserIsEmpty stamp: 'A.B. 11/15/2019 21:52:08'!
PASSED!

!testRun: #MarketInterfaceTest #test18ListingOfAUserListsTheCorrectTotal stamp: 'A.B. 11/15/2019 21:52:08'!
PASSED!

!testRun: #MarketInterfaceTest #test19DifferentUsersHasDifferentPurchasesList stamp: 'A.B. 11/15/2019 21:52:08'!
PASSED!

!testRun: #MarketInterfaceTest #test20ListingOfAUserListsTheCorrectBooksAndAmounts stamp: 'A.B. 11/15/2019 21:52:08'!
PASSED!

!testRun: #MarketInterfaceTest #test21AddingBookToExpiredCartRaisesError stamp: 'A.B. 11/15/2019 21:52:08'!
PASSED!

!testRun: #MarketInterfaceTest #test22ListingExpiredCartRaisesError stamp: 'A.B. 11/15/2019 21:52:08'!
PASSED!

!testRun: #MarketInterfaceTest #test23 stamp: 'A.B. 11/15/2019 21:52:08'!
PASSED!
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 21:52:47' prior: 50783167!
test02CreatingCartsReturnDifferentIDs

	| cartID market anotherCartID |

	market := self defaultMarket.		
		
	cartID := market createCartForUser: 'defaultUser' password:'passwordsupersegura'.
	
	anotherCartID := market createCartForUser: 'anotherDefaultUser' password:'passwordsupersegura2'.
	
	self deny: (cartID = anotherCartID) . ! !

!testRun: #MarketInterfaceTest #test02CreatingCartsReturnDifferentIDs stamp: 'A.B. 11/15/2019 21:52:49'!
PASSED!

!testRun: #MarketInterfaceTest #test01NewlyCreatedCartIsEmpty stamp: 'A.B. 11/15/2019 21:52:49'!
PASSED!

!testRun: #MarketInterfaceTest #test02CreatingCartsReturnDifferentIDs stamp: 'A.B. 11/15/2019 21:52:49'!
PASSED!

!testRun: #MarketInterfaceTest #test03OneBookAddedToCartIsListed stamp: 'A.B. 11/15/2019 21:52:49'!
PASSED!

!testRun: #MarketInterfaceTest #test04MoreThanOneBookAddedAreListedCorrectly stamp: 'A.B. 11/15/2019 21:52:49'!
PASSED!

!testRun: #MarketInterfaceTest #test05DifferentCartsCanBeListedCorrectly stamp: 'A.B. 11/15/2019 21:52:49'!
PASSED!

!testRun: #MarketInterfaceTest #test06ListingNonExistantCartIDRaisesError stamp: 'A.B. 11/15/2019 21:52:49'!
PASSED!

!testRun: #MarketInterfaceTest #test07AddingToInvalidCartIDRaisesError stamp: 'A.B. 11/15/2019 21:52:49'!
PASSED!

!testRun: #MarketInterfaceTest #test08CreatingCartWithIncorrectPasswordRaisesError stamp: 'A.B. 11/15/2019 21:52:49'!
PASSED!

!testRun: #MarketInterfaceTest #test09CreatingCartWithInvalidUserRaisesError stamp: 'A.B. 11/15/2019 21:52:49'!
PASSED!

!testRun: #MarketInterfaceTest #test10CheckoutCartWithInvalidIdRaisesError stamp: 'A.B. 11/15/2019 21:52:49'!
PASSED!

!testRun: #MarketInterfaceTest #test11DifferentValidCheckoutsGiveDIfferentTransactionIds stamp: 'A.B. 11/15/2019 21:52:49'!
PASSED!

!testRun: #MarketInterfaceTest #test12AddingBooksToClosedCartRaisesError stamp: 'A.B. 11/15/2019 21:52:49'!
PASSED!

!testRun: #MarketInterfaceTest #test13CheckingOutTwiceTheSameCartRaisesError stamp: 'A.B. 11/15/2019 21:52:49'!
PASSED!

!testRun: #MarketInterfaceTest #test14CheckingOutCommunicatesCorrectlyWithMP stamp: 'A.B. 11/15/2019 21:52:49'!
PASSED!

!testRun: #MarketInterfaceTest #test15ListingPurchasesOfInvalidUserRaisesError stamp: 'A.B. 11/15/2019 21:52:49'!
PASSED!

!testRun: #MarketInterfaceTest #test16ListingPurchasesWithInvalidPasswordRaisesError stamp: 'A.B. 11/15/2019 21:52:49'!
PASSED!

!testRun: #MarketInterfaceTest #test17ListPurchasesOfNewUserIsEmpty stamp: 'A.B. 11/15/2019 21:52:49'!
PASSED!

!testRun: #MarketInterfaceTest #test18ListingOfAUserListsTheCorrectTotal stamp: 'A.B. 11/15/2019 21:52:49'!
PASSED!

!testRun: #MarketInterfaceTest #test19DifferentUsersHasDifferentPurchasesList stamp: 'A.B. 11/15/2019 21:52:49'!
PASSED!

!testRun: #MarketInterfaceTest #test20ListingOfAUserListsTheCorrectBooksAndAmounts stamp: 'A.B. 11/15/2019 21:52:49'!
PASSED!

!testRun: #MarketInterfaceTest #test21AddingBookToExpiredCartRaisesError stamp: 'A.B. 11/15/2019 21:52:49'!
PASSED!

!testRun: #MarketInterfaceTest #test22ListingExpiredCartRaisesError stamp: 'A.B. 11/15/2019 21:52:49'!
PASSED!

!testRun: #MarketInterfaceTest #test23 stamp: 'A.B. 11/15/2019 21:52:49'!
PASSED!
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 21:52:59' prior: 50783184!
test03OneBookAddedToCartIsListed

	| cartID market book |

	market := self defaultMarket.		
	
	cartID := market createCartForUser: 'defaultUser' password:'passwordsupersegura'.
	
	book:= itemFactory itemSellByTheStore .
	market addToCart: cartID book: book amount: 1.
	
	self assert: (market listCart: cartID ) includes: book. 
	self assert: 1 equals: (market listCart: cartID ) size.! !

!testRun: #MarketInterfaceTest #test03OneBookAddedToCartIsListed stamp: 'A.B. 11/15/2019 21:53:01'!
PASSED!

!testRun: #MarketInterfaceTest #test01NewlyCreatedCartIsEmpty stamp: 'A.B. 11/15/2019 21:53:01'!
PASSED!

!testRun: #MarketInterfaceTest #test02CreatingCartsReturnDifferentIDs stamp: 'A.B. 11/15/2019 21:53:01'!
PASSED!

!testRun: #MarketInterfaceTest #test03OneBookAddedToCartIsListed stamp: 'A.B. 11/15/2019 21:53:01'!
PASSED!

!testRun: #MarketInterfaceTest #test04MoreThanOneBookAddedAreListedCorrectly stamp: 'A.B. 11/15/2019 21:53:01'!
PASSED!

!testRun: #MarketInterfaceTest #test05DifferentCartsCanBeListedCorrectly stamp: 'A.B. 11/15/2019 21:53:01'!
PASSED!

!testRun: #MarketInterfaceTest #test06ListingNonExistantCartIDRaisesError stamp: 'A.B. 11/15/2019 21:53:01'!
PASSED!

!testRun: #MarketInterfaceTest #test07AddingToInvalidCartIDRaisesError stamp: 'A.B. 11/15/2019 21:53:01'!
PASSED!

!testRun: #MarketInterfaceTest #test08CreatingCartWithIncorrectPasswordRaisesError stamp: 'A.B. 11/15/2019 21:53:01'!
PASSED!

!testRun: #MarketInterfaceTest #test09CreatingCartWithInvalidUserRaisesError stamp: 'A.B. 11/15/2019 21:53:01'!
PASSED!

!testRun: #MarketInterfaceTest #test10CheckoutCartWithInvalidIdRaisesError stamp: 'A.B. 11/15/2019 21:53:01'!
PASSED!

!testRun: #MarketInterfaceTest #test11DifferentValidCheckoutsGiveDIfferentTransactionIds stamp: 'A.B. 11/15/2019 21:53:01'!
PASSED!

!testRun: #MarketInterfaceTest #test12AddingBooksToClosedCartRaisesError stamp: 'A.B. 11/15/2019 21:53:01'!
PASSED!

!testRun: #MarketInterfaceTest #test13CheckingOutTwiceTheSameCartRaisesError stamp: 'A.B. 11/15/2019 21:53:01'!
PASSED!

!testRun: #MarketInterfaceTest #test14CheckingOutCommunicatesCorrectlyWithMP stamp: 'A.B. 11/15/2019 21:53:01'!
PASSED!

!testRun: #MarketInterfaceTest #test15ListingPurchasesOfInvalidUserRaisesError stamp: 'A.B. 11/15/2019 21:53:01'!
PASSED!

!testRun: #MarketInterfaceTest #test16ListingPurchasesWithInvalidPasswordRaisesError stamp: 'A.B. 11/15/2019 21:53:01'!
PASSED!

!testRun: #MarketInterfaceTest #test17ListPurchasesOfNewUserIsEmpty stamp: 'A.B. 11/15/2019 21:53:01'!
PASSED!

!testRun: #MarketInterfaceTest #test18ListingOfAUserListsTheCorrectTotal stamp: 'A.B. 11/15/2019 21:53:01'!
PASSED!

!testRun: #MarketInterfaceTest #test19DifferentUsersHasDifferentPurchasesList stamp: 'A.B. 11/15/2019 21:53:01'!
PASSED!

!testRun: #MarketInterfaceTest #test20ListingOfAUserListsTheCorrectBooksAndAmounts stamp: 'A.B. 11/15/2019 21:53:01'!
PASSED!

!testRun: #MarketInterfaceTest #test21AddingBookToExpiredCartRaisesError stamp: 'A.B. 11/15/2019 21:53:01'!
PASSED!

!testRun: #MarketInterfaceTest #test22ListingExpiredCartRaisesError stamp: 'A.B. 11/15/2019 21:53:01'!
PASSED!

!testRun: #MarketInterfaceTest #test23 stamp: 'A.B. 11/15/2019 21:53:01'!
PASSED!
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 21:53:11' prior: 50783203!
test04MoreThanOneBookAddedAreListedCorrectly

	| cartID market book |
	
	market := self defaultMarket.		
	
	cartID := market createCartForUser: 'defaultUser' password:'passwordsupersegura'.
	
	book:= itemFactory itemSellByTheStore .
	market addToCart: cartID book: book amount: 2.
	
	self assert: 2 equals: ((market listCart: cartID ) occurrencesOf: book). 
	self assert: 2 equals: (market listCart: cartID ) size.! !

!testRun: #MarketInterfaceTest #test04MoreThanOneBookAddedAreListedCorrectly stamp: 'A.B. 11/15/2019 21:53:13'!
PASSED!

!testRun: #MarketInterfaceTest #test01NewlyCreatedCartIsEmpty stamp: 'A.B. 11/15/2019 21:53:13'!
PASSED!

!testRun: #MarketInterfaceTest #test02CreatingCartsReturnDifferentIDs stamp: 'A.B. 11/15/2019 21:53:13'!
PASSED!

!testRun: #MarketInterfaceTest #test03OneBookAddedToCartIsListed stamp: 'A.B. 11/15/2019 21:53:13'!
PASSED!

!testRun: #MarketInterfaceTest #test04MoreThanOneBookAddedAreListedCorrectly stamp: 'A.B. 11/15/2019 21:53:13'!
PASSED!

!testRun: #MarketInterfaceTest #test05DifferentCartsCanBeListedCorrectly stamp: 'A.B. 11/15/2019 21:53:13'!
PASSED!

!testRun: #MarketInterfaceTest #test06ListingNonExistantCartIDRaisesError stamp: 'A.B. 11/15/2019 21:53:13'!
PASSED!

!testRun: #MarketInterfaceTest #test07AddingToInvalidCartIDRaisesError stamp: 'A.B. 11/15/2019 21:53:13'!
PASSED!

!testRun: #MarketInterfaceTest #test08CreatingCartWithIncorrectPasswordRaisesError stamp: 'A.B. 11/15/2019 21:53:13'!
PASSED!

!testRun: #MarketInterfaceTest #test09CreatingCartWithInvalidUserRaisesError stamp: 'A.B. 11/15/2019 21:53:13'!
PASSED!

!testRun: #MarketInterfaceTest #test10CheckoutCartWithInvalidIdRaisesError stamp: 'A.B. 11/15/2019 21:53:13'!
PASSED!

!testRun: #MarketInterfaceTest #test11DifferentValidCheckoutsGiveDIfferentTransactionIds stamp: 'A.B. 11/15/2019 21:53:13'!
PASSED!

!testRun: #MarketInterfaceTest #test12AddingBooksToClosedCartRaisesError stamp: 'A.B. 11/15/2019 21:53:13'!
PASSED!

!testRun: #MarketInterfaceTest #test13CheckingOutTwiceTheSameCartRaisesError stamp: 'A.B. 11/15/2019 21:53:13'!
PASSED!

!testRun: #MarketInterfaceTest #test14CheckingOutCommunicatesCorrectlyWithMP stamp: 'A.B. 11/15/2019 21:53:13'!
PASSED!

!testRun: #MarketInterfaceTest #test15ListingPurchasesOfInvalidUserRaisesError stamp: 'A.B. 11/15/2019 21:53:13'!
PASSED!

!testRun: #MarketInterfaceTest #test16ListingPurchasesWithInvalidPasswordRaisesError stamp: 'A.B. 11/15/2019 21:53:13'!
PASSED!

!testRun: #MarketInterfaceTest #test17ListPurchasesOfNewUserIsEmpty stamp: 'A.B. 11/15/2019 21:53:13'!
PASSED!

!testRun: #MarketInterfaceTest #test18ListingOfAUserListsTheCorrectTotal stamp: 'A.B. 11/15/2019 21:53:13'!
PASSED!

!testRun: #MarketInterfaceTest #test19DifferentUsersHasDifferentPurchasesList stamp: 'A.B. 11/15/2019 21:53:13'!
PASSED!

!testRun: #MarketInterfaceTest #test20ListingOfAUserListsTheCorrectBooksAndAmounts stamp: 'A.B. 11/15/2019 21:53:13'!
PASSED!

!testRun: #MarketInterfaceTest #test21AddingBookToExpiredCartRaisesError stamp: 'A.B. 11/15/2019 21:53:13'!
PASSED!

!testRun: #MarketInterfaceTest #test22ListingExpiredCartRaisesError stamp: 'A.B. 11/15/2019 21:53:13'!
PASSED!

!testRun: #MarketInterfaceTest #test23 stamp: 'A.B. 11/15/2019 21:53:13'!
PASSED!

!testRun: #MarketInterfaceTest #test04MoreThanOneBookAddedAreListedCorrectly stamp: 'A.B. 11/15/2019 21:58:48'!
PASSED!

!testRun: #MarketInterfaceTest #test01NewlyCreatedCartIsEmpty stamp: 'A.B. 11/15/2019 21:58:48'!
PASSED!

!testRun: #MarketInterfaceTest #test02CreatingCartsReturnDifferentIDs stamp: 'A.B. 11/15/2019 21:58:48'!
PASSED!

!testRun: #MarketInterfaceTest #test03OneBookAddedToCartIsListed stamp: 'A.B. 11/15/2019 21:58:48'!
PASSED!

!testRun: #MarketInterfaceTest #test04MoreThanOneBookAddedAreListedCorrectly stamp: 'A.B. 11/15/2019 21:58:48'!
PASSED!

!testRun: #MarketInterfaceTest #test05DifferentCartsCanBeListedCorrectly stamp: 'A.B. 11/15/2019 21:58:48'!
PASSED!

!testRun: #MarketInterfaceTest #test06ListingNonExistantCartIDRaisesError stamp: 'A.B. 11/15/2019 21:58:48'!
PASSED!

!testRun: #MarketInterfaceTest #test07AddingToInvalidCartIDRaisesError stamp: 'A.B. 11/15/2019 21:58:48'!
PASSED!

!testRun: #MarketInterfaceTest #test08CreatingCartWithIncorrectPasswordRaisesError stamp: 'A.B. 11/15/2019 21:58:48'!
PASSED!

!testRun: #MarketInterfaceTest #test09CreatingCartWithInvalidUserRaisesError stamp: 'A.B. 11/15/2019 21:58:48'!
PASSED!

!testRun: #MarketInterfaceTest #test10CheckoutCartWithInvalidIdRaisesError stamp: 'A.B. 11/15/2019 21:58:48'!
PASSED!

!testRun: #MarketInterfaceTest #test11DifferentValidCheckoutsGiveDIfferentTransactionIds stamp: 'A.B. 11/15/2019 21:58:48'!
PASSED!

!testRun: #MarketInterfaceTest #test12AddingBooksToClosedCartRaisesError stamp: 'A.B. 11/15/2019 21:58:48'!
PASSED!

!testRun: #MarketInterfaceTest #test13CheckingOutTwiceTheSameCartRaisesError stamp: 'A.B. 11/15/2019 21:58:48'!
PASSED!

!testRun: #MarketInterfaceTest #test14CheckingOutCommunicatesCorrectlyWithMP stamp: 'A.B. 11/15/2019 21:58:48'!
PASSED!

!testRun: #MarketInterfaceTest #test15ListingPurchasesOfInvalidUserRaisesError stamp: 'A.B. 11/15/2019 21:58:48'!
PASSED!

!testRun: #MarketInterfaceTest #test16ListingPurchasesWithInvalidPasswordRaisesError stamp: 'A.B. 11/15/2019 21:58:48'!
PASSED!

!testRun: #MarketInterfaceTest #test17ListPurchasesOfNewUserIsEmpty stamp: 'A.B. 11/15/2019 21:58:48'!
PASSED!

!testRun: #MarketInterfaceTest #test18ListingOfAUserListsTheCorrectTotal stamp: 'A.B. 11/15/2019 21:58:48'!
PASSED!

!testRun: #MarketInterfaceTest #test19DifferentUsersHasDifferentPurchasesList stamp: 'A.B. 11/15/2019 21:58:48'!
PASSED!

!testRun: #MarketInterfaceTest #test20ListingOfAUserListsTheCorrectBooksAndAmounts stamp: 'A.B. 11/15/2019 21:58:48'!
PASSED!

!testRun: #MarketInterfaceTest #test21AddingBookToExpiredCartRaisesError stamp: 'A.B. 11/15/2019 21:58:48'!
PASSED!

!testRun: #MarketInterfaceTest #test22ListingExpiredCartRaisesError stamp: 'A.B. 11/15/2019 21:58:48'!
PASSED!

!testRun: #MarketInterfaceTest #test23 stamp: 'A.B. 11/15/2019 21:58:48'!
PASSED!
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 21:58:57' prior: 50783223!
test05DifferentCartsCanBeListedCorrectly

	| cartID market book anotherCartID |

	market := self defaultMarket.		
	
	cartID := market createCartForUser: 'defaultUser' password:'passwordsupersegura'.
	
	anotherCartID := market createCartForUser: 'anotherDefaultUser' password:'passwordsupersegura2'.
	
	book:= itemFactory itemSellByTheStore .
	
	market addToCart: cartID book: book amount: 2.
	
	market addToCart: anotherCartID book: book amount: 7.
	
	self assert: 2 equals: ((market listCart: cartID ) occurrencesOf: book). 
	self assert: 2 equals: (market listCart: cartID ) size.
	
	self assert: 7 equals: ((market listCart: anotherCartID ) occurrencesOf: book). 
	self assert: 7 equals: (market listCart: anotherCartID ) size.! !

!testRun: #MarketInterfaceTest #test05DifferentCartsCanBeListedCorrectly stamp: 'A.B. 11/15/2019 21:59:06'!
PASSED!

!testRun: #MarketInterfaceTest #test01NewlyCreatedCartIsEmpty stamp: 'A.B. 11/15/2019 21:59:06'!
PASSED!

!testRun: #MarketInterfaceTest #test02CreatingCartsReturnDifferentIDs stamp: 'A.B. 11/15/2019 21:59:06'!
PASSED!

!testRun: #MarketInterfaceTest #test03OneBookAddedToCartIsListed stamp: 'A.B. 11/15/2019 21:59:06'!
PASSED!

!testRun: #MarketInterfaceTest #test04MoreThanOneBookAddedAreListedCorrectly stamp: 'A.B. 11/15/2019 21:59:06'!
PASSED!

!testRun: #MarketInterfaceTest #test05DifferentCartsCanBeListedCorrectly stamp: 'A.B. 11/15/2019 21:59:06'!
PASSED!

!testRun: #MarketInterfaceTest #test06ListingNonExistantCartIDRaisesError stamp: 'A.B. 11/15/2019 21:59:06'!
PASSED!

!testRun: #MarketInterfaceTest #test07AddingToInvalidCartIDRaisesError stamp: 'A.B. 11/15/2019 21:59:06'!
PASSED!

!testRun: #MarketInterfaceTest #test08CreatingCartWithIncorrectPasswordRaisesError stamp: 'A.B. 11/15/2019 21:59:06'!
PASSED!

!testRun: #MarketInterfaceTest #test09CreatingCartWithInvalidUserRaisesError stamp: 'A.B. 11/15/2019 21:59:06'!
PASSED!

!testRun: #MarketInterfaceTest #test10CheckoutCartWithInvalidIdRaisesError stamp: 'A.B. 11/15/2019 21:59:06'!
PASSED!

!testRun: #MarketInterfaceTest #test11DifferentValidCheckoutsGiveDIfferentTransactionIds stamp: 'A.B. 11/15/2019 21:59:06'!
PASSED!

!testRun: #MarketInterfaceTest #test12AddingBooksToClosedCartRaisesError stamp: 'A.B. 11/15/2019 21:59:06'!
PASSED!

!testRun: #MarketInterfaceTest #test13CheckingOutTwiceTheSameCartRaisesError stamp: 'A.B. 11/15/2019 21:59:06'!
PASSED!

!testRun: #MarketInterfaceTest #test14CheckingOutCommunicatesCorrectlyWithMP stamp: 'A.B. 11/15/2019 21:59:06'!
PASSED!

!testRun: #MarketInterfaceTest #test15ListingPurchasesOfInvalidUserRaisesError stamp: 'A.B. 11/15/2019 21:59:06'!
PASSED!

!testRun: #MarketInterfaceTest #test16ListingPurchasesWithInvalidPasswordRaisesError stamp: 'A.B. 11/15/2019 21:59:06'!
PASSED!

!testRun: #MarketInterfaceTest #test17ListPurchasesOfNewUserIsEmpty stamp: 'A.B. 11/15/2019 21:59:06'!
PASSED!

!testRun: #MarketInterfaceTest #test18ListingOfAUserListsTheCorrectTotal stamp: 'A.B. 11/15/2019 21:59:06'!
PASSED!

!testRun: #MarketInterfaceTest #test19DifferentUsersHasDifferentPurchasesList stamp: 'A.B. 11/15/2019 21:59:06'!
PASSED!

!testRun: #MarketInterfaceTest #test20ListingOfAUserListsTheCorrectBooksAndAmounts stamp: 'A.B. 11/15/2019 21:59:06'!
PASSED!

!testRun: #MarketInterfaceTest #test21AddingBookToExpiredCartRaisesError stamp: 'A.B. 11/15/2019 21:59:06'!
PASSED!

!testRun: #MarketInterfaceTest #test22ListingExpiredCartRaisesError stamp: 'A.B. 11/15/2019 21:59:06'!
PASSED!

!testRun: #MarketInterfaceTest #test23 stamp: 'A.B. 11/15/2019 21:59:06'!
PASSED!
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 21:59:15' prior: 50783253!
test06ListingNonExistantCartIDRaisesError

	| market |

	market := self defaultMarket.		

	self should: [market listCart: -1] 
		 raise: Error -MessageNotUnderstood 
		 withMessageText: MarketInterface errorNonExistantCart.! !

!testRun: #MarketInterfaceTest #test06ListingNonExistantCartIDRaisesError stamp: 'A.B. 11/15/2019 21:59:17'!
PASSED!

!testRun: #MarketInterfaceTest #test01NewlyCreatedCartIsEmpty stamp: 'A.B. 11/15/2019 21:59:17'!
PASSED!

!testRun: #MarketInterfaceTest #test02CreatingCartsReturnDifferentIDs stamp: 'A.B. 11/15/2019 21:59:17'!
PASSED!

!testRun: #MarketInterfaceTest #test03OneBookAddedToCartIsListed stamp: 'A.B. 11/15/2019 21:59:17'!
PASSED!

!testRun: #MarketInterfaceTest #test04MoreThanOneBookAddedAreListedCorrectly stamp: 'A.B. 11/15/2019 21:59:17'!
PASSED!

!testRun: #MarketInterfaceTest #test05DifferentCartsCanBeListedCorrectly stamp: 'A.B. 11/15/2019 21:59:17'!
PASSED!

!testRun: #MarketInterfaceTest #test06ListingNonExistantCartIDRaisesError stamp: 'A.B. 11/15/2019 21:59:17'!
PASSED!

!testRun: #MarketInterfaceTest #test07AddingToInvalidCartIDRaisesError stamp: 'A.B. 11/15/2019 21:59:17'!
PASSED!

!testRun: #MarketInterfaceTest #test08CreatingCartWithIncorrectPasswordRaisesError stamp: 'A.B. 11/15/2019 21:59:17'!
PASSED!

!testRun: #MarketInterfaceTest #test09CreatingCartWithInvalidUserRaisesError stamp: 'A.B. 11/15/2019 21:59:17'!
PASSED!

!testRun: #MarketInterfaceTest #test10CheckoutCartWithInvalidIdRaisesError stamp: 'A.B. 11/15/2019 21:59:17'!
PASSED!

!testRun: #MarketInterfaceTest #test11DifferentValidCheckoutsGiveDIfferentTransactionIds stamp: 'A.B. 11/15/2019 21:59:17'!
PASSED!

!testRun: #MarketInterfaceTest #test12AddingBooksToClosedCartRaisesError stamp: 'A.B. 11/15/2019 21:59:17'!
PASSED!

!testRun: #MarketInterfaceTest #test13CheckingOutTwiceTheSameCartRaisesError stamp: 'A.B. 11/15/2019 21:59:17'!
PASSED!

!testRun: #MarketInterfaceTest #test14CheckingOutCommunicatesCorrectlyWithMP stamp: 'A.B. 11/15/2019 21:59:17'!
PASSED!

!testRun: #MarketInterfaceTest #test15ListingPurchasesOfInvalidUserRaisesError stamp: 'A.B. 11/15/2019 21:59:17'!
PASSED!

!testRun: #MarketInterfaceTest #test16ListingPurchasesWithInvalidPasswordRaisesError stamp: 'A.B. 11/15/2019 21:59:17'!
PASSED!

!testRun: #MarketInterfaceTest #test17ListPurchasesOfNewUserIsEmpty stamp: 'A.B. 11/15/2019 21:59:17'!
PASSED!

!testRun: #MarketInterfaceTest #test18ListingOfAUserListsTheCorrectTotal stamp: 'A.B. 11/15/2019 21:59:17'!
PASSED!

!testRun: #MarketInterfaceTest #test19DifferentUsersHasDifferentPurchasesList stamp: 'A.B. 11/15/2019 21:59:17'!
PASSED!

!testRun: #MarketInterfaceTest #test20ListingOfAUserListsTheCorrectBooksAndAmounts stamp: 'A.B. 11/15/2019 21:59:17'!
PASSED!

!testRun: #MarketInterfaceTest #test21AddingBookToExpiredCartRaisesError stamp: 'A.B. 11/15/2019 21:59:17'!
PASSED!

!testRun: #MarketInterfaceTest #test22ListingExpiredCartRaisesError stamp: 'A.B. 11/15/2019 21:59:17'!
PASSED!

!testRun: #MarketInterfaceTest #test23 stamp: 'A.B. 11/15/2019 21:59:17'!
PASSED!
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 21:59:23' prior: 50783267!
test07AddingToInvalidCartIDRaisesError

	| market book |

	market := self defaultMarket.		
	
	book:= itemFactory itemSellByTheStore .
	
	self should: [market addToCart: -12 book: book amount: 1.] 
		 raise:  Error - MessageNotUnderstood 
		withMessageText: MarketInterface errorNonExistantCart .
	
	! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 21:59:29' prior: 50783283!
test08CreatingCartWithIncorrectPasswordRaisesError

	| market |
	
	market := self defaultMarket.		
		
	self should: [ market createCartForUser: 'defaultUser' password: 'incorrect-password'. ]  
	raise: Error - MessageNotUnderstood 
	withMessageText: MarketInterface errorInvalidPassword.
! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 21:59:37' prior: 50783299!
test09CreatingCartWithInvalidUserRaisesError

	| market |

	market := self defaultMarket.		
		
	self should: [ market createCartForUser: 'inexistent-user' password: 'password'. ]  
	raise: Error - MessageNotUnderstood 
	withMessageText: MarketInterface errorInvalidUser.
! !

!testRun: #MarketInterfaceTest #test09CreatingCartWithInvalidUserRaisesError stamp: 'A.B. 11/15/2019 21:59:38'!
PASSED!

!testRun: #MarketInterfaceTest #test01NewlyCreatedCartIsEmpty stamp: 'A.B. 11/15/2019 21:59:38'!
PASSED!

!testRun: #MarketInterfaceTest #test02CreatingCartsReturnDifferentIDs stamp: 'A.B. 11/15/2019 21:59:38'!
PASSED!

!testRun: #MarketInterfaceTest #test03OneBookAddedToCartIsListed stamp: 'A.B. 11/15/2019 21:59:38'!
PASSED!

!testRun: #MarketInterfaceTest #test04MoreThanOneBookAddedAreListedCorrectly stamp: 'A.B. 11/15/2019 21:59:38'!
PASSED!

!testRun: #MarketInterfaceTest #test05DifferentCartsCanBeListedCorrectly stamp: 'A.B. 11/15/2019 21:59:38'!
PASSED!

!testRun: #MarketInterfaceTest #test06ListingNonExistantCartIDRaisesError stamp: 'A.B. 11/15/2019 21:59:38'!
PASSED!

!testRun: #MarketInterfaceTest #test07AddingToInvalidCartIDRaisesError stamp: 'A.B. 11/15/2019 21:59:38'!
PASSED!

!testRun: #MarketInterfaceTest #test08CreatingCartWithIncorrectPasswordRaisesError stamp: 'A.B. 11/15/2019 21:59:38'!
PASSED!

!testRun: #MarketInterfaceTest #test09CreatingCartWithInvalidUserRaisesError stamp: 'A.B. 11/15/2019 21:59:38'!
PASSED!

!testRun: #MarketInterfaceTest #test10CheckoutCartWithInvalidIdRaisesError stamp: 'A.B. 11/15/2019 21:59:38'!
PASSED!

!testRun: #MarketInterfaceTest #test11DifferentValidCheckoutsGiveDIfferentTransactionIds stamp: 'A.B. 11/15/2019 21:59:38'!
PASSED!

!testRun: #MarketInterfaceTest #test12AddingBooksToClosedCartRaisesError stamp: 'A.B. 11/15/2019 21:59:38'!
PASSED!

!testRun: #MarketInterfaceTest #test13CheckingOutTwiceTheSameCartRaisesError stamp: 'A.B. 11/15/2019 21:59:38'!
PASSED!

!testRun: #MarketInterfaceTest #test14CheckingOutCommunicatesCorrectlyWithMP stamp: 'A.B. 11/15/2019 21:59:38'!
PASSED!

!testRun: #MarketInterfaceTest #test15ListingPurchasesOfInvalidUserRaisesError stamp: 'A.B. 11/15/2019 21:59:38'!
PASSED!

!testRun: #MarketInterfaceTest #test16ListingPurchasesWithInvalidPasswordRaisesError stamp: 'A.B. 11/15/2019 21:59:38'!
PASSED!

!testRun: #MarketInterfaceTest #test17ListPurchasesOfNewUserIsEmpty stamp: 'A.B. 11/15/2019 21:59:38'!
PASSED!

!testRun: #MarketInterfaceTest #test18ListingOfAUserListsTheCorrectTotal stamp: 'A.B. 11/15/2019 21:59:38'!
PASSED!

!testRun: #MarketInterfaceTest #test19DifferentUsersHasDifferentPurchasesList stamp: 'A.B. 11/15/2019 21:59:38'!
PASSED!

!testRun: #MarketInterfaceTest #test20ListingOfAUserListsTheCorrectBooksAndAmounts stamp: 'A.B. 11/15/2019 21:59:38'!
PASSED!

!testRun: #MarketInterfaceTest #test21AddingBookToExpiredCartRaisesError stamp: 'A.B. 11/15/2019 21:59:38'!
PASSED!

!testRun: #MarketInterfaceTest #test22ListingExpiredCartRaisesError stamp: 'A.B. 11/15/2019 21:59:38'!
PASSED!

!testRun: #MarketInterfaceTest #test23 stamp: 'A.B. 11/15/2019 21:59:38'!
PASSED!
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 21:59:49' prior: 50783314!
test10CheckoutCartWithInvalidIdRaisesError

	| market |

	market := self defaultMarket.		
	
	"HAY QUE REVISAR QUE NO SE MODIFICARON LAS VENTAS DEL CLIENTE"
	
	self should: [ market checkOutCart: -1 withCreditCard: itemFactory notExpiredCreditCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: MarketInterface errorNonExistantCart equals: anError messageText .
		] ! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 22:01:28' prior: 50783334!
test11DifferentValidCheckoutsGiveDIfferentTransactionIds

	| market book cartID anotherCartID anotherTransactionID transactionID |

	market := self defaultMarket.		
	
	cartID := market createCartForUser: 'defaultUser' password:'passwordsupersegura'.
	anotherCartID := market createCartForUser: 'anotherDefaultUser' password:'passwordsupersegura2'.
	
	book := itemFactory itemSellByTheStore .
	
	market addToCart: cartID book: book amount: 1.
	market addToCart: anotherCartID book: book amount: 3.
	
	transactionID := market checkOutCart: cartID withCreditCard: itemFactory notExpiredCreditCard.
	anotherTransactionID := market checkOutCart: anotherCartID withCreditCard: itemFactory notExpiredCreditCard.
	
	self deny: (transactionID = anotherTransactionID) . ! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 22:01:33' prior: 50783365!
test12AddingBooksToClosedCartRaisesError

	| market book cartID |

	market := self defaultMarket.		
	                            	
	cartID := market createCartForUser: 'defaultUser' password:'passwordsupersegura'.
	book := itemFactory itemSellByTheStore .
	
	market addToCart: cartID book: book amount: 1.
	
	market checkOutCart: cartID withCreditCard: itemFactory notExpiredCreditCard.
	
	self should:  [ market addToCart: cartID book: book amount: 1. ]
	 raise:  Error - MessageNotUnderstood 
	 withExceptionDo: [ :anError | 
		self assert: MarketInterface errorCheckedOutCart equals: anError messageText.
		self assert: 1 equals: (market listCart: cartID) size.
		self assert: 1 equals: ((market listCart: cartID) occurrencesOf: book).
	]
		! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 22:01:37' prior: 50783395!
test13CheckingOutTwiceTheSameCartRaisesError

	| market book cartID |

	market := self defaultMarket.		
	                            	
	cartID := market createCartForUser: 'defaultUser' password:'passwordsupersegura'.
	book := itemFactory itemSellByTheStore .
	
	market addToCart: cartID book: book amount: 1.
	
	market checkOutCart: cartID withCreditCard: itemFactory notExpiredCreditCard.
	
	self should:  [ market checkOutCart: cartID withCreditCard: itemFactory notExpiredCreditCard. ]
	 raise:  Error - MessageNotUnderstood 
	 withExceptionDo: [ :anError | 
		self assert: MarketInterface errorCheckedOutCart equals: anError messageText.
		self assert: 1 equals: (market listCart: cartID) size.
		self assert: 1 equals: ((market listCart: cartID) occurrencesOf: book).
	]
		! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 22:01:42' prior: 50783426!
test14CheckingOutCommunicatesCorrectlyWithMP

	| market book cartID mpText |

	market := self defaultMarket.		
	                            	
	cartID := market createCartForUser: 'defaultUser' password:'passwordsupersegura'.
	book := itemFactory itemSellByTheStore .
	
	market addToCart: cartID book: book amount: 1.
	
	mpText := 'MP fue utilizado'.
	mpAction := [ :anAmount :aCreditCard | self error: mpText ].
	
	self should:  [ market checkOutCart: cartID withCreditCard: itemFactory notExpiredCreditCard. ]
	 raise:  Error - MessageNotUnderstood 
	 withExceptionDo: [ :anError | 
		self assert: mpText equals: anError messageText.
	].

	mpAction := [ :anAmount :aCreditCard | ].

		! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 22:01:53' prior: 50783454!
test15ListingPurchasesOfInvalidUserRaisesError

	| market |

	market := self defaultMarket.		
                            	
	
	self should:  [ market listPurchasesOf: 'notAUser' withPassword:'passwordsupersegura'. ]
	 raise:  Error - MessageNotUnderstood 
	 withExceptionDo: [ :anError | 
		self assert: MarketInterface errorInvalidUser equals: anError messageText.
	].

		! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 22:01:58' prior: 50786748!
test15ListingPurchasesOfInvalidUserRaisesError

	| market |

	market := self defaultMarket.		
                          		
	self should:  [ market listPurchasesOf: 'notAUser' withPassword:'passwordsupersegura'. ]
	 raise:  Error - MessageNotUnderstood 
	 withExceptionDo: [ :anError | 
		self assert: MarketInterface errorInvalidUser equals: anError messageText.
	].

		! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 22:02:06' prior: 50783472!
test16ListingPurchasesWithInvalidPasswordRaisesError

	| market |

	market := self defaultMarket.		
                            	
	
	self should:  [ market listPurchasesOf: 'defaultUser' withPassword:'password-invalid'. ]
	 raise:  Error - MessageNotUnderstood 
	 withExceptionDo: [ :anError | 
		self assert: MarketInterface errorInvalidPassword equals: anError messageText.
	].

		! !

!testRun: #MarketInterfaceTest #test16ListingPurchasesWithInvalidPasswordRaisesError stamp: 'A.B. 11/15/2019 22:02:07'!
PASSED!

!testRun: #MarketInterfaceTest #test01NewlyCreatedCartIsEmpty stamp: 'A.B. 11/15/2019 22:02:07'!
PASSED!

!testRun: #MarketInterfaceTest #test02CreatingCartsReturnDifferentIDs stamp: 'A.B. 11/15/2019 22:02:07'!
PASSED!

!testRun: #MarketInterfaceTest #test03OneBookAddedToCartIsListed stamp: 'A.B. 11/15/2019 22:02:07'!
PASSED!

!testRun: #MarketInterfaceTest #test04MoreThanOneBookAddedAreListedCorrectly stamp: 'A.B. 11/15/2019 22:02:07'!
PASSED!

!testRun: #MarketInterfaceTest #test05DifferentCartsCanBeListedCorrectly stamp: 'A.B. 11/15/2019 22:02:07'!
PASSED!

!testRun: #MarketInterfaceTest #test06ListingNonExistantCartIDRaisesError stamp: 'A.B. 11/15/2019 22:02:07'!
PASSED!

!testRun: #MarketInterfaceTest #test07AddingToInvalidCartIDRaisesError stamp: 'A.B. 11/15/2019 22:02:07'!
PASSED!

!testRun: #MarketInterfaceTest #test08CreatingCartWithIncorrectPasswordRaisesError stamp: 'A.B. 11/15/2019 22:02:07'!
PASSED!

!testRun: #MarketInterfaceTest #test09CreatingCartWithInvalidUserRaisesError stamp: 'A.B. 11/15/2019 22:02:07'!
PASSED!

!testRun: #MarketInterfaceTest #test10CheckoutCartWithInvalidIdRaisesError stamp: 'A.B. 11/15/2019 22:02:07'!
PASSED!

!testRun: #MarketInterfaceTest #test11DifferentValidCheckoutsGiveDIfferentTransactionIds stamp: 'A.B. 11/15/2019 22:02:07'!
PASSED!

!testRun: #MarketInterfaceTest #test12AddingBooksToClosedCartRaisesError stamp: 'A.B. 11/15/2019 22:02:07'!
PASSED!

!testRun: #MarketInterfaceTest #test13CheckingOutTwiceTheSameCartRaisesError stamp: 'A.B. 11/15/2019 22:02:07'!
PASSED!

!testRun: #MarketInterfaceTest #test14CheckingOutCommunicatesCorrectlyWithMP stamp: 'A.B. 11/15/2019 22:02:07'!
PASSED!

!testRun: #MarketInterfaceTest #test15ListingPurchasesOfInvalidUserRaisesError stamp: 'A.B. 11/15/2019 22:02:07'!
PASSED!

!testRun: #MarketInterfaceTest #test16ListingPurchasesWithInvalidPasswordRaisesError stamp: 'A.B. 11/15/2019 22:02:07'!
PASSED!

!testRun: #MarketInterfaceTest #test17ListPurchasesOfNewUserIsEmpty stamp: 'A.B. 11/15/2019 22:02:07'!
PASSED!

!testRun: #MarketInterfaceTest #test18ListingOfAUserListsTheCorrectTotal stamp: 'A.B. 11/15/2019 22:02:07'!
PASSED!

!testRun: #MarketInterfaceTest #test19DifferentUsersHasDifferentPurchasesList stamp: 'A.B. 11/15/2019 22:02:07'!
PASSED!

!testRun: #MarketInterfaceTest #test20ListingOfAUserListsTheCorrectBooksAndAmounts stamp: 'A.B. 11/15/2019 22:02:07'!
PASSED!

!testRun: #MarketInterfaceTest #test21AddingBookToExpiredCartRaisesError stamp: 'A.B. 11/15/2019 22:02:07'!
PASSED!

!testRun: #MarketInterfaceTest #test22ListingExpiredCartRaisesError stamp: 'A.B. 11/15/2019 22:02:07'!
PASSED!

!testRun: #MarketInterfaceTest #test23 stamp: 'A.B. 11/15/2019 22:02:07'!
PASSED!
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 22:02:14' prior: 50783491!
test17ListPurchasesOfNewUserIsEmpty

	| market list |

	market := self defaultMarket.		
                            	
	list := market listPurchasesOf: 'defaultUser' withPassword:'passwordsupersegura'. 
	
	self assert: list isEmpty .
		! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 22:02:20' prior: 50783505!
test18ListingOfAUserListsTheCorrectTotal

	| market list book cartID |

	market := self defaultMarket.		
	                            	
	cartID := market createCartForUser: 'defaultUser' password:'passwordsupersegura'.
	book := itemFactory itemSellByTheStore .
	
	market addToCart: cartID book: book amount: 1.	
	market checkOutCart: cartID withCreditCard: itemFactory notExpiredCreditCard.
	
	list := market listPurchasesOf: 'defaultUser' withPassword: 'passwordsupersegura'.
	
	self assert: 10 equals: list total.
! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 22:02:24' prior: 50783528!
test19DifferentUsersHasDifferentPurchasesList

	| market book cartID anotherCartID list |

	market := self defaultMarket.		
	
	cartID := market createCartForUser: 'defaultUser' password:'passwordsupersegura'.
	anotherCartID := market createCartForUser: 'anotherDefaultUser' password:'passwordsupersegura2'.
	
	book := itemFactory itemSellByTheStore .
	
	market addToCart: cartID book: book amount: 1.
	market addToCart: anotherCartID book: book amount: 3.
	
	market checkOutCart: cartID withCreditCard: itemFactory notExpiredCreditCard.
	market checkOutCart: anotherCartID withCreditCard: itemFactory notExpiredCreditCard.
	
	list := market listPurchasesOf: 'defaultUser' withPassword: 'passwordsupersegura'.
	anotherList := market listPurchasesOf: 'anotherDefaultUser' withPassword: 'passwordsupersegura2'.
	
	self deny: (list = anotherList). 
	! !

!testRun: #MarketInterfaceTest #test19DifferentUsersHasDifferentPurchasesList stamp: 'A.B. 11/15/2019 22:02:25'!
PASSED!

!testRun: #MarketInterfaceTest #test01NewlyCreatedCartIsEmpty stamp: 'A.B. 11/15/2019 22:02:25'!
PASSED!

!testRun: #MarketInterfaceTest #test02CreatingCartsReturnDifferentIDs stamp: 'A.B. 11/15/2019 22:02:25'!
PASSED!

!testRun: #MarketInterfaceTest #test03OneBookAddedToCartIsListed stamp: 'A.B. 11/15/2019 22:02:25'!
PASSED!

!testRun: #MarketInterfaceTest #test04MoreThanOneBookAddedAreListedCorrectly stamp: 'A.B. 11/15/2019 22:02:26'!
PASSED!

!testRun: #MarketInterfaceTest #test05DifferentCartsCanBeListedCorrectly stamp: 'A.B. 11/15/2019 22:02:26'!
PASSED!

!testRun: #MarketInterfaceTest #test06ListingNonExistantCartIDRaisesError stamp: 'A.B. 11/15/2019 22:02:26'!
PASSED!

!testRun: #MarketInterfaceTest #test07AddingToInvalidCartIDRaisesError stamp: 'A.B. 11/15/2019 22:02:26'!
PASSED!

!testRun: #MarketInterfaceTest #test08CreatingCartWithIncorrectPasswordRaisesError stamp: 'A.B. 11/15/2019 22:02:26'!
PASSED!

!testRun: #MarketInterfaceTest #test09CreatingCartWithInvalidUserRaisesError stamp: 'A.B. 11/15/2019 22:02:26'!
PASSED!

!testRun: #MarketInterfaceTest #test10CheckoutCartWithInvalidIdRaisesError stamp: 'A.B. 11/15/2019 22:02:26'!
PASSED!

!testRun: #MarketInterfaceTest #test11DifferentValidCheckoutsGiveDIfferentTransactionIds stamp: 'A.B. 11/15/2019 22:02:26'!
PASSED!

!testRun: #MarketInterfaceTest #test12AddingBooksToClosedCartRaisesError stamp: 'A.B. 11/15/2019 22:02:26'!
PASSED!

!testRun: #MarketInterfaceTest #test13CheckingOutTwiceTheSameCartRaisesError stamp: 'A.B. 11/15/2019 22:02:26'!
PASSED!

!testRun: #MarketInterfaceTest #test14CheckingOutCommunicatesCorrectlyWithMP stamp: 'A.B. 11/15/2019 22:02:26'!
PASSED!

!testRun: #MarketInterfaceTest #test15ListingPurchasesOfInvalidUserRaisesError stamp: 'A.B. 11/15/2019 22:02:26'!
PASSED!

!testRun: #MarketInterfaceTest #test16ListingPurchasesWithInvalidPasswordRaisesError stamp: 'A.B. 11/15/2019 22:02:26'!
PASSED!

!testRun: #MarketInterfaceTest #test17ListPurchasesOfNewUserIsEmpty stamp: 'A.B. 11/15/2019 22:02:26'!
PASSED!

!testRun: #MarketInterfaceTest #test18ListingOfAUserListsTheCorrectTotal stamp: 'A.B. 11/15/2019 22:02:26'!
PASSED!

!testRun: #MarketInterfaceTest #test19DifferentUsersHasDifferentPurchasesList stamp: 'A.B. 11/15/2019 22:02:26'!
PASSED!

!testRun: #MarketInterfaceTest #test20ListingOfAUserListsTheCorrectBooksAndAmounts stamp: 'A.B. 11/15/2019 22:02:26'!
PASSED!

!testRun: #MarketInterfaceTest #test21AddingBookToExpiredCartRaisesError stamp: 'A.B. 11/15/2019 22:02:26'!
PASSED!

!testRun: #MarketInterfaceTest #test22ListingExpiredCartRaisesError stamp: 'A.B. 11/15/2019 22:02:26'!
PASSED!

!testRun: #MarketInterfaceTest #test23 stamp: 'A.B. 11/15/2019 22:02:26'!
PASSED!
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 22:02:32' prior: 50783561!
test20ListingOfAUserListsTheCorrectBooksAndAmounts

	| market list book cartID |

	market := self defaultMarket.		
	                            	
	cartID := market createCartForUser: 'defaultUser' password:'passwordsupersegura'.
	book := itemFactory itemSellByTheStore .
	
	market addToCart: cartID book: book amount: 3.	
	market checkOutCart: cartID withCreditCard: itemFactory notExpiredCreditCard.
	
	list := market listPurchasesOf: 'defaultUser' withPassword: 'passwordsupersegura'.
	
	self assert: 3 equals: (list count: book).
! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 22:02:42' prior: 50785595!
test21AddingBookToExpiredCartRaisesError

	| market book cartID |

	market := self defaultMarket.		
	
	time := DateAndTime year: 2019 month: 11 day: 20 hour: 18 minute: 0. 
	                            	
	cartID := market createCartForUser: 'defaultUser' password:'passwordsupersegura'.
	book := itemFactory itemSellByTheStore.

	time := DateAndTime year: 2019 month: 11 day: 20 hour: 18 minute: 30. 
	
	self should: [market addToCart: cartID book: book amount: 3.]  
		 raise: Error -MessageNotUnderstood  
		 withMessageText: market class errorExpiredCart.! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 22:02:46' prior: 50785372!
test22ListingExpiredCartRaisesError

	| market cartID |

	market := self defaultMarket.		
	
	time := DateAndTime year: 2019 month: 11 day: 20 hour: 18 minute: 0. 
	                            	
	cartID := market createCartForUser: 'defaultUser' password:'passwordsupersegura'.
	
	time := DateAndTime year: 2019 month: 11 day: 20 hour: 18 minute: 30. 
	
	self should: [market listCart: cartID .]  
		 raise: Error -MessageNotUnderstood  
		 withMessageText: market class errorExpiredCart.! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 22:02:50' prior: 50785631!
test23

	| market cartID |

	market := self defaultMarket.		
	
	time := DateAndTime year: 2019 month: 11 day: 20 hour: 18 minute: 0. 
	                            	
	cartID := market createCartForUser: 'defaultUser' password:'passwordsupersegura'.
	market addToCart: cartID book: itemFactory itemSellByTheStore amount: 1.
	
	time := DateAndTime year: 2019 month: 11 day: 20 hour: 18 minute: 30. 
	
	self should: [market checkOutCart: cartID withCreditCard: itemFactory notExpiredCreditCard.]  
		 raise: Error -MessageNotUnderstood  
		 withMessageText: market class errorExpiredCart.! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 22:04:54'!
fastForwardMinutes: anAmountOfMinutes

	time := time + Duration minutes: anAmountOfMinutes.! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 22:05:24' prior: 50787054!
test21AddingBookToExpiredCartRaisesError

	| market book cartID |

	market := self defaultMarket.		
	
	cartID := market createCartForUser: 'defaultUser' password:'passwordsupersegura'.
	book := itemFactory itemSellByTheStore.

	self fastForwardMinutes: 30.
	
	self should: [market addToCart: cartID book: book amount: 3.]  
		 raise: Error -MessageNotUnderstood  
		 withMessageText: market class errorExpiredCart.! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 22:05:45' prior: 50787123!
test21AddingBookToExpiredCartRaisesError

	| market book cartID |

	market := self defaultMarket.		
	
	cartID := market createCartForUser: 'defaultUser' password:'passwordsupersegura'.
	book := itemFactory itemSellByTheStore.

	self fastForwardMinutes: 30.
	
	self should: [market addToCart: cartID book: book amount: 3.]  
		 raise: Error -MessageNotUnderstood  
		 withMessageText: market class errorExpiredCart.! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 22:06:00' prior: 50787075!
test22ListingExpiredCartRaisesError

	| market cartID |

	market := self defaultMarket.		
	                            	
	cartID := market createCartForUser: 'defaultUser' password:'passwordsupersegura'.
	
	self fastForwardMinutes: 30.
	
	self should: [market listCart: cartID .]  
		 raise: Error -MessageNotUnderstood  
		 withMessageText: market class errorExpiredCart.! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 22:06:28' prior: 50787094!
test23

	| market cartID |

	market := self defaultMarket.		
	                	
	cartID := market createCartForUser: 'defaultUser' password:'passwordsupersegura'.
	market addToCart: cartID book: itemFactory itemSellByTheStore amount: 1.
	
	self fastForwardMinutes: 30.

	self should: [market checkOutCart: cartID withCreditCard: itemFactory notExpiredCreditCard.]  
		 raise: Error -MessageNotUnderstood  
		 withMessageText: market class errorExpiredCart.! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 22:07:06' prior: 50787116!
fastForwardMinutes: anAmountOfMinutes

	time := Duration minutes: anAmountOfMinutes + time.! !

!testRun: #MarketInterfaceTest #test01NewlyCreatedCartIsEmpty stamp: 'A.B. 11/15/2019 22:07:09'!
PASSED!

!testRun: #MarketInterfaceTest #test02CreatingCartsReturnDifferentIDs stamp: 'A.B. 11/15/2019 22:07:09'!
PASSED!

!testRun: #MarketInterfaceTest #test03OneBookAddedToCartIsListed stamp: 'A.B. 11/15/2019 22:07:09'!
PASSED!

!testRun: #MarketInterfaceTest #test04MoreThanOneBookAddedAreListedCorrectly stamp: 'A.B. 11/15/2019 22:07:09'!
PASSED!

!testRun: #MarketInterfaceTest #test05DifferentCartsCanBeListedCorrectly stamp: 'A.B. 11/15/2019 22:07:09'!
PASSED!

!testRun: #MarketInterfaceTest #test06ListingNonExistantCartIDRaisesError stamp: 'A.B. 11/15/2019 22:07:09'!
PASSED!

!testRun: #MarketInterfaceTest #test07AddingToInvalidCartIDRaisesError stamp: 'A.B. 11/15/2019 22:07:09'!
PASSED!

!testRun: #MarketInterfaceTest #test08CreatingCartWithIncorrectPasswordRaisesError stamp: 'A.B. 11/15/2019 22:07:09'!
PASSED!

!testRun: #MarketInterfaceTest #test09CreatingCartWithInvalidUserRaisesError stamp: 'A.B. 11/15/2019 22:07:09'!
PASSED!

!testRun: #MarketInterfaceTest #test10CheckoutCartWithInvalidIdRaisesError stamp: 'A.B. 11/15/2019 22:07:09'!
PASSED!

!testRun: #MarketInterfaceTest #test11DifferentValidCheckoutsGiveDIfferentTransactionIds stamp: 'A.B. 11/15/2019 22:07:09'!
PASSED!

!testRun: #MarketInterfaceTest #test12AddingBooksToClosedCartRaisesError stamp: 'A.B. 11/15/2019 22:07:09'!
PASSED!

!testRun: #MarketInterfaceTest #test13CheckingOutTwiceTheSameCartRaisesError stamp: 'A.B. 11/15/2019 22:07:09'!
PASSED!

!testRun: #MarketInterfaceTest #test14CheckingOutCommunicatesCorrectlyWithMP stamp: 'A.B. 11/15/2019 22:07:09'!
PASSED!

!testRun: #MarketInterfaceTest #test15ListingPurchasesOfInvalidUserRaisesError stamp: 'A.B. 11/15/2019 22:07:09'!
PASSED!

!testRun: #MarketInterfaceTest #test16ListingPurchasesWithInvalidPasswordRaisesError stamp: 'A.B. 11/15/2019 22:07:09'!
PASSED!

!testRun: #MarketInterfaceTest #test17ListPurchasesOfNewUserIsEmpty stamp: 'A.B. 11/15/2019 22:07:09'!
PASSED!

!testRun: #MarketInterfaceTest #test18ListingOfAUserListsTheCorrectTotal stamp: 'A.B. 11/15/2019 22:07:09'!
PASSED!

!testRun: #MarketInterfaceTest #test19DifferentUsersHasDifferentPurchasesList stamp: 'A.B. 11/15/2019 22:07:09'!
PASSED!

!testRun: #MarketInterfaceTest #test20ListingOfAUserListsTheCorrectBooksAndAmounts stamp: 'A.B. 11/15/2019 22:07:09'!
PASSED!

!testRun: #MarketInterfaceTest #test21AddingBookToExpiredCartRaisesError stamp: 'A.B. 11/15/2019 22:07:09'!
ERROR!

!testRun: #MarketInterfaceTest #test22ListingExpiredCartRaisesError stamp: 'A.B. 11/15/2019 22:07:09'!
ERROR!

!testRun: #MarketInterfaceTest #test23 stamp: 'A.B. 11/15/2019 22:07:09'!
ERROR!
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 22:07:25' prior: 50787191!
fastForwardMinutes: anAmountOfMinutes

	time := (Duration minutes: anAmountOfMinutes) + time.! !

!testRun: #MarketInterfaceTest #test01NewlyCreatedCartIsEmpty stamp: 'A.B. 11/15/2019 22:07:27'!
PASSED!

!testRun: #MarketInterfaceTest #test02CreatingCartsReturnDifferentIDs stamp: 'A.B. 11/15/2019 22:07:27'!
PASSED!

!testRun: #MarketInterfaceTest #test03OneBookAddedToCartIsListed stamp: 'A.B. 11/15/2019 22:07:27'!
PASSED!

!testRun: #MarketInterfaceTest #test04MoreThanOneBookAddedAreListedCorrectly stamp: 'A.B. 11/15/2019 22:07:27'!
PASSED!

!testRun: #MarketInterfaceTest #test05DifferentCartsCanBeListedCorrectly stamp: 'A.B. 11/15/2019 22:07:27'!
PASSED!

!testRun: #MarketInterfaceTest #test06ListingNonExistantCartIDRaisesError stamp: 'A.B. 11/15/2019 22:07:27'!
PASSED!

!testRun: #MarketInterfaceTest #test07AddingToInvalidCartIDRaisesError stamp: 'A.B. 11/15/2019 22:07:27'!
PASSED!

!testRun: #MarketInterfaceTest #test08CreatingCartWithIncorrectPasswordRaisesError stamp: 'A.B. 11/15/2019 22:07:27'!
PASSED!

!testRun: #MarketInterfaceTest #test09CreatingCartWithInvalidUserRaisesError stamp: 'A.B. 11/15/2019 22:07:27'!
PASSED!

!testRun: #MarketInterfaceTest #test10CheckoutCartWithInvalidIdRaisesError stamp: 'A.B. 11/15/2019 22:07:27'!
PASSED!

!testRun: #MarketInterfaceTest #test11DifferentValidCheckoutsGiveDIfferentTransactionIds stamp: 'A.B. 11/15/2019 22:07:27'!
PASSED!

!testRun: #MarketInterfaceTest #test12AddingBooksToClosedCartRaisesError stamp: 'A.B. 11/15/2019 22:07:27'!
PASSED!

!testRun: #MarketInterfaceTest #test13CheckingOutTwiceTheSameCartRaisesError stamp: 'A.B. 11/15/2019 22:07:27'!
PASSED!

!testRun: #MarketInterfaceTest #test14CheckingOutCommunicatesCorrectlyWithMP stamp: 'A.B. 11/15/2019 22:07:27'!
PASSED!

!testRun: #MarketInterfaceTest #test15ListingPurchasesOfInvalidUserRaisesError stamp: 'A.B. 11/15/2019 22:07:27'!
PASSED!

!testRun: #MarketInterfaceTest #test16ListingPurchasesWithInvalidPasswordRaisesError stamp: 'A.B. 11/15/2019 22:07:27'!
PASSED!

!testRun: #MarketInterfaceTest #test17ListPurchasesOfNewUserIsEmpty stamp: 'A.B. 11/15/2019 22:07:27'!
PASSED!

!testRun: #MarketInterfaceTest #test18ListingOfAUserListsTheCorrectTotal stamp: 'A.B. 11/15/2019 22:07:27'!
PASSED!

!testRun: #MarketInterfaceTest #test19DifferentUsersHasDifferentPurchasesList stamp: 'A.B. 11/15/2019 22:07:27'!
PASSED!

!testRun: #MarketInterfaceTest #test20ListingOfAUserListsTheCorrectBooksAndAmounts stamp: 'A.B. 11/15/2019 22:07:27'!
PASSED!

!testRun: #MarketInterfaceTest #test21AddingBookToExpiredCartRaisesError stamp: 'A.B. 11/15/2019 22:07:27'!
ERROR!

!testRun: #MarketInterfaceTest #test22ListingExpiredCartRaisesError stamp: 'A.B. 11/15/2019 22:07:27'!
ERROR!

!testRun: #MarketInterfaceTest #test23 stamp: 'A.B. 11/15/2019 22:07:27'!
ERROR!

!testRun: #MarketInterfaceTest #test21AddingBookToExpiredCartRaisesError stamp: 'A.B. 11/15/2019 22:07:30'!
ERROR!

(d1+tope)class .!

|tope d1 d2 d3|

d1 := DateAndTime year: 2019 month: 11 day: 20 hour: 18 minute: 0. 
d2 := DateAndTime year: 2019 month: 11 day: 20 hour: 18 minute: 30.  
d3 := DateAndTime year: 2020 month: 11 day: 20 hour: 18 minute: 30.  


tope := Duration minutes: 30.
(d1-d3) >= tope. 

(d1+tope)class .!

|tope d1 d2 d3|

d1 := DateAndTime year: 2019 month: 11 day: 20 hour: 18 minute: 0. 
d2 := DateAndTime year: 2019 month: 11 day: 20 hour: 18 minute: 30.  
d3 := DateAndTime year: 2020 month: 11 day: 20 hour: 18 minute: 30.  


tope := Duration minutes: 30.
(d1-d3) >= tope. 

(d1+tope)minutes.!

!testRun: #MarketInterfaceTest #test21AddingBookToExpiredCartRaisesError stamp: 'A.B. 11/15/2019 22:15:00'!
ERROR!
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 22:15:49' prior: 50787282!
fastForwardMinutes: anAmountOfMinutes

	time := time + (Duration minutes: anAmountOfMinutes).! !

!testRun: #MarketInterfaceTest #test01NewlyCreatedCartIsEmpty stamp: 'A.B. 11/15/2019 22:15:51'!
PASSED!

!testRun: #MarketInterfaceTest #test02CreatingCartsReturnDifferentIDs stamp: 'A.B. 11/15/2019 22:15:51'!
PASSED!

!testRun: #MarketInterfaceTest #test03OneBookAddedToCartIsListed stamp: 'A.B. 11/15/2019 22:15:51'!
PASSED!

!testRun: #MarketInterfaceTest #test04MoreThanOneBookAddedAreListedCorrectly stamp: 'A.B. 11/15/2019 22:15:51'!
PASSED!

!testRun: #MarketInterfaceTest #test05DifferentCartsCanBeListedCorrectly stamp: 'A.B. 11/15/2019 22:15:51'!
PASSED!

!testRun: #MarketInterfaceTest #test06ListingNonExistantCartIDRaisesError stamp: 'A.B. 11/15/2019 22:15:51'!
PASSED!

!testRun: #MarketInterfaceTest #test07AddingToInvalidCartIDRaisesError stamp: 'A.B. 11/15/2019 22:15:51'!
PASSED!

!testRun: #MarketInterfaceTest #test08CreatingCartWithIncorrectPasswordRaisesError stamp: 'A.B. 11/15/2019 22:15:51'!
PASSED!

!testRun: #MarketInterfaceTest #test09CreatingCartWithInvalidUserRaisesError stamp: 'A.B. 11/15/2019 22:15:51'!
PASSED!

!testRun: #MarketInterfaceTest #test10CheckoutCartWithInvalidIdRaisesError stamp: 'A.B. 11/15/2019 22:15:51'!
PASSED!

!testRun: #MarketInterfaceTest #test11DifferentValidCheckoutsGiveDIfferentTransactionIds stamp: 'A.B. 11/15/2019 22:15:51'!
PASSED!

!testRun: #MarketInterfaceTest #test12AddingBooksToClosedCartRaisesError stamp: 'A.B. 11/15/2019 22:15:51'!
PASSED!

!testRun: #MarketInterfaceTest #test13CheckingOutTwiceTheSameCartRaisesError stamp: 'A.B. 11/15/2019 22:15:51'!
PASSED!

!testRun: #MarketInterfaceTest #test14CheckingOutCommunicatesCorrectlyWithMP stamp: 'A.B. 11/15/2019 22:15:51'!
PASSED!

!testRun: #MarketInterfaceTest #test15ListingPurchasesOfInvalidUserRaisesError stamp: 'A.B. 11/15/2019 22:15:51'!
PASSED!

!testRun: #MarketInterfaceTest #test16ListingPurchasesWithInvalidPasswordRaisesError stamp: 'A.B. 11/15/2019 22:15:51'!
PASSED!

!testRun: #MarketInterfaceTest #test17ListPurchasesOfNewUserIsEmpty stamp: 'A.B. 11/15/2019 22:15:51'!
PASSED!

!testRun: #MarketInterfaceTest #test18ListingOfAUserListsTheCorrectTotal stamp: 'A.B. 11/15/2019 22:15:51'!
PASSED!

!testRun: #MarketInterfaceTest #test19DifferentUsersHasDifferentPurchasesList stamp: 'A.B. 11/15/2019 22:15:51'!
PASSED!

!testRun: #MarketInterfaceTest #test20ListingOfAUserListsTheCorrectBooksAndAmounts stamp: 'A.B. 11/15/2019 22:15:51'!
PASSED!

!testRun: #MarketInterfaceTest #test21AddingBookToExpiredCartRaisesError stamp: 'A.B. 11/15/2019 22:15:51'!
PASSED!

!testRun: #MarketInterfaceTest #test22ListingExpiredCartRaisesError stamp: 'A.B. 11/15/2019 22:15:51'!
PASSED!

!testRun: #MarketInterfaceTest #test23 stamp: 'A.B. 11/15/2019 22:15:51'!
PASSED!
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 22:22:42' prior: 50786282!
test05DifferentCartsCanBeListedCorrectly

	| cartID market book anotherCartID |

	market := self defaultMarket.		
	
	cartID := market createCartForUser: 'defaultUser' password:'passwordsupersegura'.
	
	anotherCartID := market createCartForUser: 'anotherDefaultUser' password:'passwordsupersegura2'.
	
	book:= itemFactory itemSellByTheStore .
	market addToCart: cartID book: book amount: 2.
	market addToCart: anotherCartID book: book amount: 7.
	
	self assert: 2 equals: ((market listCart: cartID ) occurrencesOf: book). 
	self assert: 2 equals: (market listCart: cartID ) size.
	
	self assert: 7 equals: ((market listCart: anotherCartID ) occurrencesOf: book). 
	self assert: 7 equals: (market listCart: anotherCartID ) size.! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 22:23:54' prior: 50786640!
test11DifferentValidCheckoutsGiveDIfferentTransactionIds

	| market book cartID anotherCartID anotherTransactionID transactionID |

	market := self defaultMarket.		
	
	cartID := market createCartForUser: 'defaultUser' password:'passwordsupersegura'.
	anotherCartID := market createCartForUser: 'anotherDefaultUser' password:'passwordsupersegura2'.
	
	book := itemFactory itemSellByTheStore .
	market addToCart: cartID book: book amount: 1.
	market addToCart: anotherCartID book: book amount: 3.
	
	transactionID := market checkOutCart: cartID withCreditCard: itemFactory notExpiredCreditCard.
	anotherTransactionID := market checkOutCart: anotherCartID withCreditCard: itemFactory notExpiredCreditCard.
	
	self deny: (transactionID = anotherTransactionID) . ! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 22:24:45' prior: 50786668!
test12AddingBooksToClosedCartRaisesError

	| market book cartID |

	market := self defaultMarket.		
	                            	
	cartID := market createCartForUser: 'defaultUser' password:'passwordsupersegura'.
	
	book := itemFactory itemSellByTheStore .
	market addToCart: cartID book: book amount: 1.
	
	market checkOutCart: cartID withCreditCard: itemFactory notExpiredCreditCard.
	
	self should:  [ market addToCart: cartID book: book amount: 1. ]
	 raise:  Error - MessageNotUnderstood 
	 withExceptionDo: [ :anError | 
		self assert: MarketInterface errorCheckedOutCart equals: anError messageText.
		self assert: 1 equals: (market listCart: cartID) size.
		self assert: 1 equals: ((market listCart: cartID) occurrencesOf: book).
	]
		! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 22:24:59' prior: 50786695!
test13CheckingOutTwiceTheSameCartRaisesError

	| market book cartID |

	market := self defaultMarket.		
	                            	
	cartID := market createCartForUser: 'defaultUser' password:'passwordsupersegura'.
	
	book := itemFactory itemSellByTheStore .
	market addToCart: cartID book: book amount: 1.
	
	market checkOutCart: cartID withCreditCard: itemFactory notExpiredCreditCard.
	
	self should:  [ market checkOutCart: cartID withCreditCard: itemFactory notExpiredCreditCard. ]
	 raise:  Error - MessageNotUnderstood 
	 withExceptionDo: [ :anError | 
		self assert: MarketInterface errorCheckedOutCart equals: anError messageText.
		self assert: 1 equals: (market listCart: cartID) size.
		self assert: 1 equals: ((market listCart: cartID) occurrencesOf: book).
	]
		! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 22:25:07' prior: 50786723!
test14CheckingOutCommunicatesCorrectlyWithMP

	| market book cartID mpText |

	market := self defaultMarket.		
	                            	
	cartID := market createCartForUser: 'defaultUser' password:'passwordsupersegura'.
	
	book := itemFactory itemSellByTheStore .
	market addToCart: cartID book: book amount: 1.
	
	mpText := 'MP fue utilizado'.
	mpAction := [ :anAmount :aCreditCard | self error: mpText ].
	
	self should:  [ market checkOutCart: cartID withCreditCard: itemFactory notExpiredCreditCard. ]
	 raise:  Error - MessageNotUnderstood 
	 withExceptionDo: [ :anError | 
		self assert: mpText equals: anError messageText.
	].

	mpAction := [ :anAmount :aCreditCard | ].

		! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 22:27:16' prior: 50786894!
test18ListingOfAUserListsTheCorrectTotal

	| market list book cartID |

	market := self defaultMarket.		
	                            	
	cartID := market createCartForUser: 'defaultUser' password:'passwordsupersegura'.
	
	book := itemFactory itemSellByTheStore .
	market addToCart: cartID book: book amount: 1.	
	
	market checkOutCart: cartID withCreditCard: itemFactory notExpiredCreditCard.
	
	list := market listPurchasesOf: 'defaultUser' withPassword: 'passwordsupersegura'.
	
	self assert: 10 equals: list total.
! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 22:27:27' prior: 50786914!
test19DifferentUsersHasDifferentPurchasesList

	| market book cartID anotherCartID list |

	market := self defaultMarket.		
	
	cartID := market createCartForUser: 'defaultUser' password:'passwordsupersegura'.
	anotherCartID := market createCartForUser: 'anotherDefaultUser' password:'passwordsupersegura2'.
	
	book := itemFactory itemSellByTheStore .
	market addToCart: cartID book: book amount: 1.
	market addToCart: anotherCartID book: book amount: 3.
	
	market checkOutCart: cartID withCreditCard: itemFactory notExpiredCreditCard.
	market checkOutCart: anotherCartID withCreditCard: itemFactory notExpiredCreditCard.
	
	list := market listPurchasesOf: 'defaultUser' withPassword: 'passwordsupersegura'.
	anotherList := market listPurchasesOf: 'anotherDefaultUser' withPassword: 'passwordsupersegura2'.
	
	self deny: (list = anotherList). 
	! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 22:27:38' prior: 50787033!
test20ListingOfAUserListsTheCorrectBooksAndAmounts

	| market list book cartID |

	market := self defaultMarket.		
	                            	
	cartID := market createCartForUser: 'defaultUser' password:'passwordsupersegura'.
	
	book := itemFactory itemSellByTheStore .
	market addToCart: cartID book: book amount: 3.	
	
	market checkOutCart: cartID withCreditCard: itemFactory notExpiredCreditCard.
	
	list := market listPurchasesOf: 'defaultUser' withPassword: 'passwordsupersegura'.
	
	self assert: 3 equals: (list count: book).
! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 22:27:55' prior: 50787140!
test21AddingBookToExpiredCartRaisesError

	| market book cartID |

	market := self defaultMarket.		
	
	cartID := market createCartForUser: 'defaultUser' password:'passwordsupersegura'.
	
	self fastForwardMinutes: 30.
	
	book := itemFactory itemSellByTheStore.

	self should: [market addToCart: cartID book: book amount: 3.]  
		 raise: Error -MessageNotUnderstood  
		 withMessageText: market class errorExpiredCart.! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 22:29:55'!
addDefaultBookTo: aCart amount: aQuantity in: aMarket
 
	aMarket addToCart: aCart book: itemFactory itemSellByTheStore amount: aQuantity .	
! !

!methodRemoval: MarketInterfaceTest #addDefaultBookTo:amount:in: stamp: 'A.B. 11/15/2019 22:37:02'!
addDefaultBookTo: aCart amount: aQuantity in: aMarket
 
	aMarket addToCart: aCart book: itemFactory itemSellByTheStore amount: aQuantity .	
!
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 22:37:38' prior: 50786496!
test07AddingToInvalidCartIDRaisesError

	| market |

	market := self defaultMarket.		
	
	self should: [market addToCart: -12 book: itemFactory itemSellByTheStore amount: 1.] 
		 raise:  Error - MessageNotUnderstood 
		withMessageText: MarketInterface errorNonExistantCart .
	
	! !

!testRun: #MarketInterfaceTest #test07AddingToInvalidCartIDRaisesError stamp: 'A.B. 11/15/2019 22:37:44'!
PASSED!

!testRun: #MarketInterfaceTest #test01NewlyCreatedCartIsEmpty stamp: 'A.B. 11/15/2019 22:37:44'!
PASSED!

!testRun: #MarketInterfaceTest #test02CreatingCartsReturnDifferentIDs stamp: 'A.B. 11/15/2019 22:37:44'!
PASSED!

!testRun: #MarketInterfaceTest #test03OneBookAddedToCartIsListed stamp: 'A.B. 11/15/2019 22:37:44'!
PASSED!

!testRun: #MarketInterfaceTest #test04MoreThanOneBookAddedAreListedCorrectly stamp: 'A.B. 11/15/2019 22:37:44'!
PASSED!

!testRun: #MarketInterfaceTest #test05DifferentCartsCanBeListedCorrectly stamp: 'A.B. 11/15/2019 22:37:44'!
PASSED!

!testRun: #MarketInterfaceTest #test06ListingNonExistantCartIDRaisesError stamp: 'A.B. 11/15/2019 22:37:44'!
PASSED!

!testRun: #MarketInterfaceTest #test07AddingToInvalidCartIDRaisesError stamp: 'A.B. 11/15/2019 22:37:44'!
PASSED!

!testRun: #MarketInterfaceTest #test08CreatingCartWithIncorrectPasswordRaisesError stamp: 'A.B. 11/15/2019 22:37:44'!
PASSED!

!testRun: #MarketInterfaceTest #test09CreatingCartWithInvalidUserRaisesError stamp: 'A.B. 11/15/2019 22:37:44'!
PASSED!

!testRun: #MarketInterfaceTest #test10CheckoutCartWithInvalidIdRaisesError stamp: 'A.B. 11/15/2019 22:37:44'!
PASSED!

!testRun: #MarketInterfaceTest #test11DifferentValidCheckoutsGiveDIfferentTransactionIds stamp: 'A.B. 11/15/2019 22:37:44'!
PASSED!

!testRun: #MarketInterfaceTest #test12AddingBooksToClosedCartRaisesError stamp: 'A.B. 11/15/2019 22:37:44'!
PASSED!

!testRun: #MarketInterfaceTest #test13CheckingOutTwiceTheSameCartRaisesError stamp: 'A.B. 11/15/2019 22:37:44'!
PASSED!

!testRun: #MarketInterfaceTest #test14CheckingOutCommunicatesCorrectlyWithMP stamp: 'A.B. 11/15/2019 22:37:44'!
PASSED!

!testRun: #MarketInterfaceTest #test15ListingPurchasesOfInvalidUserRaisesError stamp: 'A.B. 11/15/2019 22:37:44'!
PASSED!

!testRun: #MarketInterfaceTest #test16ListingPurchasesWithInvalidPasswordRaisesError stamp: 'A.B. 11/15/2019 22:37:44'!
PASSED!

!testRun: #MarketInterfaceTest #test17ListPurchasesOfNewUserIsEmpty stamp: 'A.B. 11/15/2019 22:37:44'!
PASSED!

!testRun: #MarketInterfaceTest #test18ListingOfAUserListsTheCorrectTotal stamp: 'A.B. 11/15/2019 22:37:44'!
PASSED!

!testRun: #MarketInterfaceTest #test19DifferentUsersHasDifferentPurchasesList stamp: 'A.B. 11/15/2019 22:37:44'!
PASSED!

!testRun: #MarketInterfaceTest #test20ListingOfAUserListsTheCorrectBooksAndAmounts stamp: 'A.B. 11/15/2019 22:37:44'!
PASSED!

!testRun: #MarketInterfaceTest #test21AddingBookToExpiredCartRaisesError stamp: 'A.B. 11/15/2019 22:37:44'!
PASSED!

!testRun: #MarketInterfaceTest #test22ListingExpiredCartRaisesError stamp: 'A.B. 11/15/2019 22:37:44'!
PASSED!

!testRun: #MarketInterfaceTest #test23 stamp: 'A.B. 11/15/2019 22:37:44'!
PASSED!
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 22:40:04' prior: 50787545!
test12AddingBooksToClosedCartRaisesError

	| market book cartID |

	market := self defaultMarket.		
	                            	
	cartID := market createCartForUser: 'defaultUser' password:'passwordsupersegura'.
	
	book := itemFactory itemSellByTheStore .
	market addToCart: cartID book: book amount: 1.
	
	market checkOutCart: cartID withCreditCard: itemFactory notExpiredCreditCard.
	
	self should:  [ market addToCart: cartID book: book amount: 1. ]
	 raise:  Error - MessageNotUnderstood 
	 withExceptionDo: [ :anError | 
		self assert: MarketInterface errorCheckedOutCart equals: anError messageText.
		self assert: 1 equals: (market listCart: cartID) size.
		self assert: 1 equals: ((market listCart: cartID) occurrencesOf: book).
	]
		! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 22:40:31' prior: 50787572!
test13CheckingOutTwiceTheSameCartRaisesError

	| market book cartID |

	market := self defaultMarket.		
	                            	
	cartID := market createCartForUser: 'defaultUser' password:'passwordsupersegura'.
	
	book := itemFactory itemSellByTheStore .
	market addToCart: cartID book: itemFactory itemSellByTheStore amount: 1.
	
	market checkOutCart: cartID withCreditCard: itemFactory notExpiredCreditCard.
	
	self should:  [ market checkOutCart: cartID withCreditCard: itemFactory notExpiredCreditCard. ]
	 raise:  Error - MessageNotUnderstood 
	 withExceptionDo: [ :anError | 
		self assert: MarketInterface errorCheckedOutCart equals: anError messageText.
		self assert: 1 equals: (market listCart: cartID) size.
		self assert: 1 equals: ((market listCart: cartID) occurrencesOf: book).
	]
		! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 22:41:29' prior: 50787600!
test14CheckingOutCommunicatesCorrectlyWithMP

	| market cartID mpText |

	market := self defaultMarket.		
	                            	
	cartID := market createCartForUser: 'defaultUser' password:'passwordsupersegura'.
	
	market addToCart: cartID book: itemFactory itemSellByTheStore amount: 1.
	
	mpText := 'MP fue utilizado'.
	mpAction := [ :anAmount :aCreditCard | self error: mpText ].
	
	self should:  [ market checkOutCart: cartID withCreditCard: itemFactory notExpiredCreditCard. ]
		 raise:  Error - MessageNotUnderstood 
		 withExceptionDo: [ :anError | self assert: mpText equals: anError messageText.].

	mpAction := [ :anAmount :aCreditCard | ].

		! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 22:41:56' prior: 50786779!
test16ListingPurchasesWithInvalidPasswordRaisesError

	| market |

	market := self defaultMarket.		
                            	
	self should:  [ market listPurchasesOf: 'defaultUser' withPassword:'password-invalid'. ]
	 raise:  Error - MessageNotUnderstood 
	 withExceptionDo: [ :anError | 
		self assert: MarketInterface errorInvalidPassword equals: anError messageText.
	].

		! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 22:42:06' prior: 50787910!
test16ListingPurchasesWithInvalidPasswordRaisesError

	| market |

	market := self defaultMarket.		
                            	
	self should:  [ market listPurchasesOf: 'defaultUser' withPassword:'password-invalid'. ]
	 raise:  Error - MessageNotUnderstood 
	 withExceptionDo: [ :anError | 
			self assert: MarketInterface errorInvalidPassword equals: anError messageText. ].

		! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 22:42:21' prior: 50787625!
test18ListingOfAUserListsTheCorrectTotal

	| market list cartID |

	market := self defaultMarket.		
	                            	
	cartID := market createCartForUser: 'defaultUser' password:'passwordsupersegura'.
	
	market addToCart: cartID book: itemFactory itemSellByTheStore amount: 1.	
	
	market checkOutCart: cartID withCreditCard: itemFactory notExpiredCreditCard.
	
	list := market listPurchasesOf: 'defaultUser' withPassword: 'passwordsupersegura'.
	
	self assert: 10 equals: list total.
! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 22:43:18' prior: 50787696!
test21AddingBookToExpiredCartRaisesError

	| market cartID |

	market := self defaultMarket.		
	
	cartID := market createCartForUser: 'defaultUser' password:'passwordsupersegura'.
	
	self fastForwardMinutes: 30.
	
	self should: [market addToCart: cartID book: itemFactory itemSellByTheStore amount: 3.]  
		 raise: Error -MessageNotUnderstood  
		 withMessageText: market class errorExpiredCart.! !

!testRun: #MarketInterfaceTest #test21AddingBookToExpiredCartRaisesError stamp: 'A.B. 11/15/2019 22:43:21'!
PASSED!

!testRun: #MarketInterfaceTest #test01NewlyCreatedCartIsEmpty stamp: 'A.B. 11/15/2019 22:43:21'!
PASSED!

!testRun: #MarketInterfaceTest #test02CreatingCartsReturnDifferentIDs stamp: 'A.B. 11/15/2019 22:43:21'!
PASSED!

!testRun: #MarketInterfaceTest #test03OneBookAddedToCartIsListed stamp: 'A.B. 11/15/2019 22:43:21'!
PASSED!

!testRun: #MarketInterfaceTest #test04MoreThanOneBookAddedAreListedCorrectly stamp: 'A.B. 11/15/2019 22:43:21'!
PASSED!

!testRun: #MarketInterfaceTest #test05DifferentCartsCanBeListedCorrectly stamp: 'A.B. 11/15/2019 22:43:21'!
PASSED!

!testRun: #MarketInterfaceTest #test06ListingNonExistantCartIDRaisesError stamp: 'A.B. 11/15/2019 22:43:21'!
PASSED!

!testRun: #MarketInterfaceTest #test07AddingToInvalidCartIDRaisesError stamp: 'A.B. 11/15/2019 22:43:21'!
PASSED!

!testRun: #MarketInterfaceTest #test08CreatingCartWithIncorrectPasswordRaisesError stamp: 'A.B. 11/15/2019 22:43:21'!
PASSED!

!testRun: #MarketInterfaceTest #test09CreatingCartWithInvalidUserRaisesError stamp: 'A.B. 11/15/2019 22:43:21'!
PASSED!

!testRun: #MarketInterfaceTest #test10CheckoutCartWithInvalidIdRaisesError stamp: 'A.B. 11/15/2019 22:43:21'!
PASSED!

!testRun: #MarketInterfaceTest #test11DifferentValidCheckoutsGiveDIfferentTransactionIds stamp: 'A.B. 11/15/2019 22:43:21'!
PASSED!

!testRun: #MarketInterfaceTest #test12AddingBooksToClosedCartRaisesError stamp: 'A.B. 11/15/2019 22:43:21'!
PASSED!

!testRun: #MarketInterfaceTest #test13CheckingOutTwiceTheSameCartRaisesError stamp: 'A.B. 11/15/2019 22:43:21'!
PASSED!

!testRun: #MarketInterfaceTest #test14CheckingOutCommunicatesCorrectlyWithMP stamp: 'A.B. 11/15/2019 22:43:21'!
PASSED!

!testRun: #MarketInterfaceTest #test15ListingPurchasesOfInvalidUserRaisesError stamp: 'A.B. 11/15/2019 22:43:21'!
PASSED!

!testRun: #MarketInterfaceTest #test16ListingPurchasesWithInvalidPasswordRaisesError stamp: 'A.B. 11/15/2019 22:43:21'!
PASSED!

!testRun: #MarketInterfaceTest #test17ListPurchasesOfNewUserIsEmpty stamp: 'A.B. 11/15/2019 22:43:21'!
PASSED!

!testRun: #MarketInterfaceTest #test18ListingOfAUserListsTheCorrectTotal stamp: 'A.B. 11/15/2019 22:43:21'!
PASSED!

!testRun: #MarketInterfaceTest #test19DifferentUsersHasDifferentPurchasesList stamp: 'A.B. 11/15/2019 22:43:21'!
PASSED!

!testRun: #MarketInterfaceTest #test20ListingOfAUserListsTheCorrectBooksAndAmounts stamp: 'A.B. 11/15/2019 22:43:21'!
PASSED!

!testRun: #MarketInterfaceTest #test21AddingBookToExpiredCartRaisesError stamp: 'A.B. 11/15/2019 22:43:21'!
PASSED!

!testRun: #MarketInterfaceTest #test22ListingExpiredCartRaisesError stamp: 'A.B. 11/15/2019 22:43:21'!
PASSED!

!testRun: #MarketInterfaceTest #test23 stamp: 'A.B. 11/15/2019 22:43:21'!
PASSED!
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 22:43:37' prior: 50787173!
test23

	| market cartID |

	market := self defaultMarket.		
	                	
	cartID := market createCartForUser: 'defaultUser' password:'passwordsupersegura'.
	
	market addToCart: cartID book: itemFactory itemSellByTheStore amount: 1.
	
	self fastForwardMinutes: 30.

	self should: [market checkOutCart: cartID withCreditCard: itemFactory notExpiredCreditCard.]  
		 raise: Error -MessageNotUnderstood  
		 withMessageText: market class errorExpiredCart.! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 22:52:39'!
createCartForDefaultUserIn: aMarket
	
	^ aMarket createCartForUser: 'defaultUser' password:'passwordsupersegura'.
	! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 22:53:30' prior: 50785784!
test01NewlyCreatedCartIsEmpty

	| cartID market |

	market := self defaultMarket.
		
	cartID := self createCartForDefaultUserIn: market.
	
	self assert: ((market listCart: cartID) isEmpty). ! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 22:54:43' prior: 50785883!
test02CreatingCartsReturnDifferentIDs

	| cartID market anotherCartID |

	market := self defaultMarket.		
		
	cartID := self createCartForDefaultUserIn: market .
	
	anotherCartID := market createCartForUser: 'anotherDefaultUser' password:'passwordsupersegura2'.
	
	self deny: (cartID = anotherCartID) . ! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 22:55:26' prior: 50785985!
test03OneBookAddedToCartIsListed

	| cartID market book |

	market := self defaultMarket.		
	
	cartID :=  self createCartForDefaultUserIn: market .
	
	book:= itemFactory itemSellByTheStore .
	market addToCart: cartID book: book amount: 1.
	
	self assert: (market listCart: cartID ) includes: book. 
	self assert: 1 equals: (market listCart: cartID ) size.! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 22:55:36' prior: 50786089!
test04MoreThanOneBookAddedAreListedCorrectly

	| cartID market book |
	
	market := self defaultMarket.		
	
	cartID :=  self createCartForDefaultUserIn: market .
	
	book:= itemFactory itemSellByTheStore .
	market addToCart: cartID book: book amount: 2.
	
	self assert: 2 equals: ((market listCart: cartID ) occurrencesOf: book). 
	self assert: 2 equals: (market listCart: cartID ) size.! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 22:55:38' prior: 50788129!
test04MoreThanOneBookAddedAreListedCorrectly

	| cartID market book |
	
	market := self defaultMarket.		
	
	cartID := self createCartForDefaultUserIn: market .
	
	book:= itemFactory itemSellByTheStore .
	market addToCart: cartID book: book amount: 2.
	
	self assert: 2 equals: ((market listCart: cartID ) occurrencesOf: book). 
	self assert: 2 equals: (market listCart: cartID ) size.! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 22:55:53' prior: 50787490!
test05DifferentCartsCanBeListedCorrectly

	| cartID market book anotherCartID |

	market := self defaultMarket.		
	
	cartID := self createCartForDefaultUserIn: market.
	
	anotherCartID := market createCartForUser: 'anotherDefaultUser' password:'passwordsupersegura2'.
	
	book:= itemFactory itemSellByTheStore .
	market addToCart: cartID book: book amount: 2.
	market addToCart: anotherCartID book: book amount: 7.
	
	self assert: 2 equals: ((market listCart: cartID ) occurrencesOf: book). 
	self assert: 2 equals: (market listCart: cartID ) size.
	
	self assert: 7 equals: ((market listCart: anotherCartID ) occurrencesOf: book). 
	self assert: 7 equals: (market listCart: anotherCartID ) size.! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 22:56:50' prior: 50787517!
test11DifferentValidCheckoutsGiveDIfferentTransactionIds

	| market book cartID anotherCartID anotherTransactionID transactionID |

	market := self defaultMarket.		
	
	cartID := self createCartForDefaultUserIn: market.
	anotherCartID := market createCartForUser: 'anotherDefaultUser' password:'passwordsupersegura2'.
	
	book := itemFactory itemSellByTheStore .
	market addToCart: cartID book: book amount: 1.
	market addToCart: anotherCartID book: book amount: 3.
	
	transactionID := market checkOutCart: cartID withCreditCard: itemFactory notExpiredCreditCard.
	anotherTransactionID := market checkOutCart: anotherCartID withCreditCard: itemFactory notExpiredCreditCard.
	
	self deny: (transactionID = anotherTransactionID) . ! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 22:57:10' prior: 50787829!
test12AddingBooksToClosedCartRaisesError

	| market book cartID |

	market := self defaultMarket.		
	                            	
	cartID := self createCartForDefaultUserIn: market.
	
	book := itemFactory itemSellByTheStore .
	market addToCart: cartID book: book amount: 1.
	
	market checkOutCart: cartID withCreditCard: itemFactory notExpiredCreditCard.
	
	self should:  [ market addToCart: cartID book: book amount: 1. ]
	 raise:  Error - MessageNotUnderstood 
	 withExceptionDo: [ :anError | 
		self assert: MarketInterface errorCheckedOutCart equals: anError messageText.
		self assert: 1 equals: (market listCart: cartID) size.
		self assert: 1 equals: ((market listCart: cartID) occurrencesOf: book).
	]
		! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 22:57:17' prior: 50787856!
test13CheckingOutTwiceTheSameCartRaisesError

	| market book cartID |

	market := self defaultMarket.		
	                            	
	cartID := self createCartForDefaultUserIn: market.
	
	book := itemFactory itemSellByTheStore .
	market addToCart: cartID book: itemFactory itemSellByTheStore amount: 1.
	
	market checkOutCart: cartID withCreditCard: itemFactory notExpiredCreditCard.
	
	self should:  [ market checkOutCart: cartID withCreditCard: itemFactory notExpiredCreditCard. ]
	 raise:  Error - MessageNotUnderstood 
	 withExceptionDo: [ :anError | 
		self assert: MarketInterface errorCheckedOutCart equals: anError messageText.
		self assert: 1 equals: (market listCart: cartID) size.
		self assert: 1 equals: ((market listCart: cartID) occurrencesOf: book).
	]
		! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 22:57:25' prior: 50787885!
test14CheckingOutCommunicatesCorrectlyWithMP

	| market cartID mpText |

	market := self defaultMarket.		
	                            	
	cartID := self createCartForDefaultUserIn: market.
	
	market addToCart: cartID book: itemFactory itemSellByTheStore amount: 1.
	
	mpText := 'MP fue utilizado'.
	mpAction := [ :anAmount :aCreditCard | self error: mpText ].
	
	self should:  [ market checkOutCart: cartID withCreditCard: itemFactory notExpiredCreditCard. ]
		 raise:  Error - MessageNotUnderstood 
		 withExceptionDo: [ :anError | self assert: mpText equals: anError messageText.].

	mpAction := [ :anAmount :aCreditCard | ].

		! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 22:57:42' prior: 50787942!
test18ListingOfAUserListsTheCorrectTotal

	| market list cartID |

	market := self defaultMarket.		
	                            	
	cartID := self createCartForDefaultUserIn: market.
	
	market addToCart: cartID book: itemFactory itemSellByTheStore amount: 1.	
	
	market checkOutCart: cartID withCreditCard: itemFactory notExpiredCreditCard.
	
	list := market listPurchasesOf: 'defaultUser' withPassword: 'passwordsupersegura'.
	
	self assert: 10 equals: list total.
! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 22:57:55' prior: 50787645!
test19DifferentUsersHasDifferentPurchasesList

	| market book cartID anotherCartID list |

	market := self defaultMarket.		
	
	cartID := self createCartForDefaultUserIn: market.
	anotherCartID := market createCartForUser: 'anotherDefaultUser' password:'passwordsupersegura2'.
	
	book := itemFactory itemSellByTheStore .
	market addToCart: cartID book: book amount: 1.
	market addToCart: anotherCartID book: book amount: 3.
	
	market checkOutCart: cartID withCreditCard: itemFactory notExpiredCreditCard.
	market checkOutCart: anotherCartID withCreditCard: itemFactory notExpiredCreditCard.
	
	list := market listPurchasesOf: 'defaultUser' withPassword: 'passwordsupersegura'.
	anotherList := market listPurchasesOf: 'anotherDefaultUser' withPassword: 'passwordsupersegura2'.
	
	self deny: (list = anotherList). 
	! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 22:58:04' prior: 50787675!
test20ListingOfAUserListsTheCorrectBooksAndAmounts

	| market list book cartID |

	market := self defaultMarket.		
	                            	
	cartID := self createCartForDefaultUserIn: market.
	
	book := itemFactory itemSellByTheStore .
	market addToCart: cartID book: book amount: 3.	
	
	market checkOutCart: cartID withCreditCard: itemFactory notExpiredCreditCard.
	
	list := market listPurchasesOf: 'defaultUser' withPassword: 'passwordsupersegura'.
	
	self assert: 3 equals: (list count: book).
! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 22:58:12' prior: 50787961!
test21AddingBookToExpiredCartRaisesError

	| market cartID |

	market := self defaultMarket.		
	
	cartID := self createCartForDefaultUserIn: market.
	
	self fastForwardMinutes: 30.
	
	self should: [market addToCart: cartID book: itemFactory itemSellByTheStore amount: 3.]  
		 raise: Error -MessageNotUnderstood  
		 withMessageText: market class errorExpiredCart.! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 22:58:20' prior: 50787157!
test22ListingExpiredCartRaisesError

	| market cartID |

	market := self defaultMarket.		
	                            	
	cartID := self createCartForDefaultUserIn: market.
	
	self fastForwardMinutes: 30.
	
	self should: [market listCart: cartID .]  
		 raise: Error -MessageNotUnderstood  
		 withMessageText: market class errorExpiredCart.! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 22:58:27' prior: 50788065!
test23

	| market cartID |

	market := self defaultMarket.		
	                	
	cartID := self createCartForDefaultUserIn: market.
	
	market addToCart: cartID book: itemFactory itemSellByTheStore amount: 1.
	
	self fastForwardMinutes: 30.

	self should: [market checkOutCart: cartID withCreditCard: itemFactory notExpiredCreditCard.]  
		 raise: Error -MessageNotUnderstood  
		 withMessageText: market class errorExpiredCart.! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 22:58:55'!
test23CheckOutOnExpiredCartRaisesError

	| market cartID |

	market := self defaultMarket.		
	                	
	cartID := self createCartForDefaultUserIn: market.
	
	market addToCart: cartID book: itemFactory itemSellByTheStore amount: 1.
	
	self fastForwardMinutes: 30.

	self should: [market checkOutCart: cartID withCreditCard: itemFactory notExpiredCreditCard.]  
		 raise: Error -MessageNotUnderstood  
		 withMessageText: market class errorExpiredCart.! !

!methodRemoval: MarketInterfaceTest #test23 stamp: 'A.B. 11/15/2019 22:58:55'!
test23

	| market cartID |

	market := self defaultMarket.		
	                	
	cartID := self createCartForDefaultUserIn: market.
	
	market addToCart: cartID book: itemFactory itemSellByTheStore amount: 1.
	
	self fastForwardMinutes: 30.

	self should: [market checkOutCart: cartID withCreditCard: itemFactory notExpiredCreditCard.]  
		 raise: Error -MessageNotUnderstood  
		 withMessageText: market class errorExpiredCart.!
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 22:59:51'!
test19DifferentUsersHaveDifferentPurchasesList

	| market book cartID anotherCartID list |

	market := self defaultMarket.		
	
	cartID := self createCartForDefaultUserIn: market.
	anotherCartID := market createCartForUser: 'anotherDefaultUser' password:'passwordsupersegura2'.
	
	book := itemFactory itemSellByTheStore .
	market addToCart: cartID book: book amount: 1.
	market addToCart: anotherCartID book: book amount: 3.
	
	market checkOutCart: cartID withCreditCard: itemFactory notExpiredCreditCard.
	market checkOutCart: anotherCartID withCreditCard: itemFactory notExpiredCreditCard.
	
	list := market listPurchasesOf: 'defaultUser' withPassword: 'passwordsupersegura'.
	anotherList := market listPurchasesOf: 'anotherDefaultUser' withPassword: 'passwordsupersegura2'.
	
	self deny: (list = anotherList). 
	! !

!methodRemoval: MarketInterfaceTest #test19DifferentUsersHasDifferentPurchasesList stamp: 'A.B. 11/15/2019 22:59:51'!
test19DifferentUsersHasDifferentPurchasesList

	| market book cartID anotherCartID list |

	market := self defaultMarket.		
	
	cartID := self createCartForDefaultUserIn: market.
	anotherCartID := market createCartForUser: 'anotherDefaultUser' password:'passwordsupersegura2'.
	
	book := itemFactory itemSellByTheStore .
	market addToCart: cartID book: book amount: 1.
	market addToCart: anotherCartID book: book amount: 3.
	
	market checkOutCart: cartID withCreditCard: itemFactory notExpiredCreditCard.
	market checkOutCart: anotherCartID withCreditCard: itemFactory notExpiredCreditCard.
	
	list := market listPurchasesOf: 'defaultUser' withPassword: 'passwordsupersegura'.
	anotherList := market listPurchasesOf: 'anotherDefaultUser' withPassword: 'passwordsupersegura2'.
	
	self deny: (list = anotherList). 
	!
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 23:00:54'!
defaultUsername

	^ 'defaultUser'.! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 23:01:16'!
defaultUsernamePassword

	^ 'passwordsupersegura'.! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 23:02:07' prior: 50788083!
createCartForDefaultUserIn: aMarket
	
	^ aMarket createCartForUser: self defaultUsername password: self defaultUsernamePassword .
	! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 23:02:15' prior: 50788507!
createCartForDefaultUserIn: aMarket
	
	^ aMarket createCartForUser: self defaultUsername 
				password: self defaultUsernamePassword .
	! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 23:07:29' prior: 50786509!
test08CreatingCartWithIncorrectPasswordRaisesError

	| market |
	
	market := self defaultMarket.		
		
	self should: [ market createCartForUser: self defaultUsername password: 'incorrect-password'. ]  
	raise: Error - MessageNotUnderstood 
	withMessageText: MarketInterface errorInvalidPassword.
! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 23:08:11' prior: 50786764!
test15ListingPurchasesOfInvalidUserRaisesError

	| market |

	market := self defaultMarket.		
                          		
	self should:  [ market listPurchasesOf: 'notAUser' withPassword: self defaultUsernamePassword . ]
	 raise:  Error - MessageNotUnderstood 
	 withExceptionDo: [ :anError | 
		self assert: MarketInterface errorInvalidUser equals: anError messageText.
	].

		! !

!testRun: #MarketInterfaceTest #test15ListingPurchasesOfInvalidUserRaisesError stamp: 'A.B. 11/15/2019 23:08:12'!
PASSED!

!testRun: #MarketInterfaceTest #test01NewlyCreatedCartIsEmpty stamp: 'A.B. 11/15/2019 23:08:12'!
PASSED!

!testRun: #MarketInterfaceTest #test02CreatingCartsReturnDifferentIDs stamp: 'A.B. 11/15/2019 23:08:12'!
PASSED!

!testRun: #MarketInterfaceTest #test03OneBookAddedToCartIsListed stamp: 'A.B. 11/15/2019 23:08:12'!
PASSED!

!testRun: #MarketInterfaceTest #test04MoreThanOneBookAddedAreListedCorrectly stamp: 'A.B. 11/15/2019 23:08:12'!
PASSED!

!testRun: #MarketInterfaceTest #test05DifferentCartsCanBeListedCorrectly stamp: 'A.B. 11/15/2019 23:08:12'!
PASSED!

!testRun: #MarketInterfaceTest #test06ListingNonExistantCartIDRaisesError stamp: 'A.B. 11/15/2019 23:08:12'!
PASSED!

!testRun: #MarketInterfaceTest #test07AddingToInvalidCartIDRaisesError stamp: 'A.B. 11/15/2019 23:08:12'!
PASSED!

!testRun: #MarketInterfaceTest #test08CreatingCartWithIncorrectPasswordRaisesError stamp: 'A.B. 11/15/2019 23:08:12'!
PASSED!

!testRun: #MarketInterfaceTest #test09CreatingCartWithInvalidUserRaisesError stamp: 'A.B. 11/15/2019 23:08:12'!
PASSED!

!testRun: #MarketInterfaceTest #test10CheckoutCartWithInvalidIdRaisesError stamp: 'A.B. 11/15/2019 23:08:12'!
PASSED!

!testRun: #MarketInterfaceTest #test11DifferentValidCheckoutsGiveDIfferentTransactionIds stamp: 'A.B. 11/15/2019 23:08:12'!
PASSED!

!testRun: #MarketInterfaceTest #test12AddingBooksToClosedCartRaisesError stamp: 'A.B. 11/15/2019 23:08:12'!
PASSED!

!testRun: #MarketInterfaceTest #test13CheckingOutTwiceTheSameCartRaisesError stamp: 'A.B. 11/15/2019 23:08:12'!
PASSED!

!testRun: #MarketInterfaceTest #test14CheckingOutCommunicatesCorrectlyWithMP stamp: 'A.B. 11/15/2019 23:08:12'!
PASSED!

!testRun: #MarketInterfaceTest #test15ListingPurchasesOfInvalidUserRaisesError stamp: 'A.B. 11/15/2019 23:08:12'!
PASSED!

!testRun: #MarketInterfaceTest #test16ListingPurchasesWithInvalidPasswordRaisesError stamp: 'A.B. 11/15/2019 23:08:12'!
PASSED!

!testRun: #MarketInterfaceTest #test17ListPurchasesOfNewUserIsEmpty stamp: 'A.B. 11/15/2019 23:08:12'!
PASSED!

!testRun: #MarketInterfaceTest #test18ListingOfAUserListsTheCorrectTotal stamp: 'A.B. 11/15/2019 23:08:12'!
PASSED!

!testRun: #MarketInterfaceTest #test19DifferentUsersHaveDifferentPurchasesList stamp: 'A.B. 11/15/2019 23:08:12'!
PASSED!

!testRun: #MarketInterfaceTest #test20ListingOfAUserListsTheCorrectBooksAndAmounts stamp: 'A.B. 11/15/2019 23:08:12'!
PASSED!

!testRun: #MarketInterfaceTest #test21AddingBookToExpiredCartRaisesError stamp: 'A.B. 11/15/2019 23:08:12'!
PASSED!

!testRun: #MarketInterfaceTest #test22ListingExpiredCartRaisesError stamp: 'A.B. 11/15/2019 23:08:12'!
PASSED!

!testRun: #MarketInterfaceTest #test23CheckOutOnExpiredCartRaisesError stamp: 'A.B. 11/15/2019 23:08:12'!
PASSED!
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 23:08:32' prior: 50787926!
test16ListingPurchasesWithInvalidPasswordRaisesError

	| market |

	market := self defaultMarket.		
                            	
	self should:  [ market listPurchasesOf: self defaultUsername withPassword:'password-invalid'. ]
	 raise:  Error - MessageNotUnderstood 
	 withExceptionDo: [ :anError | 
			self assert: MarketInterface errorInvalidPassword equals: anError messageText. ].

		! !

!testRun: #MarketInterfaceTest #test16ListingPurchasesWithInvalidPasswordRaisesError stamp: 'A.B. 11/15/2019 23:08:33'!
PASSED!

!testRun: #MarketInterfaceTest #test01NewlyCreatedCartIsEmpty stamp: 'A.B. 11/15/2019 23:08:33'!
PASSED!

!testRun: #MarketInterfaceTest #test02CreatingCartsReturnDifferentIDs stamp: 'A.B. 11/15/2019 23:08:33'!
PASSED!

!testRun: #MarketInterfaceTest #test03OneBookAddedToCartIsListed stamp: 'A.B. 11/15/2019 23:08:33'!
PASSED!

!testRun: #MarketInterfaceTest #test04MoreThanOneBookAddedAreListedCorrectly stamp: 'A.B. 11/15/2019 23:08:33'!
PASSED!

!testRun: #MarketInterfaceTest #test05DifferentCartsCanBeListedCorrectly stamp: 'A.B. 11/15/2019 23:08:33'!
PASSED!

!testRun: #MarketInterfaceTest #test06ListingNonExistantCartIDRaisesError stamp: 'A.B. 11/15/2019 23:08:33'!
PASSED!

!testRun: #MarketInterfaceTest #test07AddingToInvalidCartIDRaisesError stamp: 'A.B. 11/15/2019 23:08:33'!
PASSED!

!testRun: #MarketInterfaceTest #test08CreatingCartWithIncorrectPasswordRaisesError stamp: 'A.B. 11/15/2019 23:08:33'!
PASSED!

!testRun: #MarketInterfaceTest #test09CreatingCartWithInvalidUserRaisesError stamp: 'A.B. 11/15/2019 23:08:33'!
PASSED!

!testRun: #MarketInterfaceTest #test10CheckoutCartWithInvalidIdRaisesError stamp: 'A.B. 11/15/2019 23:08:33'!
PASSED!

!testRun: #MarketInterfaceTest #test11DifferentValidCheckoutsGiveDIfferentTransactionIds stamp: 'A.B. 11/15/2019 23:08:33'!
PASSED!

!testRun: #MarketInterfaceTest #test12AddingBooksToClosedCartRaisesError stamp: 'A.B. 11/15/2019 23:08:33'!
PASSED!

!testRun: #MarketInterfaceTest #test13CheckingOutTwiceTheSameCartRaisesError stamp: 'A.B. 11/15/2019 23:08:33'!
PASSED!

!testRun: #MarketInterfaceTest #test14CheckingOutCommunicatesCorrectlyWithMP stamp: 'A.B. 11/15/2019 23:08:33'!
PASSED!

!testRun: #MarketInterfaceTest #test15ListingPurchasesOfInvalidUserRaisesError stamp: 'A.B. 11/15/2019 23:08:33'!
PASSED!

!testRun: #MarketInterfaceTest #test16ListingPurchasesWithInvalidPasswordRaisesError stamp: 'A.B. 11/15/2019 23:08:33'!
PASSED!

!testRun: #MarketInterfaceTest #test17ListPurchasesOfNewUserIsEmpty stamp: 'A.B. 11/15/2019 23:08:33'!
PASSED!

!testRun: #MarketInterfaceTest #test18ListingOfAUserListsTheCorrectTotal stamp: 'A.B. 11/15/2019 23:08:33'!
PASSED!

!testRun: #MarketInterfaceTest #test19DifferentUsersHaveDifferentPurchasesList stamp: 'A.B. 11/15/2019 23:08:33'!
PASSED!

!testRun: #MarketInterfaceTest #test20ListingOfAUserListsTheCorrectBooksAndAmounts stamp: 'A.B. 11/15/2019 23:08:33'!
PASSED!

!testRun: #MarketInterfaceTest #test21AddingBookToExpiredCartRaisesError stamp: 'A.B. 11/15/2019 23:08:33'!
PASSED!

!testRun: #MarketInterfaceTest #test22ListingExpiredCartRaisesError stamp: 'A.B. 11/15/2019 23:08:33'!
PASSED!

!testRun: #MarketInterfaceTest #test23CheckOutOnExpiredCartRaisesError stamp: 'A.B. 11/15/2019 23:08:33'!
PASSED!
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 23:08:42' prior: 50786883!
test17ListPurchasesOfNewUserIsEmpty

	| market list |

	market := self defaultMarket.		
                            	
	list := market listPurchasesOf: self defaultUsername  withPassword:'passwordsupersegura'. 
	
	self assert: list isEmpty .
		! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 23:08:52' prior: 50788747!
test17ListPurchasesOfNewUserIsEmpty

	| market list |

	market := self defaultMarket.		
                            	
	list := market listPurchasesOf: self defaultUsername  withPassword:self defaultUsernamePassword . 
	
	self assert: list isEmpty .
		! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 23:08:55' prior: 50788759!
test17ListPurchasesOfNewUserIsEmpty

	| market list |

	market := self defaultMarket.		
                            	
	list := market listPurchasesOf: self defaultUsername  withPassword: self defaultUsernamePassword . 
	
	self assert: list isEmpty .
		! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 23:09:18' prior: 50788292!
test18ListingOfAUserListsTheCorrectTotal

	| market list cartID |

	market := self defaultMarket.		
	                            	
	cartID := self createCartForDefaultUserIn: market.
	
	market addToCart: cartID book: itemFactory itemSellByTheStore amount: 1.	
	
	market checkOutCart: cartID withCreditCard: itemFactory notExpiredCreditCard.
	
	list := market listPurchasesOf: self defaultUsername withPassword: self defaultUsernamePassword .
	
	self assert: 10 equals: list total.
! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 23:09:41' prior: 50788440!
test19DifferentUsersHaveDifferentPurchasesList

	| market book cartID anotherCartID list |

	market := self defaultMarket.		
	
	cartID := self createCartForDefaultUserIn: market.
	anotherCartID := market createCartForUser: 'anotherDefaultUser' password:'passwordsupersegura2'.
	
	book := itemFactory itemSellByTheStore .
	market addToCart: cartID book: book amount: 1.
	market addToCart: anotherCartID book: book amount: 3.
	
	market checkOutCart: cartID withCreditCard: itemFactory notExpiredCreditCard.
	market checkOutCart: anotherCartID withCreditCard: itemFactory notExpiredCreditCard.
	
	list := market listPurchasesOf: self defaultUsername withPassword: self defaultUsernamePassword .
	anotherList := market listPurchasesOf: 'anotherDefaultUser' withPassword: 'passwordsupersegura2'.
	
	self deny: (list = anotherList). 
	! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/15/2019 23:10:02' prior: 50788339!
test20ListingOfAUserListsTheCorrectBooksAndAmounts

	| market list book cartID |

	market := self defaultMarket.		
	                            	
	cartID := self createCartForDefaultUserIn: market.
	
	book := itemFactory itemSellByTheStore .
	market addToCart: cartID book: book amount: 3.	
	
	market checkOutCart: cartID withCreditCard: itemFactory notExpiredCreditCard.
	
	list := market listPurchasesOf: self defaultUsername withPassword: self defaultUsernamePassword .
	
	self assert: 3 equals: (list count: book).
! !

!testRun: #MarketInterfaceTest #test20ListingOfAUserListsTheCorrectBooksAndAmounts stamp: 'A.B. 11/15/2019 23:10:04'!
PASSED!

!testRun: #MarketInterfaceTest #test01NewlyCreatedCartIsEmpty stamp: 'A.B. 11/15/2019 23:10:04'!
PASSED!

!testRun: #MarketInterfaceTest #test02CreatingCartsReturnDifferentIDs stamp: 'A.B. 11/15/2019 23:10:04'!
PASSED!

!testRun: #MarketInterfaceTest #test03OneBookAddedToCartIsListed stamp: 'A.B. 11/15/2019 23:10:04'!
PASSED!

!testRun: #MarketInterfaceTest #test04MoreThanOneBookAddedAreListedCorrectly stamp: 'A.B. 11/15/2019 23:10:04'!
PASSED!

!testRun: #MarketInterfaceTest #test05DifferentCartsCanBeListedCorrectly stamp: 'A.B. 11/15/2019 23:10:04'!
PASSED!

!testRun: #MarketInterfaceTest #test06ListingNonExistantCartIDRaisesError stamp: 'A.B. 11/15/2019 23:10:04'!
PASSED!

!testRun: #MarketInterfaceTest #test07AddingToInvalidCartIDRaisesError stamp: 'A.B. 11/15/2019 23:10:04'!
PASSED!

!testRun: #MarketInterfaceTest #test08CreatingCartWithIncorrectPasswordRaisesError stamp: 'A.B. 11/15/2019 23:10:04'!
PASSED!

!testRun: #MarketInterfaceTest #test09CreatingCartWithInvalidUserRaisesError stamp: 'A.B. 11/15/2019 23:10:04'!
PASSED!

!testRun: #MarketInterfaceTest #test10CheckoutCartWithInvalidIdRaisesError stamp: 'A.B. 11/15/2019 23:10:04'!
PASSED!

!testRun: #MarketInterfaceTest #test11DifferentValidCheckoutsGiveDIfferentTransactionIds stamp: 'A.B. 11/15/2019 23:10:04'!
PASSED!

!testRun: #MarketInterfaceTest #test12AddingBooksToClosedCartRaisesError stamp: 'A.B. 11/15/2019 23:10:04'!
PASSED!

!testRun: #MarketInterfaceTest #test13CheckingOutTwiceTheSameCartRaisesError stamp: 'A.B. 11/15/2019 23:10:04'!
PASSED!

!testRun: #MarketInterfaceTest #test14CheckingOutCommunicatesCorrectlyWithMP stamp: 'A.B. 11/15/2019 23:10:04'!
PASSED!

!testRun: #MarketInterfaceTest #test15ListingPurchasesOfInvalidUserRaisesError stamp: 'A.B. 11/15/2019 23:10:04'!
PASSED!

!testRun: #MarketInterfaceTest #test16ListingPurchasesWithInvalidPasswordRaisesError stamp: 'A.B. 11/15/2019 23:10:04'!
PASSED!

!testRun: #MarketInterfaceTest #test17ListPurchasesOfNewUserIsEmpty stamp: 'A.B. 11/15/2019 23:10:04'!
PASSED!

!testRun: #MarketInterfaceTest #test18ListingOfAUserListsTheCorrectTotal stamp: 'A.B. 11/15/2019 23:10:04'!
PASSED!

!testRun: #MarketInterfaceTest #test19DifferentUsersHaveDifferentPurchasesList stamp: 'A.B. 11/15/2019 23:10:04'!
PASSED!

!testRun: #MarketInterfaceTest #test20ListingOfAUserListsTheCorrectBooksAndAmounts stamp: 'A.B. 11/15/2019 23:10:04'!
PASSED!

!testRun: #MarketInterfaceTest #test21AddingBookToExpiredCartRaisesError stamp: 'A.B. 11/15/2019 23:10:04'!
PASSED!

!testRun: #MarketInterfaceTest #test22ListingExpiredCartRaisesError stamp: 'A.B. 11/15/2019 23:10:04'!
PASSED!

!testRun: #MarketInterfaceTest #test23CheckOutOnExpiredCartRaisesError stamp: 'A.B. 11/15/2019 23:10:04'!
PASSED!

----QUIT----(15 November 2019 23:10:33) CuisUniversity-3938.image priorSource: 14531879!

----STARTUP---- (16 November 2019 12:00:00) as /home/alejandra/facultad/isw1/cuis/TusLibros/CuisUniversity-3938.image!

!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/16/2019 12:33:49' prior: 50783138!
defaultUserPasswords

	| aDict |
	
	aDict := Dictionary new.
	aDict at: self defaultUsername put: self defaultUsernamePassword .
	aDict at: 'anotherDefaultUser' put: 'passwordsupersegura2'.

	
	^ aDict.! !
!MarketInterface methodsFor: 'as yet unclassified' stamp: 'A.B. 11/16/2019 12:38:47'!
pvtAssertNonExpiredCart: aCart
	
	| creationTime nowTime |
	nowTime := timeGuru time.
	creationTime := cartCreationTime at: aCart .
	
	((nowTime - creationTime ) >= (Duration minutes: 30))  ifTrue: [self error: self class errorExpiredCart ].
	! !
!MarketInterface methodsFor: 'as yet unclassified' stamp: 'A.B. 11/16/2019 12:39:19'!
pvtAssertNonExpiredCartID: aCartID
	
	| creationTime nowTime |
	nowTime := timeGuru time.
	creationTime := cartCreationTime at: aCartID .
	
	((nowTime - creationTime ) >= (Duration minutes: 30))  ifTrue: [self error: self class errorExpiredCart ].
	! !

!methodRemoval: MarketInterface #pvtAssertNonExpiredCart: stamp: 'A.B. 11/16/2019 12:39:26'!
pvtAssertNonExpiredCart: aCart
	
	| creationTime nowTime |
	nowTime := timeGuru time.
	creationTime := cartCreationTime at: aCart .
	
	((nowTime - creationTime ) >= (Duration minutes: 30))  ifTrue: [self error: self class errorExpiredCart ].
	!
!MarketInterface methodsFor: 'as yet unclassified' stamp: 'A.B. 11/16/2019 12:39:49' prior: 50785069!
addToCart: aCartID book: aBook amount: anAmount

	| cart |
	
	cart := cartsByID at: aCartID ifAbsent: [self error: self class errorNonExistantCart ] .
	
	self pvtAssertNonExpiredCartID: aCartID .
		
	(checkedOutCarts includes: aCartID) ifTrue: [ self error: self class errorCheckedOutCart ].
	
	cart add: anAmount of: aBook. ! !
!MarketInterface methodsFor: 'as yet unclassified' stamp: 'A.B. 11/16/2019 12:40:20' prior: 50785659!
checkOutCart: aCartID withCreditCard: aCreditCard

	| aCart cashier cartOwner |
	
	aCart := cartsByID at: aCartID ifAbsent: [ self error: self class errorNonExistantCart. ].
	
	(checkedOutCarts includes: aCartID) ifTrue: [ self error: self class errorCheckedOutCart ].
	
	self pvtAssertNonExpiredCartID: aCartID .
	
	cartOwner := cartIdOwners at: aCartID.
	
	cashier := Cashier 
		toCheckout: aCart 
		charging: aCreditCard
		throught: merchantProcessor
		on: timeGuru today
		registeringOn: (salesBooks at: cartOwner).
	
	cashier checkOut.
	
	checkedOutCarts add: aCartID.
	
	currentTransactionID := currentTransactionID + 1.
	^ currentTransactionID.

	
	

! !
!MarketInterface methodsFor: 'as yet unclassified' stamp: 'A.B. 11/16/2019 12:40:39' prior: 50785498!
listCart: aCartID 

	| cart |
	
	cart := cartsByID at: aCartID ifAbsent: [self error: self class errorNonExistantCart ].
	
	self pvtAssertNonExpiredCartID: aCartID .

	^ cart listItems .! !
!MarketInterface methodsFor: 'as yet unclassified' stamp: 'A.B. 11/16/2019 12:45:55' prior: 50788969!
pvtAssertNonExpiredCartID: aCartID
	
	| creationTime nowTime |
	
	nowTime := timeGuru time.
	creationTime := cartCreationTime at: aCartID .
	
	((nowTime - creationTime ) >= (Duration minutes: 30))  ifTrue: [self error: self class errorExpiredCart ].
	! !
!MarketInterface methodsFor: 'as yet unclassified' stamp: 'A.B. 11/16/2019 12:48:43'!
autenticateUser: aUser password: aPassword 
	
	| savedPassword |

	savedPassword := userPasswords at: aUser ifAbsent: [ ^ self error: self class errorInvalidUser ].  
	
	(savedPassword = aPassword) ifFalse: [ ^ self error: self class errorInvalidPassword ].
! !
!MarketInterface methodsFor: 'as yet unclassified' stamp: 'A.B. 11/16/2019 12:48:52'!
pvtAutenticateUser: aUser password: aPassword 
	
	| savedPassword |

	savedPassword := userPasswords at: aUser ifAbsent: [ ^ self error: self class errorInvalidUser ].  
	
	(savedPassword = aPassword) ifFalse: [ ^ self error: self class errorInvalidPassword ].
! !

!methodRemoval: MarketInterface #autenticateUser:password: stamp: 'A.B. 11/16/2019 12:48:52'!
autenticateUser: aUser password: aPassword 
	
	| savedPassword |

	savedPassword := userPasswords at: aUser ifAbsent: [ ^ self error: self class errorInvalidUser ].  
	
	(savedPassword = aPassword) ifFalse: [ ^ self error: self class errorInvalidPassword ].
!
!MarketInterface methodsFor: 'as yet unclassified' stamp: 'A.B. 11/16/2019 12:49:32' prior: 50784970!
createCartForUser: aUser password: aPassword 
	
	| cart |

	self pvtAutenticateUser: aUser password: aPassword. 
	
	cart := Cart acceptingItemsOf: priceList.
	
	currentID := currentID + 1.
	
	cartsByID at: currentID put: cart.
	cartIdOwners at: currentID put: aUser. 
	cartCreationTime at: currentID put: timeGuru time.
	
	^ currentID.! !
!MarketInterface methodsFor: 'as yet unclassified' stamp: 'A.B. 11/16/2019 12:49:56' prior: 50783904!
listPurchasesOf: aUser withPassword: aPassword

	self pvtAutenticateUser: aUser password: aPassword .
		
	^ salesBooks at: aUser.! !
!MarketInterface methodsFor: 'as yet unclassified' stamp: 'A.B. 11/16/2019 13:28:48'!
pvtAssertCartIsNotCheckedOut: aCartID
		
	(checkedOutCarts includes: aCartID) ifTrue: [ self error: self class errorCheckedOutCart ].
! !
!MarketInterface methodsFor: 'as yet unclassified' stamp: 'A.B. 11/16/2019 13:29:12' prior: 50788991!
addToCart: aCartID book: aBook amount: anAmount

	| cart |
	
	cart := cartsByID at: aCartID ifAbsent: [self error: self class errorNonExistantCart ] .
	
	self pvtAssertNonExpiredCartID: aCartID .
		
	self pvtAssertCartIsNotCheckedOut: aCartID .
	
	cart add: anAmount of: aBook. ! !
!MarketInterface methodsFor: 'as yet unclassified' stamp: 'A.B. 11/16/2019 13:29:35' prior: 50789005!
checkOutCart: aCartID withCreditCard: aCreditCard

	| aCart cashier cartOwner |
	
	aCart := cartsByID at: aCartID ifAbsent: [ self error: self class errorNonExistantCart. ].
	
	self pvtAssertCartIsNotCheckedOut: aCartID .
	
	self pvtAssertNonExpiredCartID: aCartID .
	
	cartOwner := cartIdOwners at: aCartID.
	
	cashier := Cashier 
		toCheckout: aCart 
		charging: aCreditCard
		throught: merchantProcessor
		on: timeGuru today
		registeringOn: (salesBooks at: cartOwner).
	
	cashier checkOut.
	
	checkedOutCarts add: aCartID.
	
	currentTransactionID := currentTransactionID + 1.
	^ currentTransactionID.

	
	

! !

!testRun: #MarketInterfaceTest #test01NewlyCreatedCartIsEmpty stamp: 'A.B. 11/16/2019 13:29:46'!
PASSED!

!testRun: #MarketInterfaceTest #test02CreatingCartsReturnDifferentIDs stamp: 'A.B. 11/16/2019 13:29:46'!
PASSED!

!testRun: #MarketInterfaceTest #test03OneBookAddedToCartIsListed stamp: 'A.B. 11/16/2019 13:29:46'!
PASSED!

!testRun: #MarketInterfaceTest #test04MoreThanOneBookAddedAreListedCorrectly stamp: 'A.B. 11/16/2019 13:29:46'!
PASSED!

!testRun: #MarketInterfaceTest #test05DifferentCartsCanBeListedCorrectly stamp: 'A.B. 11/16/2019 13:29:46'!
PASSED!

!testRun: #MarketInterfaceTest #test06ListingNonExistantCartIDRaisesError stamp: 'A.B. 11/16/2019 13:29:46'!
PASSED!

!testRun: #MarketInterfaceTest #test07AddingToInvalidCartIDRaisesError stamp: 'A.B. 11/16/2019 13:29:46'!
PASSED!

!testRun: #MarketInterfaceTest #test08CreatingCartWithIncorrectPasswordRaisesError stamp: 'A.B. 11/16/2019 13:29:46'!
PASSED!

!testRun: #MarketInterfaceTest #test09CreatingCartWithInvalidUserRaisesError stamp: 'A.B. 11/16/2019 13:29:46'!
PASSED!

!testRun: #MarketInterfaceTest #test10CheckoutCartWithInvalidIdRaisesError stamp: 'A.B. 11/16/2019 13:29:46'!
PASSED!

!testRun: #MarketInterfaceTest #test11DifferentValidCheckoutsGiveDIfferentTransactionIds stamp: 'A.B. 11/16/2019 13:29:46'!
PASSED!

!testRun: #MarketInterfaceTest #test12AddingBooksToClosedCartRaisesError stamp: 'A.B. 11/16/2019 13:29:46'!
PASSED!

!testRun: #MarketInterfaceTest #test13CheckingOutTwiceTheSameCartRaisesError stamp: 'A.B. 11/16/2019 13:29:46'!
PASSED!

!testRun: #MarketInterfaceTest #test14CheckingOutCommunicatesCorrectlyWithMP stamp: 'A.B. 11/16/2019 13:29:46'!
PASSED!

!testRun: #MarketInterfaceTest #test15ListingPurchasesOfInvalidUserRaisesError stamp: 'A.B. 11/16/2019 13:29:46'!
PASSED!

!testRun: #MarketInterfaceTest #test16ListingPurchasesWithInvalidPasswordRaisesError stamp: 'A.B. 11/16/2019 13:29:46'!
PASSED!

!testRun: #MarketInterfaceTest #test17ListPurchasesOfNewUserIsEmpty stamp: 'A.B. 11/16/2019 13:29:46'!
PASSED!

!testRun: #MarketInterfaceTest #test18ListingOfAUserListsTheCorrectTotal stamp: 'A.B. 11/16/2019 13:29:46'!
PASSED!

!testRun: #MarketInterfaceTest #test19DifferentUsersHaveDifferentPurchasesList stamp: 'A.B. 11/16/2019 13:29:46'!
PASSED!

!testRun: #MarketInterfaceTest #test20ListingOfAUserListsTheCorrectBooksAndAmounts stamp: 'A.B. 11/16/2019 13:29:46'!
PASSED!

!testRun: #MarketInterfaceTest #test21AddingBookToExpiredCartRaisesError stamp: 'A.B. 11/16/2019 13:29:46'!
PASSED!

!testRun: #MarketInterfaceTest #test22ListingExpiredCartRaisesError stamp: 'A.B. 11/16/2019 13:29:46'!
PASSED!

!testRun: #MarketInterfaceTest #test23CheckOutOnExpiredCartRaisesError stamp: 'A.B. 11/16/2019 13:29:46'!
PASSED!
!MarketInterface methodsFor: 'as yet unclassified' stamp: 'A.B. 11/16/2019 13:32:10'!
pvtSaveCart: aCart of: aUser
	
	currentID := currentID + 1.
	
	cartsByID at: currentID put: aCart .
	cartIdOwners at: currentID put: aUser. 
	cartCreationTime at: currentID put: timeGuru time.
	! !
!MarketInterface methodsFor: 'as yet unclassified' stamp: 'A.B. 11/16/2019 13:33:02'!
pvtAvailableID
	
	currentID := currentID + 1.
	
	^ currentID ! !
!MarketInterface methodsFor: 'as yet unclassified' stamp: 'A.B. 11/16/2019 13:34:32' prior: 50789233!
pvtSaveCart: aCart of: aUser
	
	| cartID |
	cartID := self pvtAvailableID .
	
	cartsByID at: cartID put: aCart .
	cartIdOwners at: cartID put: aUser. 
	cartCreationTime at: cartID put: timeGuru time.
	! !
!MarketInterface methodsFor: 'as yet unclassified' stamp: 'A.B. 11/16/2019 13:34:36' prior: 50789248!
pvtSaveCart: aCart of: aUser
	
	| cartID |
	
	cartID := self pvtAvailableID .
	
	cartsByID at: cartID put: aCart .
	cartIdOwners at: cartID put: aUser. 
	cartCreationTime at: cartID put: timeGuru time.
	! !
!MarketInterface methodsFor: 'as yet unclassified' stamp: 'A.B. 11/16/2019 13:35:22' prior: 50789084!
createCartForUser: aUser password: aPassword 
	
	| cart |

	self pvtAutenticateUser: aUser password: aPassword. 
	
	cart := Cart acceptingItemsOf: priceList.
	
	self pvtSaveCart: cart of: aUser.
	
	^ currentID.! !
!MarketInterface methodsFor: 'as yet unclassified' stamp: 'A.B. 11/16/2019 13:37:53'!
pvtAssertCartIDIsNotExpired: aCartID
	
	| creationTime nowTime |
	
	nowTime := timeGuru time.
	creationTime := cartCreationTime at: aCartID .
	
	((nowTime - creationTime ) >= (Duration minutes: 30))  ifTrue: [self error: self class errorExpiredCart ].
	! !
!MarketInterface methodsFor: 'as yet unclassified' stamp: 'A.B. 11/16/2019 13:37:53' prior: 50789125!
checkOutCart: aCartID withCreditCard: aCreditCard

	| aCart cashier cartOwner |
	
	aCart := cartsByID at: aCartID ifAbsent: [ self error: self class errorNonExistantCart. ].
	
	self pvtAssertCartIsNotCheckedOut: aCartID .
	
	self pvtAssertCartIDIsNotExpired: aCartID .
	
	cartOwner := cartIdOwners at: aCartID.
	
	cashier := Cashier 
		toCheckout: aCart 
		charging: aCreditCard
		throught: merchantProcessor
		on: timeGuru today
		registeringOn: (salesBooks at: cartOwner).
	
	cashier checkOut.
	
	checkedOutCarts add: aCartID.
	
	currentTransactionID := currentTransactionID + 1.
	^ currentTransactionID.

	
	

! !
!MarketInterface methodsFor: 'as yet unclassified' stamp: 'A.B. 11/16/2019 13:37:53' prior: 50789029!
listCart: aCartID 

	| cart |
	
	cart := cartsByID at: aCartID ifAbsent: [self error: self class errorNonExistantCart ].
	
	self pvtAssertCartIDIsNotExpired: aCartID .

	^ cart listItems .! !
!MarketInterface methodsFor: 'as yet unclassified' stamp: 'A.B. 11/16/2019 13:37:53' prior: 50789113!
addToCart: aCartID book: aBook amount: anAmount

	| cart |
	
	cart := cartsByID at: aCartID ifAbsent: [self error: self class errorNonExistantCart ] .
	
	self pvtAssertCartIDIsNotExpired: aCartID .
		
	self pvtAssertCartIsNotCheckedOut: aCartID .
	
	cart add: anAmount of: aBook. ! !

!methodRemoval: MarketInterface #pvtAssertNonExpiredCartID: stamp: 'A.B. 11/16/2019 13:37:53'!
pvtAssertNonExpiredCartID: aCartID
	
	| creationTime nowTime |
	
	nowTime := timeGuru time.
	creationTime := cartCreationTime at: aCartID .
	
	((nowTime - creationTime ) >= (Duration minutes: 30))  ifTrue: [self error: self class errorExpiredCart ].
	!
!MarketInterface methodsFor: 'as yet unclassified' stamp: 'A.B. 11/16/2019 13:39:20'!
pvtGetCartFromID: aCartID
	
	^ cartsByID at: aCartID ifAbsent: [ self error: self class errorNonExistantCart. ].
	! !
!MarketInterface methodsFor: 'as yet unclassified' stamp: 'A.B. 11/16/2019 13:39:45' prior: 50789323!
addToCart: aCartID book: aBook amount: anAmount

	| cart |
	
	cart := self pvtGetCartFromID: aCartID.
	
	self pvtAssertCartIDIsNotExpired: aCartID .
		
	self pvtAssertCartIsNotCheckedOut: aCartID .
	
	cart add: anAmount of: aBook. ! !
!MarketInterface methodsFor: 'as yet unclassified' stamp: 'A.B. 11/16/2019 13:39:57' prior: 50789290!
checkOutCart: aCartID withCreditCard: aCreditCard

	| aCart cashier cartOwner |
	
	aCart := self pvtGetCartFromID: aCartID.
		
	self pvtAssertCartIsNotCheckedOut: aCartID .
	
	self pvtAssertCartIDIsNotExpired: aCartID .
	
	cartOwner := cartIdOwners at: aCartID.
	
	cashier := Cashier 
		toCheckout: aCart 
		charging: aCreditCard
		throught: merchantProcessor
		on: timeGuru today
		registeringOn: (salesBooks at: cartOwner).
	
	cashier checkOut.
	
	checkedOutCarts add: aCartID.
	
	currentTransactionID := currentTransactionID + 1.
	^ currentTransactionID.

	
	

! !
!MarketInterface methodsFor: 'as yet unclassified' stamp: 'A.B. 11/16/2019 13:40:21' prior: 50789364!
checkOutCart: aCartID withCreditCard: aCreditCard

	| cart cashier cartOwner |
	
	cart := self pvtGetCartFromID: aCartID.
		
	self pvtAssertCartIsNotCheckedOut: aCartID .
	
	self pvtAssertCartIDIsNotExpired: aCartID .
	
	cartOwner := cartIdOwners at: aCartID.
	
	cashier := Cashier 
		toCheckout: cart 
		charging: aCreditCard
		throught: merchantProcessor
		on: timeGuru today
		registeringOn: (salesBooks at: cartOwner).
	
	cashier checkOut.
	
	checkedOutCarts add: aCartID.
	
	currentTransactionID := currentTransactionID + 1.
	^ currentTransactionID.

	
	

! !
!MarketInterface methodsFor: 'as yet unclassified' stamp: 'A.B. 11/16/2019 13:40:35' prior: 50789313!
listCart: aCartID 

	| cart |
	
	cart := self pvtGetCartFromID: aCartID.
		
	self pvtAssertCartIDIsNotExpired: aCartID .

	^ cart listItems .! !

!methodRemoval: Cashier #createSale stamp: 'A.B. 11/16/2019 13:46:26'!
createSale

	^ Sale of: total withItems: cart listItems.
!
!Cashier methodsFor: 'checkout - private' stamp: 'A.B. 11/16/2019 13:46:48'!
pvtCalculateTotal

	total := cart total.
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'A.B. 11/16/2019 13:46:48' prior: 50783707!
checkOut

	self pvtCalculateTotal.
	self debitTotal.
	self registerSale.

	^ total! !

!methodRemoval: Cashier #calculateTotal stamp: 'A.B. 11/16/2019 13:46:48'!
calculateTotal

	total := cart total.
	!
!Cashier methodsFor: 'checkout - private' stamp: 'A.B. 11/16/2019 13:47:03'!
pvtDebitTotal

	merchantProcessor debit: total from: creditCard.
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'A.B. 11/16/2019 13:47:03' prior: 50789423!
checkOut

	self pvtCalculateTotal.
	self pvtDebitTotal.
	self registerSale.

	^ total! !

!methodRemoval: Cashier #debitTotal stamp: 'A.B. 11/16/2019 13:47:03'!
debitTotal

	merchantProcessor debit: total from: creditCard.
	!
!Cashier methodsFor: 'checkout - private' stamp: 'A.B. 11/16/2019 13:47:14'!
pvtRegisterSale

	salesBook add: (Sale ofItems: cart listItems withTotal: cart total).! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'A.B. 11/16/2019 13:47:14' prior: 50789438!
checkOut

	self pvtCalculateTotal.
	self pvtDebitTotal.
	self pvtRegisterSale.

	^ total! !

!methodRemoval: Cashier #registerSale stamp: 'A.B. 11/16/2019 13:47:14'!
registerSale

	salesBook add: (Sale ofItems: cart listItems withTotal: cart total).!

|tope d1 d2 d3|

d1 := DateAndTime year: 2019 month: 11 day: 20 hour: 18 minute: 0. 
d2 := DateAndTime year: 2019 month: 11 day: 20 hour: 18 minute: 30.  
d3 := DateAndTime year: 2020 month: 11 day: 20 hour: 18 minute: 30.  


tope := Duration minutes: 30.
(d1-d3) >= tope. 

(d1+tope).

d1 monthIndex .!

|tope d1 d2 d3|

d1 := DateAndTime year: 2019 month: 11 day: 20 hour: 18 minute: 0. 
d2 := DateAndTime year: 2019 month: 11 day: 20 hour: 18 minute: 30.  
d3 := DateAndTime year: 2020 month: 11 day: 20 hour: 18 minute: 30.  


tope := Duration minutes: 30.
(d1-d3) >= tope. 

(d1+tope).

d1 yearNumber .
!
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/16/2019 14:01:59'!
dateAndTime

	^ time.! !
!MarketInterface methodsFor: 'as yet unclassified' stamp: 'A.B. 11/16/2019 14:01:59' prior: 50789258!
pvtSaveCart: aCart of: aUser
	
	| cartID |
	
	cartID := self pvtAvailableID .
	
	cartsByID at: cartID put: aCart .
	cartIdOwners at: cartID put: aUser. 
	cartCreationTime at: cartID put: timeGuru dateAndTime.
	! !
!MarketInterface methodsFor: 'as yet unclassified' stamp: 'A.B. 11/16/2019 14:01:59' prior: 50789278!
pvtAssertCartIDIsNotExpired: aCartID
	
	| creationTime nowTime |
	
	nowTime := timeGuru dateAndTime.
	creationTime := cartCreationTime at: aCartID .
	
	((nowTime - creationTime ) >= (Duration minutes: 30))  ifTrue: [self error: self class errorExpiredCart ].
	! !

!methodRemoval: MarketInterfaceTest #time stamp: 'A.B. 11/16/2019 14:01:59'!
time

	^ time.!
!MarketInterface methodsFor: 'as yet unclassified' stamp: 'A.B. 11/16/2019 14:02:36' prior: 50789385!
checkOutCart: aCartID withCreditCard: aCreditCard

	| cart cashier cartOwner |
	
	cart := self pvtGetCartFromID: aCartID.
		
	self pvtAssertCartIsNotCheckedOut: aCartID .
	
	self pvtAssertCartIDIsNotExpired: aCartID .
	
	cartOwner := cartIdOwners at: aCartID.
	
	cashier := Cashier 
		toCheckout: cart 
		charging: aCreditCard
		throught: merchantProcessor
		on: timeGuru dateAndTime 
		registeringOn: (salesBooks at: cartOwner).
	
	cashier checkOut.
	
	checkedOutCarts add: aCartID.
	
	currentTransactionID := currentTransactionID + 1.
	^ currentTransactionID.

	
	

! !

!testRun: #MarketInterfaceTest #test01NewlyCreatedCartIsEmpty stamp: 'A.B. 11/16/2019 14:02:40'!
PASSED!

!testRun: #MarketInterfaceTest #test02CreatingCartsReturnDifferentIDs stamp: 'A.B. 11/16/2019 14:02:40'!
PASSED!

!testRun: #MarketInterfaceTest #test03OneBookAddedToCartIsListed stamp: 'A.B. 11/16/2019 14:02:40'!
PASSED!

!testRun: #MarketInterfaceTest #test04MoreThanOneBookAddedAreListedCorrectly stamp: 'A.B. 11/16/2019 14:02:40'!
PASSED!

!testRun: #MarketInterfaceTest #test05DifferentCartsCanBeListedCorrectly stamp: 'A.B. 11/16/2019 14:02:40'!
PASSED!

!testRun: #MarketInterfaceTest #test06ListingNonExistantCartIDRaisesError stamp: 'A.B. 11/16/2019 14:02:40'!
PASSED!

!testRun: #MarketInterfaceTest #test07AddingToInvalidCartIDRaisesError stamp: 'A.B. 11/16/2019 14:02:40'!
PASSED!

!testRun: #MarketInterfaceTest #test08CreatingCartWithIncorrectPasswordRaisesError stamp: 'A.B. 11/16/2019 14:02:40'!
PASSED!

!testRun: #MarketInterfaceTest #test09CreatingCartWithInvalidUserRaisesError stamp: 'A.B. 11/16/2019 14:02:40'!
PASSED!

!testRun: #MarketInterfaceTest #test10CheckoutCartWithInvalidIdRaisesError stamp: 'A.B. 11/16/2019 14:02:40'!
PASSED!

!testRun: #MarketInterfaceTest #test11DifferentValidCheckoutsGiveDIfferentTransactionIds stamp: 'A.B. 11/16/2019 14:02:40'!
PASSED!

!testRun: #MarketInterfaceTest #test12AddingBooksToClosedCartRaisesError stamp: 'A.B. 11/16/2019 14:02:40'!
PASSED!

!testRun: #MarketInterfaceTest #test13CheckingOutTwiceTheSameCartRaisesError stamp: 'A.B. 11/16/2019 14:02:40'!
PASSED!

!testRun: #MarketInterfaceTest #test14CheckingOutCommunicatesCorrectlyWithMP stamp: 'A.B. 11/16/2019 14:02:40'!
PASSED!

!testRun: #MarketInterfaceTest #test15ListingPurchasesOfInvalidUserRaisesError stamp: 'A.B. 11/16/2019 14:02:40'!
PASSED!

!testRun: #MarketInterfaceTest #test16ListingPurchasesWithInvalidPasswordRaisesError stamp: 'A.B. 11/16/2019 14:02:40'!
PASSED!

!testRun: #MarketInterfaceTest #test17ListPurchasesOfNewUserIsEmpty stamp: 'A.B. 11/16/2019 14:02:40'!
PASSED!

!testRun: #MarketInterfaceTest #test18ListingOfAUserListsTheCorrectTotal stamp: 'A.B. 11/16/2019 14:02:40'!
PASSED!

!testRun: #MarketInterfaceTest #test19DifferentUsersHaveDifferentPurchasesList stamp: 'A.B. 11/16/2019 14:02:40'!
PASSED!

!testRun: #MarketInterfaceTest #test20ListingOfAUserListsTheCorrectBooksAndAmounts stamp: 'A.B. 11/16/2019 14:02:40'!
PASSED!

!testRun: #MarketInterfaceTest #test21AddingBookToExpiredCartRaisesError stamp: 'A.B. 11/16/2019 14:02:40'!
PASSED!

!testRun: #MarketInterfaceTest #test22ListingExpiredCartRaisesError stamp: 'A.B. 11/16/2019 14:02:40'!
PASSED!

!testRun: #MarketInterfaceTest #test23CheckOutOnExpiredCartRaisesError stamp: 'A.B. 11/16/2019 14:02:40'!
PASSED!

!methodRemoval: MarketInterfaceTest #today stamp: 'A.B. 11/16/2019 14:03:05'!
today

	^ itemFactory today.!

!testRun: #MarketInterfaceTest #test01NewlyCreatedCartIsEmpty stamp: 'A.B. 11/16/2019 14:03:08'!
PASSED!

!testRun: #MarketInterfaceTest #test02CreatingCartsReturnDifferentIDs stamp: 'A.B. 11/16/2019 14:03:08'!
PASSED!

!testRun: #MarketInterfaceTest #test03OneBookAddedToCartIsListed stamp: 'A.B. 11/16/2019 14:03:08'!
PASSED!

!testRun: #MarketInterfaceTest #test04MoreThanOneBookAddedAreListedCorrectly stamp: 'A.B. 11/16/2019 14:03:08'!
PASSED!

!testRun: #MarketInterfaceTest #test05DifferentCartsCanBeListedCorrectly stamp: 'A.B. 11/16/2019 14:03:08'!
PASSED!

!testRun: #MarketInterfaceTest #test06ListingNonExistantCartIDRaisesError stamp: 'A.B. 11/16/2019 14:03:08'!
PASSED!

!testRun: #MarketInterfaceTest #test07AddingToInvalidCartIDRaisesError stamp: 'A.B. 11/16/2019 14:03:08'!
PASSED!

!testRun: #MarketInterfaceTest #test08CreatingCartWithIncorrectPasswordRaisesError stamp: 'A.B. 11/16/2019 14:03:08'!
PASSED!

!testRun: #MarketInterfaceTest #test09CreatingCartWithInvalidUserRaisesError stamp: 'A.B. 11/16/2019 14:03:08'!
PASSED!

!testRun: #MarketInterfaceTest #test10CheckoutCartWithInvalidIdRaisesError stamp: 'A.B. 11/16/2019 14:03:08'!
PASSED!

!testRun: #MarketInterfaceTest #test11DifferentValidCheckoutsGiveDIfferentTransactionIds stamp: 'A.B. 11/16/2019 14:03:08'!
PASSED!

!testRun: #MarketInterfaceTest #test12AddingBooksToClosedCartRaisesError stamp: 'A.B. 11/16/2019 14:03:08'!
PASSED!

!testRun: #MarketInterfaceTest #test13CheckingOutTwiceTheSameCartRaisesError stamp: 'A.B. 11/16/2019 14:03:08'!
PASSED!

!testRun: #MarketInterfaceTest #test14CheckingOutCommunicatesCorrectlyWithMP stamp: 'A.B. 11/16/2019 14:03:08'!
PASSED!

!testRun: #MarketInterfaceTest #test15ListingPurchasesOfInvalidUserRaisesError stamp: 'A.B. 11/16/2019 14:03:08'!
PASSED!

!testRun: #MarketInterfaceTest #test16ListingPurchasesWithInvalidPasswordRaisesError stamp: 'A.B. 11/16/2019 14:03:08'!
PASSED!

!testRun: #MarketInterfaceTest #test17ListPurchasesOfNewUserIsEmpty stamp: 'A.B. 11/16/2019 14:03:08'!
PASSED!

!testRun: #MarketInterfaceTest #test18ListingOfAUserListsTheCorrectTotal stamp: 'A.B. 11/16/2019 14:03:08'!
PASSED!

!testRun: #MarketInterfaceTest #test19DifferentUsersHaveDifferentPurchasesList stamp: 'A.B. 11/16/2019 14:03:08'!
PASSED!

!testRun: #MarketInterfaceTest #test20ListingOfAUserListsTheCorrectBooksAndAmounts stamp: 'A.B. 11/16/2019 14:03:08'!
PASSED!

!testRun: #MarketInterfaceTest #test21AddingBookToExpiredCartRaisesError stamp: 'A.B. 11/16/2019 14:03:08'!
PASSED!

!testRun: #MarketInterfaceTest #test22ListingExpiredCartRaisesError stamp: 'A.B. 11/16/2019 14:03:08'!
PASSED!

!testRun: #MarketInterfaceTest #test23CheckOutOnExpiredCartRaisesError stamp: 'A.B. 11/16/2019 14:03:08'!
PASSED!

!classDefinition: #MarketInterfaceTest category: #TusLibros stamp: 'A.B. 11/16/2019 14:03:38'!
TestCase subclass: #MarketInterfaceTest
	instanceVariableNames: 'itemFactory mpAction anotherList dateAndTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/16/2019 14:03:38' prior: 50784935!
setUp

	mpAction := [ :anAmount :aCreditCard | ].
	itemFactory := StoreTestObjectsFactory new.
	dateAndTime := DateAndTime year: 2019 month: 11 day: 20 hour: 15 minute: 30. ! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/16/2019 14:03:38' prior: 50787399!
fastForwardMinutes: anAmountOfMinutes

	dateAndTime := dateAndTime + (Duration minutes: anAmountOfMinutes).! !
!MarketInterfaceTest methodsFor: 'as yet unclassified' stamp: 'A.B. 11/16/2019 14:03:38' prior: 50789484!
dateAndTime

	^ dateAndTime.! !

!testRun: #MarketInterfaceTest #test01NewlyCreatedCartIsEmpty stamp: 'A.B. 11/16/2019 14:12:53'!
PASSED!

!testRun: #MarketInterfaceTest #test02CreatingCartsReturnDifferentIDs stamp: 'A.B. 11/16/2019 14:12:53'!
PASSED!

!testRun: #MarketInterfaceTest #test03OneBookAddedToCartIsListed stamp: 'A.B. 11/16/2019 14:12:53'!
PASSED!

!testRun: #MarketInterfaceTest #test04MoreThanOneBookAddedAreListedCorrectly stamp: 'A.B. 11/16/2019 14:12:53'!
PASSED!

!testRun: #MarketInterfaceTest #test05DifferentCartsCanBeListedCorrectly stamp: 'A.B. 11/16/2019 14:12:53'!
PASSED!

!testRun: #MarketInterfaceTest #test06ListingNonExistantCartIDRaisesError stamp: 'A.B. 11/16/2019 14:12:53'!
PASSED!

!testRun: #MarketInterfaceTest #test07AddingToInvalidCartIDRaisesError stamp: 'A.B. 11/16/2019 14:12:53'!
PASSED!

!testRun: #MarketInterfaceTest #test08CreatingCartWithIncorrectPasswordRaisesError stamp: 'A.B. 11/16/2019 14:12:53'!
PASSED!

!testRun: #MarketInterfaceTest #test09CreatingCartWithInvalidUserRaisesError stamp: 'A.B. 11/16/2019 14:12:53'!
PASSED!

!testRun: #MarketInterfaceTest #test10CheckoutCartWithInvalidIdRaisesError stamp: 'A.B. 11/16/2019 14:12:53'!
PASSED!

!testRun: #MarketInterfaceTest #test11DifferentValidCheckoutsGiveDIfferentTransactionIds stamp: 'A.B. 11/16/2019 14:12:53'!
PASSED!

!testRun: #MarketInterfaceTest #test12AddingBooksToClosedCartRaisesError stamp: 'A.B. 11/16/2019 14:12:53'!
PASSED!

!testRun: #MarketInterfaceTest #test13CheckingOutTwiceTheSameCartRaisesError stamp: 'A.B. 11/16/2019 14:12:53'!
PASSED!

!testRun: #MarketInterfaceTest #test14CheckingOutCommunicatesCorrectlyWithMP stamp: 'A.B. 11/16/2019 14:12:53'!
PASSED!

!testRun: #MarketInterfaceTest #test15ListingPurchasesOfInvalidUserRaisesError stamp: 'A.B. 11/16/2019 14:12:53'!
PASSED!

!testRun: #MarketInterfaceTest #test16ListingPurchasesWithInvalidPasswordRaisesError stamp: 'A.B. 11/16/2019 14:12:53'!
PASSED!

!testRun: #MarketInterfaceTest #test17ListPurchasesOfNewUserIsEmpty stamp: 'A.B. 11/16/2019 14:12:53'!
PASSED!

!testRun: #MarketInterfaceTest #test18ListingOfAUserListsTheCorrectTotal stamp: 'A.B. 11/16/2019 14:12:53'!
PASSED!

!testRun: #MarketInterfaceTest #test19DifferentUsersHaveDifferentPurchasesList stamp: 'A.B. 11/16/2019 14:12:53'!
PASSED!

!testRun: #MarketInterfaceTest #test20ListingOfAUserListsTheCorrectBooksAndAmounts stamp: 'A.B. 11/16/2019 14:12:53'!
PASSED!

!testRun: #MarketInterfaceTest #test21AddingBookToExpiredCartRaisesError stamp: 'A.B. 11/16/2019 14:12:53'!
PASSED!

!testRun: #MarketInterfaceTest #test22ListingExpiredCartRaisesError stamp: 'A.B. 11/16/2019 14:12:53'!
PASSED!

!testRun: #MarketInterfaceTest #test23CheckOutOnExpiredCartRaisesError stamp: 'A.B. 11/16/2019 14:12:53'!
PASSED!

!methodRemoval: MarketInterface class #defaultCatalog stamp: 'A.B. 11/16/2019 15:03:48'!
defaultCatalog
	
	^ Dictionary new
		at: 'validBook' put: 10;
		yourself !

!testRun: #MarketInterfaceTest #test01NewlyCreatedCartIsEmpty stamp: 'A.B. 11/16/2019 15:03:50'!
PASSED!

!testRun: #MarketInterfaceTest #test02CreatingCartsReturnDifferentIDs stamp: 'A.B. 11/16/2019 15:03:50'!
PASSED!

!testRun: #MarketInterfaceTest #test03OneBookAddedToCartIsListed stamp: 'A.B. 11/16/2019 15:03:50'!
PASSED!

!testRun: #MarketInterfaceTest #test04MoreThanOneBookAddedAreListedCorrectly stamp: 'A.B. 11/16/2019 15:03:50'!
PASSED!

!testRun: #MarketInterfaceTest #test05DifferentCartsCanBeListedCorrectly stamp: 'A.B. 11/16/2019 15:03:50'!
PASSED!

!testRun: #MarketInterfaceTest #test06ListingNonExistantCartIDRaisesError stamp: 'A.B. 11/16/2019 15:03:50'!
PASSED!

!testRun: #MarketInterfaceTest #test07AddingToInvalidCartIDRaisesError stamp: 'A.B. 11/16/2019 15:03:50'!
PASSED!

!testRun: #MarketInterfaceTest #test08CreatingCartWithIncorrectPasswordRaisesError stamp: 'A.B. 11/16/2019 15:03:50'!
PASSED!

!testRun: #MarketInterfaceTest #test09CreatingCartWithInvalidUserRaisesError stamp: 'A.B. 11/16/2019 15:03:50'!
PASSED!

!testRun: #MarketInterfaceTest #test10CheckoutCartWithInvalidIdRaisesError stamp: 'A.B. 11/16/2019 15:03:50'!
PASSED!

!testRun: #MarketInterfaceTest #test11DifferentValidCheckoutsGiveDIfferentTransactionIds stamp: 'A.B. 11/16/2019 15:03:50'!
PASSED!

!testRun: #MarketInterfaceTest #test12AddingBooksToClosedCartRaisesError stamp: 'A.B. 11/16/2019 15:03:50'!
PASSED!

!testRun: #MarketInterfaceTest #test13CheckingOutTwiceTheSameCartRaisesError stamp: 'A.B. 11/16/2019 15:03:50'!
PASSED!

!testRun: #MarketInterfaceTest #test14CheckingOutCommunicatesCorrectlyWithMP stamp: 'A.B. 11/16/2019 15:03:50'!
PASSED!

!testRun: #MarketInterfaceTest #test15ListingPurchasesOfInvalidUserRaisesError stamp: 'A.B. 11/16/2019 15:03:50'!
PASSED!

!testRun: #MarketInterfaceTest #test16ListingPurchasesWithInvalidPasswordRaisesError stamp: 'A.B. 11/16/2019 15:03:50'!
PASSED!

!testRun: #MarketInterfaceTest #test17ListPurchasesOfNewUserIsEmpty stamp: 'A.B. 11/16/2019 15:03:50'!
PASSED!

!testRun: #MarketInterfaceTest #test18ListingOfAUserListsTheCorrectTotal stamp: 'A.B. 11/16/2019 15:03:50'!
PASSED!

!testRun: #MarketInterfaceTest #test19DifferentUsersHaveDifferentPurchasesList stamp: 'A.B. 11/16/2019 15:03:50'!
PASSED!

!testRun: #MarketInterfaceTest #test20ListingOfAUserListsTheCorrectBooksAndAmounts stamp: 'A.B. 11/16/2019 15:03:50'!
PASSED!

!testRun: #MarketInterfaceTest #test21AddingBookToExpiredCartRaisesError stamp: 'A.B. 11/16/2019 15:03:50'!
PASSED!

!testRun: #MarketInterfaceTest #test22ListingExpiredCartRaisesError stamp: 'A.B. 11/16/2019 15:03:50'!
PASSED!

!testRun: #MarketInterfaceTest #test23CheckOutOnExpiredCartRaisesError stamp: 'A.B. 11/16/2019 15:03:50'!
PASSED!
!MarketInterface class methodsFor: 'instance creation' stamp: 'A.B. 11/16/2019 15:08:17'!
aaaa
	! !

!methodRemoval: MarketInterface class #aaaa stamp: 'A.B. 11/16/2019 15:09:06'!
aaaa
	!

!testRun: #MarketInterfaceTest #test01NewlyCreatedCartIsEmpty stamp: 'A.B. 11/16/2019 15:09:11'!
PASSED!

!testRun: #MarketInterfaceTest #test02CreatingCartsReturnDifferentIDs stamp: 'A.B. 11/16/2019 15:09:11'!
PASSED!

!testRun: #MarketInterfaceTest #test03OneBookAddedToCartIsListed stamp: 'A.B. 11/16/2019 15:09:11'!
PASSED!

!testRun: #MarketInterfaceTest #test04MoreThanOneBookAddedAreListedCorrectly stamp: 'A.B. 11/16/2019 15:09:11'!
PASSED!

!testRun: #MarketInterfaceTest #test05DifferentCartsCanBeListedCorrectly stamp: 'A.B. 11/16/2019 15:09:11'!
PASSED!

!testRun: #MarketInterfaceTest #test06ListingNonExistantCartIDRaisesError stamp: 'A.B. 11/16/2019 15:09:11'!
PASSED!

!testRun: #MarketInterfaceTest #test07AddingToInvalidCartIDRaisesError stamp: 'A.B. 11/16/2019 15:09:11'!
PASSED!

!testRun: #MarketInterfaceTest #test08CreatingCartWithIncorrectPasswordRaisesError stamp: 'A.B. 11/16/2019 15:09:11'!
PASSED!

!testRun: #MarketInterfaceTest #test09CreatingCartWithInvalidUserRaisesError stamp: 'A.B. 11/16/2019 15:09:11'!
PASSED!

!testRun: #MarketInterfaceTest #test10CheckoutCartWithInvalidIdRaisesError stamp: 'A.B. 11/16/2019 15:09:11'!
PASSED!

!testRun: #MarketInterfaceTest #test11DifferentValidCheckoutsGiveDIfferentTransactionIds stamp: 'A.B. 11/16/2019 15:09:11'!
PASSED!

!testRun: #MarketInterfaceTest #test12AddingBooksToClosedCartRaisesError stamp: 'A.B. 11/16/2019 15:09:11'!
PASSED!

!testRun: #MarketInterfaceTest #test13CheckingOutTwiceTheSameCartRaisesError stamp: 'A.B. 11/16/2019 15:09:11'!
PASSED!

!testRun: #MarketInterfaceTest #test14CheckingOutCommunicatesCorrectlyWithMP stamp: 'A.B. 11/16/2019 15:09:11'!
PASSED!

!testRun: #MarketInterfaceTest #test15ListingPurchasesOfInvalidUserRaisesError stamp: 'A.B. 11/16/2019 15:09:11'!
PASSED!

!testRun: #MarketInterfaceTest #test16ListingPurchasesWithInvalidPasswordRaisesError stamp: 'A.B. 11/16/2019 15:09:11'!
PASSED!

!testRun: #MarketInterfaceTest #test17ListPurchasesOfNewUserIsEmpty stamp: 'A.B. 11/16/2019 15:09:11'!
PASSED!

!testRun: #MarketInterfaceTest #test18ListingOfAUserListsTheCorrectTotal stamp: 'A.B. 11/16/2019 15:09:11'!
PASSED!

!testRun: #MarketInterfaceTest #test19DifferentUsersHaveDifferentPurchasesList stamp: 'A.B. 11/16/2019 15:09:11'!
PASSED!

!testRun: #MarketInterfaceTest #test20ListingOfAUserListsTheCorrectBooksAndAmounts stamp: 'A.B. 11/16/2019 15:09:11'!
PASSED!

!testRun: #MarketInterfaceTest #test21AddingBookToExpiredCartRaisesError stamp: 'A.B. 11/16/2019 15:09:11'!
PASSED!

!testRun: #MarketInterfaceTest #test22ListingExpiredCartRaisesError stamp: 'A.B. 11/16/2019 15:09:11'!
PASSED!

!testRun: #MarketInterfaceTest #test23CheckOutOnExpiredCartRaisesError stamp: 'A.B. 11/16/2019 15:09:11'!
PASSED!
!MarketInterfaceTest methodsFor: 'default items' stamp: 'A.B. 11/16/2019 15:10:31' prior: 50785775!
defaultMarket

	^ MarketInterface withUserPasswords: self defaultUserPasswords 
							withPriceList: itemFactory defaultCatalog 
							withMP: self 
							withTimeGuru: self.
	! !

!testRun: #MarketInterfaceTest #test01NewlyCreatedCartIsEmpty stamp: 'A.B. 11/16/2019 15:10:33'!
PASSED!

!testRun: #MarketInterfaceTest #test02CreatingCartsReturnDifferentIDs stamp: 'A.B. 11/16/2019 15:10:33'!
PASSED!

!testRun: #MarketInterfaceTest #test03OneBookAddedToCartIsListed stamp: 'A.B. 11/16/2019 15:10:33'!
PASSED!

!testRun: #MarketInterfaceTest #test04MoreThanOneBookAddedAreListedCorrectly stamp: 'A.B. 11/16/2019 15:10:33'!
PASSED!

!testRun: #MarketInterfaceTest #test05DifferentCartsCanBeListedCorrectly stamp: 'A.B. 11/16/2019 15:10:33'!
PASSED!

!testRun: #MarketInterfaceTest #test06ListingNonExistantCartIDRaisesError stamp: 'A.B. 11/16/2019 15:10:33'!
PASSED!

!testRun: #MarketInterfaceTest #test07AddingToInvalidCartIDRaisesError stamp: 'A.B. 11/16/2019 15:10:33'!
PASSED!

!testRun: #MarketInterfaceTest #test08CreatingCartWithIncorrectPasswordRaisesError stamp: 'A.B. 11/16/2019 15:10:34'!
PASSED!

!testRun: #MarketInterfaceTest #test09CreatingCartWithInvalidUserRaisesError stamp: 'A.B. 11/16/2019 15:10:34'!
PASSED!

!testRun: #MarketInterfaceTest #test10CheckoutCartWithInvalidIdRaisesError stamp: 'A.B. 11/16/2019 15:10:34'!
PASSED!

!testRun: #MarketInterfaceTest #test11DifferentValidCheckoutsGiveDIfferentTransactionIds stamp: 'A.B. 11/16/2019 15:10:34'!
PASSED!

!testRun: #MarketInterfaceTest #test12AddingBooksToClosedCartRaisesError stamp: 'A.B. 11/16/2019 15:10:34'!
PASSED!

!testRun: #MarketInterfaceTest #test13CheckingOutTwiceTheSameCartRaisesError stamp: 'A.B. 11/16/2019 15:10:34'!
PASSED!

!testRun: #MarketInterfaceTest #test14CheckingOutCommunicatesCorrectlyWithMP stamp: 'A.B. 11/16/2019 15:10:34'!
PASSED!

!testRun: #MarketInterfaceTest #test15ListingPurchasesOfInvalidUserRaisesError stamp: 'A.B. 11/16/2019 15:10:34'!
PASSED!

!testRun: #MarketInterfaceTest #test16ListingPurchasesWithInvalidPasswordRaisesError stamp: 'A.B. 11/16/2019 15:10:34'!
PASSED!

!testRun: #MarketInterfaceTest #test17ListPurchasesOfNewUserIsEmpty stamp: 'A.B. 11/16/2019 15:10:34'!
PASSED!

!testRun: #MarketInterfaceTest #test18ListingOfAUserListsTheCorrectTotal stamp: 'A.B. 11/16/2019 15:10:34'!
PASSED!

!testRun: #MarketInterfaceTest #test19DifferentUsersHaveDifferentPurchasesList stamp: 'A.B. 11/16/2019 15:10:34'!
PASSED!

!testRun: #MarketInterfaceTest #test20ListingOfAUserListsTheCorrectBooksAndAmounts stamp: 'A.B. 11/16/2019 15:10:34'!
PASSED!

!testRun: #MarketInterfaceTest #test21AddingBookToExpiredCartRaisesError stamp: 'A.B. 11/16/2019 15:10:34'!
PASSED!

!testRun: #MarketInterfaceTest #test22ListingExpiredCartRaisesError stamp: 'A.B. 11/16/2019 15:10:34'!
PASSED!

!testRun: #MarketInterfaceTest #test23CheckOutOnExpiredCartRaisesError stamp: 'A.B. 11/16/2019 15:10:34'!
PASSED!

!methodRemoval: MarketInterfaceTest #defaultPriceList stamp: 'A.B. 11/16/2019 15:10:48'!
defaultPriceList

	^ itemFactory defaultCatalog.!

----SNAPSHOT----(16 November 2019 15:11:32) CuisUniversity-3938.image priorSource: 14633271!

----STARTUP---- (18 November 2019 10:27:57) as /home/jonno/exactas/ing1/cuis/TusLibros3/CuisUniversity-3938.image!


----End fileIn of /home/jonno/exactas/ing1-sandbox/25-TusLibros/interacion3/TusLibros.st----!
!MarketInterfaceTest methodsFor: 'tests - checkOutCart' stamp: 'js 11/18/2019 10:38:55'!
test24

	| market cartID |

	market := self defaultMarket.		
	                	
	cartID := self createCartForDefaultUserIn: market.

	self fastForwardMinutes: 25.
	
	market addToCart: cartID book: itemFactory itemSellByTheStore amount: 1.
	
	self fastForwardMinutes: 25.

	self assert: (market listCart: cartID) includes: itemFactory itemSellByTheStore.
! !

!testRun: #MarketInterfaceTest #test24 stamp: 'js 11/18/2019 10:38:56'!
ERROR!
!MarketInterfaceTest methodsFor: 'tests - checkOutCart' stamp: 'js 11/18/2019 10:40:04'!
test24CartCanBeUsedForMoreThanThirtyMinutesAfterCreation

	| market cartID |

	market := self defaultMarket.		
	                	
	cartID := self createCartForDefaultUserIn: market.

	self fastForwardMinutes: 25.
	
	market addToCart: cartID book: itemFactory itemSellByTheStore amount: 1.
	
	self fastForwardMinutes: 25.

	self assert: (market listCart: cartID) includes: itemFactory itemSellByTheStore.
! !

!methodRemoval: MarketInterfaceTest #test24 stamp: 'js 11/18/2019 10:40:04'!
test24

	| market cartID |

	market := self defaultMarket.		
	                	
	cartID := self createCartForDefaultUserIn: market.

	self fastForwardMinutes: 25.
	
	market addToCart: cartID book: itemFactory itemSellByTheStore amount: 1.
	
	self fastForwardMinutes: 25.

	self assert: (market listCart: cartID) includes: itemFactory itemSellByTheStore.
!
!MarketInterfaceTest methodsFor: 'tests - checkOutCart' stamp: 'js 11/18/2019 10:40:27' prior: 50778650!
test24CartCanBeUsedForMoreThanThirtyMinutesAfterCreation

	"The 30min rule is from last usage, not from creation"

	| market cartID |

	market := self defaultMarket.		
	                	
	cartID := self createCartForDefaultUserIn: market.

	self fastForwardMinutes: 25.
	
	market addToCart: cartID book: itemFactory itemSellByTheStore amount: 1.
	
	self fastForwardMinutes: 25.

	self assert: (market listCart: cartID) includes: itemFactory itemSellByTheStore.
! !
!MarketInterface methodsFor: 'cart storage - private' stamp: 'js 11/18/2019 10:43:11'!
pvtUpdateCartLastUsageTime: cartID

	cartCreationTime at: cartID put: timeGuru dateAndTime.
	! !
!MarketInterface methodsFor: 'cart storage - private' stamp: 'js 11/18/2019 10:43:31'!
pvtUpdateLastUsageTimeOfCart: cartID

	cartCreationTime at: cartID put: timeGuru dateAndTime.
	! !

!methodRemoval: MarketInterface #pvtUpdateCartLastUsageTime: stamp: 'js 11/18/2019 10:43:31'!
pvtUpdateCartLastUsageTime: cartID

	cartCreationTime at: cartID put: timeGuru dateAndTime.
	!

!classDefinition: #MarketInterface category: #TusLibros stamp: 'js 11/18/2019 10:43:47'!
Object subclass: #MarketInterface
	instanceVariableNames: 'currentID cartsByID userPasswords priceList currentTransactionID checkedOutCarts merchantProcessor timeGuru salesBooks cartIdOwners cartLastUsageTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MarketInterface methodsFor: 'as yet unclassified' stamp: 'js 11/18/2019 10:43:47' prior: 50778404!
pvtSaveCart: aCart of: aUser
	
	| cartID |
	
	cartID := self pvtAvailableID .
	
	cartsByID at: cartID put: aCart .
	cartIdOwners at: cartID put: aUser. 
	cartLastUsageTime at: cartID put: timeGuru dateAndTime.
	! !
!MarketInterface methodsFor: 'as yet unclassified' stamp: 'js 11/18/2019 10:43:47' prior: 50778704!
pvtUpdateLastUsageTimeOfCart: cartID

	cartLastUsageTime at: cartID put: timeGuru dateAndTime.
	! !
!MarketInterface methodsFor: 'as yet unclassified' stamp: 'js 11/18/2019 10:43:47' prior: 50778414!
initializeWithPasswords: someUserPasswords withPriceList: aPriceList withMP: aMP withTimeGuru: aTimeGuru   

	currentID := 0.
	cartsByID := Dictionary new.
	currentTransactionID := 0.
	checkedOutCarts := OrderedCollection new.
	userPasswords := someUserPasswords.
	priceList := aPriceList.
	cartIdOwners := Dictionary new.
	merchantProcessor := aMP.
	timeGuru := aTimeGuru.
	salesBooks := Dictionary new.
	userPasswords keys do: [ :aUser |
		salesBooks at: aUser put: SalesBook new.	
	].
	cartLastUsageTime := Dictionary new.

	! !
!MarketInterface methodsFor: 'as yet unclassified' stamp: 'js 11/18/2019 10:43:47' prior: 50778361!
pvtAssertCartIDIsNotExpired: aCartID
	
	| creationTime nowTime |
	
	nowTime := timeGuru dateAndTime.
	creationTime := cartLastUsageTime at: aCartID .
	
	((nowTime - creationTime ) >= (Duration minutes: 30))  ifTrue: [self error: self class errorExpiredCart ].
	! !
!MarketInterface methodsFor: 'cart storage - private' stamp: 'js 11/18/2019 10:44:16' prior: 50778728!
pvtSaveCart: aCart of: aUser
	
	| cartID |
	
	cartID := self pvtAvailableID .
	
	cartsByID at: cartID put: aCart .
	cartIdOwners at: cartID put: aUser. 
	
	self pvtUpdateLastUsageTimeOfCart: cartID.
	! !
!MarketInterface methodsFor: 'protocol' stamp: 'js 11/18/2019 10:45:36' prior: 50778306!
addToCart: aCartID book: aBook amount: anAmount

	| cart |
	
	cart := self pvtGetCartFromID: aCartID.
	
	self pvtAssertCartIDIsNotExpired: aCartID .
	self pvtAssertCartIsNotCheckedOut: aCartID .
	self pvtUpdateLastUsageTimeOfCart: aCartID.
	
	cart add: anAmount of: aBook. ! !
!MarketInterface methodsFor: 'protocol' stamp: 'js 11/18/2019 10:45:46' prior: 50778316!
checkOutCart: aCartID withCreditCard: aCreditCard

	| cart cashier cartOwner |
	
	cart := self pvtGetCartFromID: aCartID.
		
	self pvtAssertCartIsNotCheckedOut: aCartID .
	self pvtAssertCartIDIsNotExpired: aCartID .
	self pvtUpdateLastUsageTimeOfCart: aCartID.
	
	cartOwner := cartIdOwners at: aCartID.
	
	cashier := Cashier 
		toCheckout: cart 
		charging: aCreditCard
		throught: merchantProcessor
		on: timeGuru dateAndTime 
		registeringOn: (salesBooks at: cartOwner).
	
	cashier checkOut.
	
	checkedOutCarts add: aCartID.
	
	currentTransactionID := currentTransactionID + 1.
	^ currentTransactionID.

	
	

! !
!MarketInterface methodsFor: 'protocol' stamp: 'js 11/18/2019 10:46:02' prior: 50778347!
listCart: aCartID 

	| cart |
	
	cart := self pvtGetCartFromID: aCartID.
		
	self pvtAssertCartIDIsNotExpired: aCartID .
	self pvtUpdateLastUsageTimeOfCart: aCartID.

	^ cart listItems .! !
!MarketInterface methodsFor: 'protocol' stamp: 'js 11/18/2019 10:46:23' prior: 50778799!
checkOutCart: aCartID withCreditCard: aCreditCard

	| cart cashier cartOwner |
	
	cart := self pvtGetCartFromID: aCartID.
	
	self pvtAssertCartIDIsNotExpired: aCartID .
	self pvtAssertCartIsNotCheckedOut: aCartID .
	self pvtUpdateLastUsageTimeOfCart: aCartID.
	
	cartOwner := cartIdOwners at: aCartID.
	
	cashier := Cashier 
		toCheckout: cart 
		charging: aCreditCard
		throught: merchantProcessor
		on: timeGuru dateAndTime 
		registeringOn: (salesBooks at: cartOwner).
	
	cashier checkOut.
	
	checkedOutCarts add: aCartID.
	
	currentTransactionID := currentTransactionID + 1.
	^ currentTransactionID.

	
	

! !
!MarketInterface methodsFor: 'protocol' stamp: 'js 11/18/2019 10:47:13' prior: 50778354!
listPurchasesOf: aUser withPassword: aPassword

	self pvtAutenticateUser: aUser password: aPassword .
		
	^ salesBooks at: aUser.! !
!MarketInterface methodsFor: 'protocol' stamp: 'js 11/18/2019 10:47:22' prior: 50778821!
listCart: aCartID 

	| cart |
	
	cart := self pvtGetCartFromID: aCartID.
		
	self pvtAssertCartIDIsNotExpired: aCartID .
	self pvtUpdateLastUsageTimeOfCart: aCartID.

	^ cart listItems .! !

!testRun: #MarketInterfaceTest #test24CartCanBeUsedForMoreThanThirtyMinutesAfterCreation stamp: 'js 11/18/2019 10:47:41'!
PASSED!

!testRun: #MarketInterfaceTest #test01NewlyCreatedCartIsEmpty stamp: 'js 11/18/2019 10:47:41'!
PASSED!

!testRun: #MarketInterfaceTest #test02CreatingCartsReturnDifferentIDs stamp: 'js 11/18/2019 10:47:41'!
PASSED!

!testRun: #MarketInterfaceTest #test03OneBookAddedToCartIsListed stamp: 'js 11/18/2019 10:47:41'!
PASSED!

!testRun: #MarketInterfaceTest #test04MoreThanOneBookAddedAreListedCorrectly stamp: 'js 11/18/2019 10:47:41'!
PASSED!

!testRun: #MarketInterfaceTest #test05DifferentCartsCanBeListedCorrectly stamp: 'js 11/18/2019 10:47:41'!
PASSED!

!testRun: #MarketInterfaceTest #test06ListingNonExistantCartIDRaisesError stamp: 'js 11/18/2019 10:47:41'!
PASSED!

!testRun: #MarketInterfaceTest #test07AddingToInvalidCartIDRaisesError stamp: 'js 11/18/2019 10:47:41'!
PASSED!

!testRun: #MarketInterfaceTest #test08CreatingCartWithIncorrectPasswordRaisesError stamp: 'js 11/18/2019 10:47:41'!
PASSED!

!testRun: #MarketInterfaceTest #test09CreatingCartWithInvalidUserRaisesError stamp: 'js 11/18/2019 10:47:41'!
PASSED!

!testRun: #MarketInterfaceTest #test10CheckoutCartWithInvalidIdRaisesError stamp: 'js 11/18/2019 10:47:41'!
PASSED!

!testRun: #MarketInterfaceTest #test11DifferentValidCheckoutsGiveDIfferentTransactionIds stamp: 'js 11/18/2019 10:47:41'!
PASSED!

!testRun: #MarketInterfaceTest #test12AddingBooksToClosedCartRaisesError stamp: 'js 11/18/2019 10:47:41'!
PASSED!

!testRun: #MarketInterfaceTest #test13CheckingOutTwiceTheSameCartRaisesError stamp: 'js 11/18/2019 10:47:41'!
PASSED!

!testRun: #MarketInterfaceTest #test14CheckingOutCommunicatesCorrectlyWithMP stamp: 'js 11/18/2019 10:47:41'!
PASSED!

!testRun: #MarketInterfaceTest #test15ListingPurchasesOfInvalidUserRaisesError stamp: 'js 11/18/2019 10:47:41'!
PASSED!

!testRun: #MarketInterfaceTest #test16ListingPurchasesWithInvalidPasswordRaisesError stamp: 'js 11/18/2019 10:47:41'!
PASSED!

!testRun: #MarketInterfaceTest #test17ListPurchasesOfNewUserIsEmpty stamp: 'js 11/18/2019 10:47:41'!
PASSED!

!testRun: #MarketInterfaceTest #test18ListingOfAUserListsTheCorrectTotal stamp: 'js 11/18/2019 10:47:41'!
PASSED!

!testRun: #MarketInterfaceTest #test19DifferentUsersHaveDifferentPurchasesList stamp: 'js 11/18/2019 10:47:41'!
PASSED!

!testRun: #MarketInterfaceTest #test20ListingOfAUserListsTheCorrectBooksAndAmounts stamp: 'js 11/18/2019 10:47:41'!
PASSED!

!testRun: #MarketInterfaceTest #test21AddingBookToExpiredCartRaisesError stamp: 'js 11/18/2019 10:47:41'!
PASSED!

!testRun: #MarketInterfaceTest #test22ListingExpiredCartRaisesError stamp: 'js 11/18/2019 10:47:41'!
PASSED!

!testRun: #MarketInterfaceTest #test23CheckOutOnExpiredCartRaisesError stamp: 'js 11/18/2019 10:47:41'!
PASSED!

!testRun: #MarketInterfaceTest #test24CartCanBeUsedForMoreThanThirtyMinutesAfterCreation stamp: 'js 11/18/2019 10:47:41'!
PASSED!
!MarketInterface methodsFor: 'protocol' stamp: 'js 11/18/2019 10:56:33' prior: 50778859!
listCart: aCartID 

	| cart |
	
	cart := self pvtGetCartFromID: aCartID.
		
	self pvtAssertCartIDIsNotExpired: aCartID .
	self pvtUpdateLastUsageTimeOfCart: aCartID.
	self pvtUpdateLastUsageTimeOfCart: aCartID.

	^ cart listItems .! !
!MarketInterface methodsFor: 'protocol' stamp: 'js 11/18/2019 10:56:50' prior: 50778960!
listCart: aCartID 

	| cart |
	
	cart := self pvtGetCartFromID: aCartID.
		
	self pvtAssertCartIDIsNotExpired: aCartID .
	self pvtAssertCartIsNotCheckedOut: aCartID .
	self pvtUpdateLastUsageTimeOfCart: aCartID.

	^ cart listItems .! !

!testRun: #MarketInterfaceTest #test01NewlyCreatedCartIsEmpty stamp: 'js 11/18/2019 10:56:54'!
PASSED!

!testRun: #MarketInterfaceTest #test02CreatingCartsReturnDifferentIDs stamp: 'js 11/18/2019 10:56:54'!
PASSED!

!testRun: #MarketInterfaceTest #test03OneBookAddedToCartIsListed stamp: 'js 11/18/2019 10:56:54'!
PASSED!

!testRun: #MarketInterfaceTest #test04MoreThanOneBookAddedAreListedCorrectly stamp: 'js 11/18/2019 10:56:54'!
PASSED!

!testRun: #MarketInterfaceTest #test05DifferentCartsCanBeListedCorrectly stamp: 'js 11/18/2019 10:56:54'!
PASSED!

!testRun: #MarketInterfaceTest #test06ListingNonExistantCartIDRaisesError stamp: 'js 11/18/2019 10:56:54'!
PASSED!

!testRun: #MarketInterfaceTest #test07AddingToInvalidCartIDRaisesError stamp: 'js 11/18/2019 10:56:54'!
PASSED!

!testRun: #MarketInterfaceTest #test08CreatingCartWithIncorrectPasswordRaisesError stamp: 'js 11/18/2019 10:56:54'!
PASSED!

!testRun: #MarketInterfaceTest #test09CreatingCartWithInvalidUserRaisesError stamp: 'js 11/18/2019 10:56:54'!
PASSED!

!testRun: #MarketInterfaceTest #test10CheckoutCartWithInvalidIdRaisesError stamp: 'js 11/18/2019 10:56:54'!
PASSED!

!testRun: #MarketInterfaceTest #test11DifferentValidCheckoutsGiveDIfferentTransactionIds stamp: 'js 11/18/2019 10:56:54'!
PASSED!

!testRun: #MarketInterfaceTest #test12AddingBooksToClosedCartRaisesError stamp: 'js 11/18/2019 10:56:54'!
ERROR!

!testRun: #MarketInterfaceTest #test13CheckingOutTwiceTheSameCartRaisesError stamp: 'js 11/18/2019 10:56:54'!
ERROR!

!testRun: #MarketInterfaceTest #test14CheckingOutCommunicatesCorrectlyWithMP stamp: 'js 11/18/2019 10:56:54'!
PASSED!

!testRun: #MarketInterfaceTest #test15ListingPurchasesOfInvalidUserRaisesError stamp: 'js 11/18/2019 10:56:54'!
PASSED!

!testRun: #MarketInterfaceTest #test16ListingPurchasesWithInvalidPasswordRaisesError stamp: 'js 11/18/2019 10:56:54'!
PASSED!

!testRun: #MarketInterfaceTest #test17ListPurchasesOfNewUserIsEmpty stamp: 'js 11/18/2019 10:56:54'!
PASSED!

!testRun: #MarketInterfaceTest #test18ListingOfAUserListsTheCorrectTotal stamp: 'js 11/18/2019 10:56:54'!
PASSED!

!testRun: #MarketInterfaceTest #test19DifferentUsersHaveDifferentPurchasesList stamp: 'js 11/18/2019 10:56:54'!
PASSED!

!testRun: #MarketInterfaceTest #test20ListingOfAUserListsTheCorrectBooksAndAmounts stamp: 'js 11/18/2019 10:56:54'!
PASSED!

!testRun: #MarketInterfaceTest #test21AddingBookToExpiredCartRaisesError stamp: 'js 11/18/2019 10:56:54'!
PASSED!

!testRun: #MarketInterfaceTest #test22ListingExpiredCartRaisesError stamp: 'js 11/18/2019 10:56:54'!
PASSED!

!testRun: #MarketInterfaceTest #test23CheckOutOnExpiredCartRaisesError stamp: 'js 11/18/2019 10:56:54'!
PASSED!

!testRun: #MarketInterfaceTest #test24CartCanBeUsedForMoreThanThirtyMinutesAfterCreation stamp: 'js 11/18/2019 10:56:54'!
PASSED!
!MarketInterface methodsFor: 'protocol' stamp: 'js 11/18/2019 11:06:23' prior: 50778971!
listCart: aCartID 

	| cart |
	
	cart := self pvtGetCartFromID: aCartID.
		
	self pvtAssertCartIDIsNotExpired: aCartID .
	self pvtUpdateLastUsageTimeOfCart: aCartID.

	^ cart listItems .! !

!testRun: #MarketInterfaceTest #test01NewlyCreatedCartIsEmpty stamp: 'js 11/18/2019 11:06:27'!
PASSED!

!testRun: #MarketInterfaceTest #test02CreatingCartsReturnDifferentIDs stamp: 'js 11/18/2019 11:06:27'!
PASSED!

!testRun: #MarketInterfaceTest #test03OneBookAddedToCartIsListed stamp: 'js 11/18/2019 11:06:27'!
PASSED!

!testRun: #MarketInterfaceTest #test04MoreThanOneBookAddedAreListedCorrectly stamp: 'js 11/18/2019 11:06:27'!
PASSED!

!testRun: #MarketInterfaceTest #test05DifferentCartsCanBeListedCorrectly stamp: 'js 11/18/2019 11:06:27'!
PASSED!

!testRun: #MarketInterfaceTest #test06ListingNonExistantCartIDRaisesError stamp: 'js 11/18/2019 11:06:27'!
PASSED!

!testRun: #MarketInterfaceTest #test07AddingToInvalidCartIDRaisesError stamp: 'js 11/18/2019 11:06:27'!
PASSED!

!testRun: #MarketInterfaceTest #test08CreatingCartWithIncorrectPasswordRaisesError stamp: 'js 11/18/2019 11:06:27'!
PASSED!

!testRun: #MarketInterfaceTest #test09CreatingCartWithInvalidUserRaisesError stamp: 'js 11/18/2019 11:06:27'!
PASSED!

!testRun: #MarketInterfaceTest #test10CheckoutCartWithInvalidIdRaisesError stamp: 'js 11/18/2019 11:06:27'!
PASSED!

!testRun: #MarketInterfaceTest #test11DifferentValidCheckoutsGiveDIfferentTransactionIds stamp: 'js 11/18/2019 11:06:27'!
PASSED!

!testRun: #MarketInterfaceTest #test12AddingBooksToClosedCartRaisesError stamp: 'js 11/18/2019 11:06:27'!
PASSED!

!testRun: #MarketInterfaceTest #test13CheckingOutTwiceTheSameCartRaisesError stamp: 'js 11/18/2019 11:06:27'!
PASSED!

!testRun: #MarketInterfaceTest #test14CheckingOutCommunicatesCorrectlyWithMP stamp: 'js 11/18/2019 11:06:27'!
PASSED!

!testRun: #MarketInterfaceTest #test15ListingPurchasesOfInvalidUserRaisesError stamp: 'js 11/18/2019 11:06:27'!
PASSED!

!testRun: #MarketInterfaceTest #test16ListingPurchasesWithInvalidPasswordRaisesError stamp: 'js 11/18/2019 11:06:27'!
PASSED!

!testRun: #MarketInterfaceTest #test17ListPurchasesOfNewUserIsEmpty stamp: 'js 11/18/2019 11:06:27'!
PASSED!

!testRun: #MarketInterfaceTest #test18ListingOfAUserListsTheCorrectTotal stamp: 'js 11/18/2019 11:06:27'!
PASSED!

!testRun: #MarketInterfaceTest #test19DifferentUsersHaveDifferentPurchasesList stamp: 'js 11/18/2019 11:06:27'!
PASSED!

!testRun: #MarketInterfaceTest #test20ListingOfAUserListsTheCorrectBooksAndAmounts stamp: 'js 11/18/2019 11:06:27'!
PASSED!

!testRun: #MarketInterfaceTest #test21AddingBookToExpiredCartRaisesError stamp: 'js 11/18/2019 11:06:27'!
PASSED!

!testRun: #MarketInterfaceTest #test22ListingExpiredCartRaisesError stamp: 'js 11/18/2019 11:06:27'!
PASSED!

!testRun: #MarketInterfaceTest #test23CheckOutOnExpiredCartRaisesError stamp: 'js 11/18/2019 11:06:27'!
PASSED!

!testRun: #MarketInterfaceTest #test24CartCanBeUsedForMoreThanThirtyMinutesAfterCreation stamp: 'js 11/18/2019 11:06:27'!
PASSED!
!MarketInterface methodsFor: 'protocol' stamp: 'js 11/18/2019 11:15:40'!
pvtGetValidCartAndUpdateIt: aCartID

	| cart |

	cart := self pvtGetCartFromID: aCartID.
	
	self pvtAssertCartIDIsNotExpired: aCartID .
	self pvtAssertCartIsNotCheckedOut: aCartID .
	self pvtUpdateLastUsageTimeOfCart: aCartID.
	
	^ cart.! !
!MarketInterface methodsFor: 'protocol' stamp: 'js 11/18/2019 11:16:05' prior: 50778787!
addToCart: aCartID book: aBook amount: anAmount

	| cart |
	
	cart := self getValidCartAndUpdateIt: aCartID.
	
	cart add: anAmount of: aBook. ! !
!MarketInterface methodsFor: 'protocol' stamp: 'js 11/18/2019 11:16:28' prior: 50779178!
addToCart: aCartID book: aBook amount: anAmount

	| cart |
	
	cart := self pvtGetValidCartAndUpdateIt: aCartID.
	
	cart add: anAmount of: aBook. ! !
!MarketInterface methodsFor: 'protocol' stamp: 'js 11/18/2019 11:16:34' prior: 50778830!
checkOutCart: aCartID withCreditCard: aCreditCard

	| cart cashier cartOwner |
	
	cart := self pvtGetValidCartAndUpdateIt: aCartID.
	
	cartOwner := cartIdOwners at: aCartID.
	
	cashier := Cashier 
		toCheckout: cart 
		charging: aCreditCard
		throught: merchantProcessor
		on: timeGuru dateAndTime 
		registeringOn: (salesBooks at: cartOwner).
	
	cashier checkOut.
	
	checkedOutCarts add: aCartID.
	
	currentTransactionID := currentTransactionID + 1.
	^ currentTransactionID.

	
	

! !

!testRun: #MarketInterfaceTest #test01NewlyCreatedCartIsEmpty stamp: 'js 11/18/2019 11:16:37'!
PASSED!

!testRun: #MarketInterfaceTest #test02CreatingCartsReturnDifferentIDs stamp: 'js 11/18/2019 11:16:37'!
PASSED!

!testRun: #MarketInterfaceTest #test03OneBookAddedToCartIsListed stamp: 'js 11/18/2019 11:16:37'!
PASSED!

!testRun: #MarketInterfaceTest #test04MoreThanOneBookAddedAreListedCorrectly stamp: 'js 11/18/2019 11:16:37'!
PASSED!

!testRun: #MarketInterfaceTest #test05DifferentCartsCanBeListedCorrectly stamp: 'js 11/18/2019 11:16:37'!
PASSED!

!testRun: #MarketInterfaceTest #test06ListingNonExistantCartIDRaisesError stamp: 'js 11/18/2019 11:16:37'!
PASSED!

!testRun: #MarketInterfaceTest #test07AddingToInvalidCartIDRaisesError stamp: 'js 11/18/2019 11:16:37'!
PASSED!

!testRun: #MarketInterfaceTest #test08CreatingCartWithIncorrectPasswordRaisesError stamp: 'js 11/18/2019 11:16:37'!
PASSED!

!testRun: #MarketInterfaceTest #test09CreatingCartWithInvalidUserRaisesError stamp: 'js 11/18/2019 11:16:37'!
PASSED!

!testRun: #MarketInterfaceTest #test10CheckoutCartWithInvalidIdRaisesError stamp: 'js 11/18/2019 11:16:37'!
PASSED!

!testRun: #MarketInterfaceTest #test11DifferentValidCheckoutsGiveDIfferentTransactionIds stamp: 'js 11/18/2019 11:16:37'!
PASSED!

!testRun: #MarketInterfaceTest #test12AddingBooksToClosedCartRaisesError stamp: 'js 11/18/2019 11:16:37'!
PASSED!

!testRun: #MarketInterfaceTest #test13CheckingOutTwiceTheSameCartRaisesError stamp: 'js 11/18/2019 11:16:37'!
PASSED!

!testRun: #MarketInterfaceTest #test14CheckingOutCommunicatesCorrectlyWithMP stamp: 'js 11/18/2019 11:16:37'!
PASSED!

!testRun: #MarketInterfaceTest #test15ListingPurchasesOfInvalidUserRaisesError stamp: 'js 11/18/2019 11:16:37'!
PASSED!

!testRun: #MarketInterfaceTest #test16ListingPurchasesWithInvalidPasswordRaisesError stamp: 'js 11/18/2019 11:16:37'!
PASSED!

!testRun: #MarketInterfaceTest #test17ListPurchasesOfNewUserIsEmpty stamp: 'js 11/18/2019 11:16:37'!
PASSED!

!testRun: #MarketInterfaceTest #test18ListingOfAUserListsTheCorrectTotal stamp: 'js 11/18/2019 11:16:37'!
PASSED!

!testRun: #MarketInterfaceTest #test19DifferentUsersHaveDifferentPurchasesList stamp: 'js 11/18/2019 11:16:38'!
PASSED!

!testRun: #MarketInterfaceTest #test20ListingOfAUserListsTheCorrectBooksAndAmounts stamp: 'js 11/18/2019 11:16:38'!
PASSED!

!testRun: #MarketInterfaceTest #test21AddingBookToExpiredCartRaisesError stamp: 'js 11/18/2019 11:16:38'!
PASSED!

!testRun: #MarketInterfaceTest #test22ListingExpiredCartRaisesError stamp: 'js 11/18/2019 11:16:38'!
PASSED!

!testRun: #MarketInterfaceTest #test23CheckOutOnExpiredCartRaisesError stamp: 'js 11/18/2019 11:16:38'!
PASSED!

!testRun: #MarketInterfaceTest #test24CartCanBeUsedForMoreThanThirtyMinutesAfterCreation stamp: 'js 11/18/2019 11:16:38'!
PASSED!
!Sale class methodsFor: 'instance creation' stamp: 'js 11/18/2019 11:18:57' prior: 50778528!
ofItems: cartItems withTotal: aTotal

	^ self new initializeItems: cartItems withTotal: aTotal. ! !

!methodRemoval: Sale class #of:withItems: stamp: 'js 11/18/2019 11:19:25'!
of: aTotal withItems: cartItems.

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal withItems: cartItems. !

!methodRemoval: Sale #initializeTotal:withItems: stamp: 'js 11/18/2019 11:19:39'!
initializeTotal: aTotal withItems: cartItems

	total := aTotal.
	items := cartItems.!
!Sale methodsFor: 'initialization' stamp: 'js 11/18/2019 11:19:44' prior: 50778503!
initializeItems: cartItems withTotal: aTotal. 

	total := aTotal.
	items := cartItems.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'js 11/18/2019 11:19:51'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'js 11/18/2019 11:19:51'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'js 11/18/2019 11:19:51'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'js 11/18/2019 11:19:51'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'js 11/18/2019 11:19:51'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'js 11/18/2019 11:19:51'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'js 11/18/2019 11:19:51'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'js 11/18/2019 11:19:51'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'js 11/18/2019 11:19:52'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'js 11/18/2019 11:19:52'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'js 11/18/2019 11:19:52'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'js 11/18/2019 11:19:52'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'js 11/18/2019 11:19:52'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'js 11/18/2019 11:19:52'!
PASSED!

!testRun: #MarketInterfaceTest #test01NewlyCreatedCartIsEmpty stamp: 'js 11/18/2019 11:19:54'!
PASSED!

!testRun: #MarketInterfaceTest #test02CreatingCartsReturnDifferentIDs stamp: 'js 11/18/2019 11:19:54'!
PASSED!

!testRun: #MarketInterfaceTest #test03OneBookAddedToCartIsListed stamp: 'js 11/18/2019 11:19:54'!
PASSED!

!testRun: #MarketInterfaceTest #test04MoreThanOneBookAddedAreListedCorrectly stamp: 'js 11/18/2019 11:19:54'!
PASSED!

!testRun: #MarketInterfaceTest #test05DifferentCartsCanBeListedCorrectly stamp: 'js 11/18/2019 11:19:54'!
PASSED!

!testRun: #MarketInterfaceTest #test06ListingNonExistantCartIDRaisesError stamp: 'js 11/18/2019 11:19:54'!
PASSED!

!testRun: #MarketInterfaceTest #test07AddingToInvalidCartIDRaisesError stamp: 'js 11/18/2019 11:19:54'!
PASSED!

!testRun: #MarketInterfaceTest #test08CreatingCartWithIncorrectPasswordRaisesError stamp: 'js 11/18/2019 11:19:55'!
PASSED!

!testRun: #MarketInterfaceTest #test09CreatingCartWithInvalidUserRaisesError stamp: 'js 11/18/2019 11:19:55'!
PASSED!

!testRun: #MarketInterfaceTest #test10CheckoutCartWithInvalidIdRaisesError stamp: 'js 11/18/2019 11:19:55'!
PASSED!

!testRun: #MarketInterfaceTest #test11DifferentValidCheckoutsGiveDIfferentTransactionIds stamp: 'js 11/18/2019 11:19:55'!
PASSED!

!testRun: #MarketInterfaceTest #test12AddingBooksToClosedCartRaisesError stamp: 'js 11/18/2019 11:19:55'!
PASSED!

!testRun: #MarketInterfaceTest #test13CheckingOutTwiceTheSameCartRaisesError stamp: 'js 11/18/2019 11:19:55'!
PASSED!

!testRun: #MarketInterfaceTest #test14CheckingOutCommunicatesCorrectlyWithMP stamp: 'js 11/18/2019 11:19:55'!
PASSED!

!testRun: #MarketInterfaceTest #test15ListingPurchasesOfInvalidUserRaisesError stamp: 'js 11/18/2019 11:19:55'!
PASSED!

!testRun: #MarketInterfaceTest #test16ListingPurchasesWithInvalidPasswordRaisesError stamp: 'js 11/18/2019 11:19:55'!
PASSED!

!testRun: #MarketInterfaceTest #test17ListPurchasesOfNewUserIsEmpty stamp: 'js 11/18/2019 11:19:55'!
PASSED!

!testRun: #MarketInterfaceTest #test18ListingOfAUserListsTheCorrectTotal stamp: 'js 11/18/2019 11:19:55'!
PASSED!

!testRun: #MarketInterfaceTest #test19DifferentUsersHaveDifferentPurchasesList stamp: 'js 11/18/2019 11:19:55'!
PASSED!

!testRun: #MarketInterfaceTest #test20ListingOfAUserListsTheCorrectBooksAndAmounts stamp: 'js 11/18/2019 11:19:55'!
PASSED!

!testRun: #MarketInterfaceTest #test21AddingBookToExpiredCartRaisesError stamp: 'js 11/18/2019 11:19:55'!
PASSED!

!testRun: #MarketInterfaceTest #test22ListingExpiredCartRaisesError stamp: 'js 11/18/2019 11:19:55'!
PASSED!

!testRun: #MarketInterfaceTest #test23CheckOutOnExpiredCartRaisesError stamp: 'js 11/18/2019 11:19:55'!
PASSED!

!testRun: #MarketInterfaceTest #test24CartCanBeUsedForMoreThanThirtyMinutesAfterCreation stamp: 'js 11/18/2019 11:19:55'!
PASSED!
!MarketInterfaceTest methodsFor: 'tests - addToCart' stamp: 'js 11/18/2019 11:21:48' prior: 50777801!
test07AddingToInvalidCartIDRaisesError

	| market |

	market := self defaultMarket.		
	
	self should: [market addToCart: -12 book: itemFactory itemSellByTheStore amount: 1.] 
		 raise: Error - MessageNotUnderstood 
	      withMessageText: MarketInterface errorNonExistantCart .
	
	! !
!MarketInterfaceTest methodsFor: 'tests - listCart' stamp: 'js 11/18/2019 11:22:02' prior: 50777777!
test06ListingNonExistantCartIDRaisesError

	| market |

	market := self defaultMarket.		

	self should: [market listCart: -1] 
		 raise: Error - MessageNotUnderstood 
		 withMessageText: MarketInterface errorNonExistantCart.! !
!MarketInterfaceTest methodsFor: 'tests - listCart' stamp: 'js 11/18/2019 11:22:07' prior: 50777787!
test22ListingExpiredCartRaisesError

	| market cartID |

	market := self defaultMarket.		
	                            	
	cartID := self createCartForDefaultUserIn: market.
	
	self fastForwardMinutes: 30.
	
	self should: [market listCart: cartID .]  
		 raise: Error - MessageNotUnderstood  
		 withMessageText: market class errorExpiredCart.! !
!MarketInterfaceTest methodsFor: 'tests - checkOutCart' stamp: 'js 11/18/2019 11:23:51' prior: 50777854!
test10CheckoutCartWithInvalidIdRaisesError

	| market |

	market := self defaultMarket.		
	
	"HAY QUE REVISAR QUE NO SE MODIFICARON LAS VENTAS DEL CLIENTE"
	
	self should: [ market checkOutCart: -1 withCreditCard: itemFactory notExpiredCreditCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: MarketInterface errorNonExistantCart equals: anError messageText.
			self assert: (market listPurchasesOf: self defaultUsername withPassword: self defaultUsernamePassword) isEmpty.
		] ! !

!testRun: #MarketInterfaceTest #test10CheckoutCartWithInvalidIdRaisesError stamp: 'js 11/18/2019 11:23:53'!
PASSED!
!MarketInterfaceTest methodsFor: 'tests - checkOutCart' stamp: 'js 11/18/2019 11:23:57' prior: 50779498!
test10CheckoutCartWithInvalidIdRaisesError

	| market |

	market := self defaultMarket.		
	
	self should: [ market checkOutCart: -1 withCreditCard: itemFactory notExpiredCreditCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: MarketInterface errorNonExistantCart equals: anError messageText.
			self assert: (market listPurchasesOf: self defaultUsername withPassword: self defaultUsernamePassword) isEmpty.
		] ! !
!MarketInterfaceTest methodsFor: 'tests - checkOutCart' stamp: 'js 11/18/2019 11:24:48' prior: 50777947!
test23CheckOutOnExpiredCartRaisesError

	| market cartID |

	market := self defaultMarket.		
	                	
	cartID := self createCartForDefaultUserIn: market.
	
	market addToCart: cartID book: itemFactory itemSellByTheStore amount: 1.
	
	self fastForwardMinutes: 30.

	self should: [market checkOutCart: cartID withCreditCard: itemFactory notExpiredCreditCard.]  
		 raise: Error - MessageNotUnderstood  
		 withMessageText: market class errorExpiredCart.! !